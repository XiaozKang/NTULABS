
DC Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f44  08009538  08009538  00019538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a47c  0800a47c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a47c  0800a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a484  0800a484  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000770  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000954  20000954  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001266c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024d4  00000000  00000000  00032880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00035e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022831  00000000  00000000  00036ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cf8  00000000  00000000  00059729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd2d  00000000  00000000  0006d421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d14e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005af0  00000000  00000000  0013d1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009520 	.word	0x08009520

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009520 	.word	0x08009520

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_TIM_IC_CaptureCallback>:
int16_t Kp = 0;  // Initial PID values
int16_t Kd = 0;
float_t Ki = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ebc:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b0d      	ldr	r3, [pc, #52]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x50>)
 8000ec6:	801a      	strh	r2, [r3, #0]
	position = count/2;  // x2 encoding
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x50>)
 8000eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ece:	0fda      	lsrs	r2, r3, #31
 8000ed0:	4413      	add	r3, r2
 8000ed2:	105b      	asrs	r3, r3, #1
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000ed8:	801a      	strh	r2, [r3, #0]
	angle = count/2; // x2 encoding
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x50>)
 8000edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee0:	0fda      	lsrs	r2, r3, #31
 8000ee2:	4413      	add	r3, r2
 8000ee4:	105b      	asrs	r3, r3, #1
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000eea:	801a      	strh	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	200004d4 	.word	0x200004d4
 8000efc:	200004d8 	.word	0x200004d8
 8000f00:	20000504 	.word	0x20000504
 8000f04:	20000506 	.word	0x20000506

08000f08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
     // see EXTI0_IRQHandler() in stm32f4xx_it.c for interrupt
	if ( GPIO_Pin == USER_PB_Pin) {
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d122      	bne.n	8000f5e <HAL_GPIO_EXTI_Callback+0x56>
		// toggle LED
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12); // LED - A12
 8000f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1c:	4812      	ldr	r0, [pc, #72]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x60>)
 8000f1e:	f002 fc2e 	bl	800377e <HAL_GPIO_TogglePin>
		if (start == 0){
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x64>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d116      	bne.n	8000f58 <HAL_GPIO_EXTI_Callback+0x50>
			start = 1;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x64>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
		    // reset all value to Zero
		    TIM2->CNT = 0; // Timer Counter Value
 8000f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
		    speed = 0;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	801a      	strh	r2, [r3, #0]
		    position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
		    oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x70>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	801a      	strh	r2, [r3, #0]
		    angle = 0;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	801a      	strh	r2, [r3, #0]
		    pwmVal = 0;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_GPIO_EXTI_Callback+0x78>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
		    }
		else
			start = 0;
 	    }
}
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_EXTI_Callback+0x56>
			start = 0;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	200004e0 	.word	0x200004e0
 8000f70:	200004da 	.word	0x200004da
 8000f74:	20000504 	.word	0x20000504
 8000f78:	20000934 	.word	0x20000934
 8000f7c:	20000506 	.word	0x20000506
 8000f80:	200004e4 	.word	0x200004e4

08000f84 <MotorDrive_enable>:

void MotorDrive_enable(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	  //Enable PWM through TIM4-CH1/CH4 to drive the DC motor - Rev D board
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // on Motor drive A interface
 8000f88:	2108      	movs	r1, #8
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <MotorDrive_enable+0x28>)
 8000f8c:	f003 fad6 	bl	800453c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // on Motor drive A interface
 8000f90:	210c      	movs	r1, #12
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MotorDrive_enable+0x28>)
 8000f94:	f003 fad2 	bl	800453c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // on Motor drive D interface
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MotorDrive_enable+0x2c>)
 8000f9c:	f003 face 	bl	800453c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);  // on Motor drive D interface
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MotorDrive_enable+0x2c>)
 8000fa4:	f003 faca 	bl	800453c <HAL_TIM_PWM_Start>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000032c 	.word	0x2000032c
 8000fb0:	20000254 	.word	0x20000254

08000fb4 <Motor_stop>:


void Motor_stop(void) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
		//Set both IN1 and IN2 pins = '1'
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <Motor_stop+0x30>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Motor_stop+0x30>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <Motor_stop+0x34>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <Motor_stop+0x34>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2000032c 	.word	0x2000032c
 8000fe8:	20000254 	.word	0x20000254

08000fec <Motor_direction>:

void Motor_direction(uint8_t forward) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	if (forward){// move forward
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <Motor_direction+0x22>
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0); // set IN1 to maximum PWM (7199) for '1'
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Motor_direction+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,0); // set IN1 to maximum PWM (7199) for '1' for Drive D
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <Motor_direction+0x44>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2200      	movs	r2, #0
 800100a:	63da      	str	r2, [r3, #60]	; 0x3c
	  }
	else { // reverse
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1'
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1' for Drive D
	}
}
 800100c:	e007      	b.n	800101e <Motor_direction+0x32>
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1'
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <Motor_direction+0x40>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,0); // set IN2 to maximum PWM (7199) for '1' for Drive D
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <Motor_direction+0x44>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000032c 	.word	0x2000032c
 8001030:	20000254 	.word	0x20000254

08001034 <Motor_forward>:

void Motor_forward(int  pwmVal){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	 // rotate motor in clockwise forward send the values to serial port for display
	 Motor_direction(1); //forward
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ffd5 	bl	8000fec <Motor_direction>
	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pwmVal); // output PWM waveform to drive motor A
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <Motor_forward+0x3c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
	 __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,pwmVal); // output PWM waveform to drive motor D - for debugging
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <Motor_forward+0x40>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	641a      	str	r2, [r3, #64]	; 0x40

    sprintf(buf, "PWM = %4dF ", pwmVal);
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4908      	ldr	r1, [pc, #32]	; (8001078 <Motor_forward+0x44>)
 8001056:	4809      	ldr	r0, [pc, #36]	; (800107c <Motor_forward+0x48>)
 8001058:	f005 ffe8 	bl	800702c <siprintf>
    OLED_ShowString(0, 20, buf);
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <Motor_forward+0x48>)
 800105e:	2114      	movs	r1, #20
 8001060:	2000      	movs	r0, #0
 8001062:	f001 fa8f 	bl	8002584 <OLED_ShowString>
    //OLED_Refresh_Gram();
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000032c 	.word	0x2000032c
 8001074:	20000254 	.word	0x20000254
 8001078:	08009538 	.word	0x08009538
 800107c:	200004f0 	.word	0x200004f0

08001080 <Motor_reverse>:

void Motor_reverse(int  pwmVal){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	 // move robot forward send the values to serial port for display
	 Motor_direction(0); //reverse
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ffaf 	bl	8000fec <Motor_direction>
	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pwmVal); // output PWM waveform to drive motor A
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <Motor_reverse+0x3c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c
	 __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,pwmVal); // output PWM waveform to drive motor D - for debugging
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <Motor_reverse+0x40>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	63da      	str	r2, [r3, #60]	; 0x3c

    sprintf(buf, "PWM = %4dR ", pwmVal);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4908      	ldr	r1, [pc, #32]	; (80010c4 <Motor_reverse+0x44>)
 80010a2:	4809      	ldr	r0, [pc, #36]	; (80010c8 <Motor_reverse+0x48>)
 80010a4:	f005 ffc2 	bl	800702c <siprintf>
    OLED_ShowString(0, 20, buf);
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <Motor_reverse+0x48>)
 80010aa:	2114      	movs	r1, #20
 80010ac:	2000      	movs	r0, #0
 80010ae:	f001 fa69 	bl	8002584 <OLED_ShowString>
    //OLED_Refresh_Gram();
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000032c 	.word	0x2000032c
 80010c0:	20000254 	.word	0x20000254
 80010c4:	08009544 	.word	0x08009544
 80010c8:	200004f0 	.word	0x200004f0

080010cc <PID_Control>:


int16_t PID_Control(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	  //Control Loop
	  if (abs(error)>2){ //more than 2 degree difference
 80010d0:	4b95      	ldr	r3, [pc, #596]	; (8001328 <PID_Control+0x25c>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bfb8      	it	lt
 80010da:	425b      	neglt	r3, r3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	f240 811f 	bls.w	8001322 <PID_Control+0x256>
		  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer
    	  angle = (int)(position*360/265);  // supposed to be 260 ticks/rev, measured = 265
 80010e4:	4b91      	ldr	r3, [pc, #580]	; (800132c <PID_Control+0x260>)
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	4a8e      	ldr	r2, [pc, #568]	; (8001330 <PID_Control+0x264>)
 80010f6:	fb82 1203 	smull	r1, r2, r2, r3
 80010fa:	1192      	asrs	r2, r2, #6
 80010fc:	17db      	asrs	r3, r3, #31
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b8c      	ldr	r3, [pc, #560]	; (8001334 <PID_Control+0x268>)
 8001104:	801a      	strh	r2, [r3, #0]
  	      error = target_angle - angle;
 8001106:	4b8c      	ldr	r3, [pc, #560]	; (8001338 <PID_Control+0x26c>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <PID_Control+0x268>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	b29b      	uxth	r3, r3
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b82      	ldr	r3, [pc, #520]	; (8001328 <PID_Control+0x25c>)
 800111e:	801a      	strh	r2, [r3, #0]

  	    sprintf(buf, "error = %5d, ", (int)error);
 8001120:	4b81      	ldr	r3, [pc, #516]	; (8001328 <PID_Control+0x25c>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	461a      	mov	r2, r3
 8001128:	4984      	ldr	r1, [pc, #528]	; (800133c <PID_Control+0x270>)
 800112a:	4885      	ldr	r0, [pc, #532]	; (8001340 <PID_Control+0x274>)
 800112c:	f005 ff7e 	bl	800702c <siprintf>
  	    HAL_UART_Transmit(&huart2, buf, 14, HAL_MAX_DELAY); // Send through BT @9600
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	220e      	movs	r2, #14
 8001136:	4982      	ldr	r1, [pc, #520]	; (8001340 <PID_Control+0x274>)
 8001138:	4882      	ldr	r0, [pc, #520]	; (8001344 <PID_Control+0x278>)
 800113a:	f004 fb14 	bl	8005766 <HAL_UART_Transmit>
  	    sprintf(buf, " Kp = %5d, ", Kp);
 800113e:	4b82      	ldr	r3, [pc, #520]	; (8001348 <PID_Control+0x27c>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	461a      	mov	r2, r3
 8001146:	4981      	ldr	r1, [pc, #516]	; (800134c <PID_Control+0x280>)
 8001148:	487d      	ldr	r0, [pc, #500]	; (8001340 <PID_Control+0x274>)
 800114a:	f005 ff6f 	bl	800702c <siprintf>
  	   	HAL_UART_Transmit(&huart2, buf, 14, HAL_MAX_DELAY); // Send through BT @9600
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	220e      	movs	r2, #14
 8001154:	497a      	ldr	r1, [pc, #488]	; (8001340 <PID_Control+0x274>)
 8001156:	487b      	ldr	r0, [pc, #492]	; (8001344 <PID_Control+0x278>)
 8001158:	f004 fb05 	bl	8005766 <HAL_UART_Transmit>

        if (error > 0)
 800115c:	4b72      	ldr	r3, [pc, #456]	; (8001328 <PID_Control+0x25c>)
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd03      	ble.n	800116e <PID_Control+0xa2>
      	  direction = 0; //forward
 8001166:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <PID_Control+0x284>)
 8001168:	2200      	movs	r2, #0
 800116a:	801a      	strh	r2, [r3, #0]
 800116c:	e002      	b.n	8001174 <PID_Control+0xa8>
        else
      	  direction = 1; //reverse direction
 800116e:	4b78      	ldr	r3, [pc, #480]	; (8001350 <PID_Control+0x284>)
 8001170:	2201      	movs	r2, #1
 8001172:	801a      	strh	r2, [r3, #0]

        millisNow = HAL_GetTick();
 8001174:	f001 ff7a 	bl	800306c <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <PID_Control+0x288>)
 800117e:	601a      	str	r2, [r3, #0]
        dt = (millisNow - millisOld); // time elapsed in millisecond
 8001180:	4b74      	ldr	r3, [pc, #464]	; (8001354 <PID_Control+0x288>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b74      	ldr	r3, [pc, #464]	; (8001358 <PID_Control+0x28c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	4a74      	ldr	r2, [pc, #464]	; (800135c <PID_Control+0x290>)
 800118c:	6013      	str	r3, [r2, #0]
        millisOld = millisNow; // store the current time for next round
 800118e:	4b71      	ldr	r3, [pc, #452]	; (8001354 <PID_Control+0x288>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a71      	ldr	r2, [pc, #452]	; (8001358 <PID_Control+0x28c>)
 8001194:	6013      	str	r3, [r2, #0]

        error_area = error_area + error*dt; // area under error for Ki
 8001196:	4b64      	ldr	r3, [pc, #400]	; (8001328 <PID_Control+0x25c>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	461a      	mov	r2, r3
 800119e:	4b6f      	ldr	r3, [pc, #444]	; (800135c <PID_Control+0x290>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fb03 f202 	mul.w	r2, r3, r2
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <PID_Control+0x294>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a6c      	ldr	r2, [pc, #432]	; (8001360 <PID_Control+0x294>)
 80011ae:	6013      	str	r3, [r2, #0]

        error_change = error - error_old; // change in error
 80011b0:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <PID_Control+0x25c>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <PID_Control+0x298>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <PID_Control+0x29c>)
 80011c0:	6013      	str	r3, [r2, #0]
  	    error_old = error; //store the error for next round
 80011c2:	4b59      	ldr	r3, [pc, #356]	; (8001328 <PID_Control+0x25c>)
 80011c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <PID_Control+0x298>)
 80011cc:	601a      	str	r2, [r3, #0]
        error_rate = (error_change)*1000/dt; // for Kd - dt in millsecond
 80011ce:	4b66      	ldr	r3, [pc, #408]	; (8001368 <PID_Control+0x29c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d6:	fb03 f202 	mul.w	r2, r3, r2
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <PID_Control+0x290>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e2:	4a62      	ldr	r2, [pc, #392]	; (800136c <PID_Control+0x2a0>)
 80011e4:	6013      	str	r3, [r2, #0]

		pwmVal = (int)(error*Kp + error_area*Ki/10000);  // PI, D is below
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <PID_Control+0x25c>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b56      	ldr	r3, [pc, #344]	; (8001348 <PID_Control+0x27c>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	4b57      	ldr	r3, [pc, #348]	; (8001360 <PID_Control+0x294>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <PID_Control+0x2a4>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001216:	ed9f 6a57 	vldr	s12, [pc, #348]	; 8001374 <PID_Control+0x2a8>
 800121a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 2a90 	vmov	r2, s15
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <PID_Control+0x2ac>)
 800122c:	601a      	str	r2, [r3, #0]
		pwmVal_raw = (int)(error*Kp); // for debugging
 800122e:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <PID_Control+0x25c>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	461a      	mov	r2, r3
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <PID_Control+0x27c>)
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <PID_Control+0x2b0>)
 8001242:	6013      	str	r3, [r2, #0]


		// Adjust pwmVal to account for deadzone
		if (pwmVal>0)
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <PID_Control+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dd08      	ble.n	800125e <PID_Control+0x192>
			pwmVal = pwmVal+pwmMin;
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <PID_Control+0x2b4>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	461a      	mov	r2, r3
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <PID_Control+0x2ac>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4413      	add	r3, r2
 800125a:	4a47      	ldr	r2, [pc, #284]	; (8001378 <PID_Control+0x2ac>)
 800125c:	6013      	str	r3, [r2, #0]
		if (pwmVal<0)
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <PID_Control+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da07      	bge.n	8001276 <PID_Control+0x1aa>
			pwmVal = pwmVal-pwmMin;
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <PID_Control+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a45      	ldr	r2, [pc, #276]	; (8001380 <PID_Control+0x2b4>)
 800126c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	4a41      	ldr	r2, [pc, #260]	; (8001378 <PID_Control+0x2ac>)
 8001274:	6013      	str	r3, [r2, #0]

		if (pwmVal > pwmMax)  // Clamp the PWM to its maximum positive value
 8001276:	4b43      	ldr	r3, [pc, #268]	; (8001384 <PID_Control+0x2b8>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	461a      	mov	r2, r3
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <PID_Control+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	da05      	bge.n	8001292 <PID_Control+0x1c6>
		   pwmVal = pwmMax;
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <PID_Control+0x2b8>)
 8001288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128c:	461a      	mov	r2, r3
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <PID_Control+0x2ac>)
 8001290:	601a      	str	r2, [r3, #0]


		pwmVal = (int)(pwmVal + error_rate*Kd);  // + D which is subtration
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <PID_Control+0x2bc>)
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	461a      	mov	r2, r3
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <PID_Control+0x2a0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	fb03 f202 	mul.w	r2, r3, r2
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <PID_Control+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a33      	ldr	r2, [pc, #204]	; (8001378 <PID_Control+0x2ac>)
 80012aa:	6013      	str	r3, [r2, #0]

		if (pwmVal < -pwmMax)  // Clamp the PWM to its minimum negative value
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <PID_Control+0x2b8>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	425a      	negs	r2, r3
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <PID_Control+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dd05      	ble.n	80012c8 <PID_Control+0x1fc>
		   pwmVal = -pwmMax;
 80012bc:	4b31      	ldr	r3, [pc, #196]	; (8001384 <PID_Control+0x2b8>)
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	425b      	negs	r3, r3
 80012c4:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <PID_Control+0x2ac>)
 80012c6:	6013      	str	r3, [r2, #0]

		sprintf(buf, " Praw = %6d, ", pwmVal_raw);
 80012c8:	4b2c      	ldr	r3, [pc, #176]	; (800137c <PID_Control+0x2b0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	492f      	ldr	r1, [pc, #188]	; (800138c <PID_Control+0x2c0>)
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <PID_Control+0x274>)
 80012d2:	f005 feab 	bl	800702c <siprintf>
		HAL_UART_Transmit(&huart2, buf, 17, HAL_MAX_DELAY); // Send through BT @9600
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	2211      	movs	r2, #17
 80012dc:	4918      	ldr	r1, [pc, #96]	; (8001340 <PID_Control+0x274>)
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <PID_Control+0x278>)
 80012e0:	f004 fa41 	bl	8005766 <HAL_UART_Transmit>

		sprintf(buf, " Pwm = %6d ", pwmVal);
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <PID_Control+0x2ac>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4929      	ldr	r1, [pc, #164]	; (8001390 <PID_Control+0x2c4>)
 80012ec:	4814      	ldr	r0, [pc, #80]	; (8001340 <PID_Control+0x274>)
 80012ee:	f005 fe9d 	bl	800702c <siprintf>
		HAL_UART_Transmit(&huart2, buf, 17, HAL_MAX_DELAY); // Send through BT @9600
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	2211      	movs	r2, #17
 80012f8:	4911      	ldr	r1, [pc, #68]	; (8001340 <PID_Control+0x274>)
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <PID_Control+0x278>)
 80012fc:	f004 fa33 	bl	8005766 <HAL_UART_Transmit>

		buf[0] = '\r';
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <PID_Control+0x274>)
 8001302:	220d      	movs	r2, #13
 8001304:	701a      	strb	r2, [r3, #0]
		buf[1] = '\n';  // move to next line on serial port
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <PID_Control+0x274>)
 8001308:	220a      	movs	r2, #10
 800130a:	705a      	strb	r2, [r3, #1]
		HAL_UART_Transmit(&huart2, buf, 2, HAL_MAX_DELAY); // Send through USB port
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	2202      	movs	r2, #2
 8001312:	490b      	ldr	r1, [pc, #44]	; (8001340 <PID_Control+0x274>)
 8001314:	480b      	ldr	r0, [pc, #44]	; (8001344 <PID_Control+0x278>)
 8001316:	f004 fa26 	bl	8005766 <HAL_UART_Transmit>

		return(pwmVal);
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <PID_Control+0x2ac>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b21b      	sxth	r3, r3
 8001320:	e7ff      	b.n	8001322 <PID_Control+0x256>
	    } // if loop
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000050c 	.word	0x2000050c
 800132c:	20000504 	.word	0x20000504
 8001330:	3dd38ff1 	.word	0x3dd38ff1
 8001334:	20000506 	.word	0x20000506
 8001338:	20000508 	.word	0x20000508
 800133c:	08009550 	.word	0x08009550
 8001340:	200004f0 	.word	0x200004f0
 8001344:	2000044c 	.word	0x2000044c
 8001348:	2000052c 	.word	0x2000052c
 800134c:	08009560 	.word	0x08009560
 8001350:	2000050a 	.word	0x2000050a
 8001354:	20000524 	.word	0x20000524
 8001358:	20000520 	.word	0x20000520
 800135c:	20000528 	.word	0x20000528
 8001360:	20000510 	.word	0x20000510
 8001364:	20000514 	.word	0x20000514
 8001368:	20000518 	.word	0x20000518
 800136c:	2000051c 	.word	0x2000051c
 8001370:	20000530 	.word	0x20000530
 8001374:	461c4000 	.word	0x461c4000
 8001378:	200004e4 	.word	0x200004e4
 800137c:	200004e8 	.word	0x200004e8
 8001380:	20000004 	.word	0x20000004
 8001384:	20000002 	.word	0x20000002
 8001388:	2000052e 	.word	0x2000052e
 800138c:	0800956c 	.word	0x0800956c
 8001390:	0800957c 	.word	0x0800957c

08001394 <serial_uart>:

void serial_uart(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	 // send various values to serial port @ usart 3 for display
		  angle = (int)(position*360/265); //Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulses per revolution
 8001398:	4b75      	ldr	r3, [pc, #468]	; (8001570 <serial_uart+0x1dc>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	461a      	mov	r2, r3
 80013a0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	4a72      	ldr	r2, [pc, #456]	; (8001574 <serial_uart+0x1e0>)
 80013aa:	fb82 1203 	smull	r1, r2, r2, r3
 80013ae:	1192      	asrs	r2, r2, #6
 80013b0:	17db      	asrs	r3, r3, #31
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	4b70      	ldr	r3, [pc, #448]	; (8001578 <serial_uart+0x1e4>)
 80013b8:	801a      	strh	r2, [r3, #0]
		                                   // measured value = 265 pulses per revolution
		  sprintf(buf, "%5d", angle);
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <serial_uart+0x1e4>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	496e      	ldr	r1, [pc, #440]	; (800157c <serial_uart+0x1e8>)
 80013c4:	486e      	ldr	r0, [pc, #440]	; (8001580 <serial_uart+0x1ec>)
 80013c6:	f005 fe31 	bl	800702c <siprintf>
	      OLED_ShowString(60, 10, buf);
 80013ca:	4a6d      	ldr	r2, [pc, #436]	; (8001580 <serial_uart+0x1ec>)
 80013cc:	210a      	movs	r1, #10
 80013ce:	203c      	movs	r0, #60	; 0x3c
 80013d0:	f001 f8d8 	bl	8002584 <OLED_ShowString>
	      //also send to serial port
	      HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	2205      	movs	r2, #5
 80013da:	4969      	ldr	r1, [pc, #420]	; (8001580 <serial_uart+0x1ec>)
 80013dc:	4869      	ldr	r0, [pc, #420]	; (8001584 <serial_uart+0x1f0>)
 80013de:	f004 f9c2 	bl	8005766 <HAL_UART_Transmit>

	      buf[0]=',';  // comma separator
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <serial_uart+0x1ec>)
 80013e4:	222c      	movs	r2, #44	; 0x2c
 80013e6:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	2201      	movs	r2, #1
 80013ee:	4964      	ldr	r1, [pc, #400]	; (8001580 <serial_uart+0x1ec>)
 80013f0:	4864      	ldr	r0, [pc, #400]	; (8001584 <serial_uart+0x1f0>)
 80013f2:	f004 f9b8 	bl	8005766 <HAL_UART_Transmit>

	      sprintf(buf, "%5d", target_angle);
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <serial_uart+0x1f4>)
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	461a      	mov	r2, r3
 80013fe:	495f      	ldr	r1, [pc, #380]	; (800157c <serial_uart+0x1e8>)
 8001400:	485f      	ldr	r0, [pc, #380]	; (8001580 <serial_uart+0x1ec>)
 8001402:	f005 fe13 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2205      	movs	r2, #5
 800140c:	495c      	ldr	r1, [pc, #368]	; (8001580 <serial_uart+0x1ec>)
 800140e:	485d      	ldr	r0, [pc, #372]	; (8001584 <serial_uart+0x1f0>)
 8001410:	f004 f9a9 	bl	8005766 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <serial_uart+0x1ec>)
 8001416:	222c      	movs	r2, #44	; 0x2c
 8001418:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	2201      	movs	r2, #1
 8001420:	4957      	ldr	r1, [pc, #348]	; (8001580 <serial_uart+0x1ec>)
 8001422:	4858      	ldr	r0, [pc, #352]	; (8001584 <serial_uart+0x1f0>)
 8001424:	f004 f99f 	bl	8005766 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error);
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <serial_uart+0x1f8>)
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	461a      	mov	r2, r3
 8001430:	4952      	ldr	r1, [pc, #328]	; (800157c <serial_uart+0x1e8>)
 8001432:	4853      	ldr	r0, [pc, #332]	; (8001580 <serial_uart+0x1ec>)
 8001434:	f005 fdfa 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001438:	f04f 33ff 	mov.w	r3, #4294967295
 800143c:	2205      	movs	r2, #5
 800143e:	4950      	ldr	r1, [pc, #320]	; (8001580 <serial_uart+0x1ec>)
 8001440:	4850      	ldr	r0, [pc, #320]	; (8001584 <serial_uart+0x1f0>)
 8001442:	f004 f990 	bl	8005766 <HAL_UART_Transmit>

	   	  buf[0]=',';
 8001446:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <serial_uart+0x1ec>)
 8001448:	222c      	movs	r2, #44	; 0x2c
 800144a:	701a      	strb	r2, [r3, #0]
	      HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	2201      	movs	r2, #1
 8001452:	494b      	ldr	r1, [pc, #300]	; (8001580 <serial_uart+0x1ec>)
 8001454:	484b      	ldr	r0, [pc, #300]	; (8001584 <serial_uart+0x1f0>)
 8001456:	f004 f986 	bl	8005766 <HAL_UART_Transmit>

	      sprintf(buf, "%5d", pwmVal);
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <serial_uart+0x1fc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	4946      	ldr	r1, [pc, #280]	; (800157c <serial_uart+0x1e8>)
 8001462:	4847      	ldr	r0, [pc, #284]	; (8001580 <serial_uart+0x1ec>)
 8001464:	f005 fde2 	bl	800702c <siprintf>
	      HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	2205      	movs	r2, #5
 800146e:	4944      	ldr	r1, [pc, #272]	; (8001580 <serial_uart+0x1ec>)
 8001470:	4844      	ldr	r0, [pc, #272]	; (8001584 <serial_uart+0x1f0>)
 8001472:	f004 f978 	bl	8005766 <HAL_UART_Transmit>
	      OLED_ShowString(40, 20, buf);
 8001476:	4a42      	ldr	r2, [pc, #264]	; (8001580 <serial_uart+0x1ec>)
 8001478:	2114      	movs	r1, #20
 800147a:	2028      	movs	r0, #40	; 0x28
 800147c:	f001 f882 	bl	8002584 <OLED_ShowString>

	   	  buf[0]=',';
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <serial_uart+0x1ec>)
 8001482:	222c      	movs	r2, #44	; 0x2c
 8001484:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2201      	movs	r2, #1
 800148c:	493c      	ldr	r1, [pc, #240]	; (8001580 <serial_uart+0x1ec>)
 800148e:	483d      	ldr	r0, [pc, #244]	; (8001584 <serial_uart+0x1f0>)
 8001490:	f004 f969 	bl	8005766 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_area);
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <serial_uart+0x200>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4938      	ldr	r1, [pc, #224]	; (800157c <serial_uart+0x1e8>)
 800149c:	4838      	ldr	r0, [pc, #224]	; (8001580 <serial_uart+0x1ec>)
 800149e:	f005 fdc5 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	2205      	movs	r2, #5
 80014a8:	4935      	ldr	r1, [pc, #212]	; (8001580 <serial_uart+0x1ec>)
 80014aa:	4836      	ldr	r0, [pc, #216]	; (8001584 <serial_uart+0x1f0>)
 80014ac:	f004 f95b 	bl	8005766 <HAL_UART_Transmit>

	   	  buf[0]=',';
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <serial_uart+0x1ec>)
 80014b2:	222c      	movs	r2, #44	; 0x2c
 80014b4:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2201      	movs	r2, #1
 80014bc:	4930      	ldr	r1, [pc, #192]	; (8001580 <serial_uart+0x1ec>)
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <serial_uart+0x1f0>)
 80014c0:	f004 f951 	bl	8005766 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_change);
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <serial_uart+0x204>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	492c      	ldr	r1, [pc, #176]	; (800157c <serial_uart+0x1e8>)
 80014cc:	482c      	ldr	r0, [pc, #176]	; (8001580 <serial_uart+0x1ec>)
 80014ce:	f005 fdad 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	2205      	movs	r2, #5
 80014d8:	4929      	ldr	r1, [pc, #164]	; (8001580 <serial_uart+0x1ec>)
 80014da:	482a      	ldr	r0, [pc, #168]	; (8001584 <serial_uart+0x1f0>)
 80014dc:	f004 f943 	bl	8005766 <HAL_UART_Transmit>

	   	  buf[0]=',';
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <serial_uart+0x1ec>)
 80014e2:	222c      	movs	r2, #44	; 0x2c
 80014e4:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2201      	movs	r2, #1
 80014ec:	4924      	ldr	r1, [pc, #144]	; (8001580 <serial_uart+0x1ec>)
 80014ee:	4825      	ldr	r0, [pc, #148]	; (8001584 <serial_uart+0x1f0>)
 80014f0:	f004 f939 	bl	8005766 <HAL_UART_Transmit>

	   	  sprintf(buf, "%5d", error_rate);
 80014f4:	4b29      	ldr	r3, [pc, #164]	; (800159c <serial_uart+0x208>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4920      	ldr	r1, [pc, #128]	; (800157c <serial_uart+0x1e8>)
 80014fc:	4820      	ldr	r0, [pc, #128]	; (8001580 <serial_uart+0x1ec>)
 80014fe:	f005 fd95 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	2205      	movs	r2, #5
 8001508:	491d      	ldr	r1, [pc, #116]	; (8001580 <serial_uart+0x1ec>)
 800150a:	481e      	ldr	r0, [pc, #120]	; (8001584 <serial_uart+0x1f0>)
 800150c:	f004 f92b 	bl	8005766 <HAL_UART_Transmit>

	      buf[0]=',';
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <serial_uart+0x1ec>)
 8001512:	222c      	movs	r2, #44	; 0x2c
 8001514:	701a      	strb	r2, [r3, #0]
	   	  HAL_UART_Transmit(&huart3, buf, 1, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	2201      	movs	r2, #1
 800151c:	4918      	ldr	r1, [pc, #96]	; (8001580 <serial_uart+0x1ec>)
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <serial_uart+0x1f0>)
 8001520:	f004 f921 	bl	8005766 <HAL_UART_Transmit>

	  	  sprintf(buf, "%4d ", speed);  // RPM speed of the DC motor
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <serial_uart+0x20c>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	461a      	mov	r2, r3
 800152c:	491d      	ldr	r1, [pc, #116]	; (80015a4 <serial_uart+0x210>)
 800152e:	4814      	ldr	r0, [pc, #80]	; (8001580 <serial_uart+0x1ec>)
 8001530:	f005 fd7c 	bl	800702c <siprintf>
	   	  HAL_UART_Transmit(&huart3, buf, 5, HAL_MAX_DELAY); // Send to Uart3 USB port
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	2205      	movs	r2, #5
 800153a:	4911      	ldr	r1, [pc, #68]	; (8001580 <serial_uart+0x1ec>)
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <serial_uart+0x1f0>)
 800153e:	f004 f912 	bl	8005766 <HAL_UART_Transmit>
	  	  OLED_ShowString(40, 30, buf);
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <serial_uart+0x1ec>)
 8001544:	211e      	movs	r1, #30
 8001546:	2028      	movs	r0, #40	; 0x28
 8001548:	f001 f81c 	bl	8002584 <OLED_ShowString>
	      OLED_Refresh_Gram();
 800154c:	f000 fef0 	bl	8002330 <OLED_Refresh_Gram>

	   	  buf[0] = '\r';
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <serial_uart+0x1ec>)
 8001552:	220d      	movs	r2, #13
 8001554:	701a      	strb	r2, [r3, #0]
	   	  buf[1] = '\n';  // move to next line on serial port
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <serial_uart+0x1ec>)
 8001558:	220a      	movs	r2, #10
 800155a:	705a      	strb	r2, [r3, #1]
	   	  HAL_UART_Transmit(&huart3, buf, 2, HAL_MAX_DELAY); // Send through USB port
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2202      	movs	r2, #2
 8001562:	4907      	ldr	r1, [pc, #28]	; (8001580 <serial_uart+0x1ec>)
 8001564:	4807      	ldr	r0, [pc, #28]	; (8001584 <serial_uart+0x1f0>)
 8001566:	f004 f8fe 	bl	8005766 <HAL_UART_Transmit>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000504 	.word	0x20000504
 8001574:	3dd38ff1 	.word	0x3dd38ff1
 8001578:	20000506 	.word	0x20000506
 800157c:	08009588 	.word	0x08009588
 8001580:	200004f0 	.word	0x200004f0
 8001584:	20000490 	.word	0x20000490
 8001588:	20000508 	.word	0x20000508
 800158c:	2000050c 	.word	0x2000050c
 8001590:	200004e4 	.word	0x200004e4
 8001594:	20000510 	.word	0x20000510
 8001598:	20000518 	.word	0x20000518
 800159c:	2000051c 	.word	0x2000051c
 80015a0:	200004da 	.word	0x200004da
 80015a4:	0800958c 	.word	0x0800958c

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f001 fcf7 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f9cb 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fdb5 	bl	8002124 <MX_GPIO_Init>
  MX_TIM8_Init();
 80015ba:	f000 fcc5 	bl	8001f48 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015be:	f000 fb21 	bl	8001c04 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015c2:	f000 fd5b 	bl	800207c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015c6:	f000 fa57 	bl	8001a78 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80015ca:	f000 fd81 	bl	80020d0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80015ce:	f000 fa25 	bl	8001a1c <MX_I2C2_Init>
  MX_TIM5_Init();
 80015d2:	f000 fc65 	bl	8001ea0 <MX_TIM5_Init>
  MX_TIM4_Init();
 80015d6:	f000 fbe1 	bl	8001d9c <MX_TIM4_Init>
  MX_TIM3_Init();
 80015da:	f000 fb67 	bl	8001cac <MX_TIM3_Init>
  MX_TIM11_Init();
 80015de:	f000 fd03 	bl	8001fe8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */


  MotorDrive_enable(); // enable PWM needed to drive MotroDrive A and D
 80015e2:	f7ff fccf 	bl	8000f84 <MotorDrive_enable>

  // start TIM2/TIM5-Encoder to read Motor rotation in interrupt mode
  // Hall sensors produce 13 ticks/counts per turn, gear ratio = 20
  // 260 count per rotation of output (wheel)
  // 360 degree = 260 ticks/counts
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Motor Drive A
 80015e6:	213c      	movs	r1, #60	; 0x3c
 80015e8:	48b3      	ldr	r0, [pc, #716]	; (80018b8 <main+0x310>)
 80015ea:	f003 f915 	bl	8004818 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL); // Motor Drive D
 80015ee:	213c      	movs	r1, #60	; 0x3c
 80015f0:	48b2      	ldr	r0, [pc, #712]	; (80018bc <main+0x314>)
 80015f2:	f003 f911 	bl	8004818 <HAL_TIM_Encoder_Start_IT>
  rpm = (int)((1000/no_of_tick) * 60/260 * 1/dt);  // For calculating motor rpm - by multiplying it with speed value
 80015f6:	4bb2      	ldr	r3, [pc, #712]	; (80018c0 <main+0x318>)
 80015f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fc:	461a      	mov	r2, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fb93 f2f2 	sdiv	r2, r3, r2
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4aad      	ldr	r2, [pc, #692]	; (80018c4 <main+0x31c>)
 8001610:	fb82 1203 	smull	r1, r2, r2, r3
 8001614:	11d2      	asrs	r2, r2, #7
 8001616:	17db      	asrs	r3, r3, #31
 8001618:	1ad2      	subs	r2, r2, r3
 800161a:	4bab      	ldr	r3, [pc, #684]	; (80018c8 <main+0x320>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	4ba9      	ldr	r3, [pc, #676]	; (80018cc <main+0x324>)
 8001626:	801a      	strh	r2, [r3, #0]

  OLED_Init();
 8001628:	f000 ffde 	bl	80025e8 <OLED_Init>
  OLED_ShowString(10, 5, "SC2104/CE3002"); // show message on OLED display at line 5)
 800162c:	4aa8      	ldr	r2, [pc, #672]	; (80018d0 <main+0x328>)
 800162e:	2105      	movs	r1, #5
 8001630:	200a      	movs	r0, #10
 8001632:	f000 ffa7 	bl	8002584 <OLED_ShowString>
  OLED_ShowString(40, 30, "Lab 4"); // show message on OLED display at line 30)
 8001636:	4aa7      	ldr	r2, [pc, #668]	; (80018d4 <main+0x32c>)
 8001638:	211e      	movs	r1, #30
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f000 ffa2 	bl	8002584 <OLED_ShowString>
  oled_buf = "Motor Control"; // anther way to show message through buffer
 8001640:	4ba5      	ldr	r3, [pc, #660]	; (80018d8 <main+0x330>)
 8001642:	613b      	str	r3, [r7, #16]
  OLED_ShowString(10,50, oled_buf); //another message at line 50
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	2132      	movs	r1, #50	; 0x32
 8001648:	200a      	movs	r0, #10
 800164a:	f000 ff9b 	bl	8002584 <OLED_ShowString>

  uint8_t sbuf[] = "SC2104\n\r";  // send to serial port
 800164e:	4aa3      	ldr	r2, [pc, #652]	; (80018dc <main+0x334>)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	ca07      	ldmia	r2, {r0, r1, r2}
 8001654:	c303      	stmia	r3!, {r0, r1}
 8001656:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart3, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through Serial Port @115200
 8001658:	1d39      	adds	r1, r7, #4
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	2209      	movs	r2, #9
 8001660:	489f      	ldr	r0, [pc, #636]	; (80018e0 <main+0x338>)
 8001662:	f004 f880 	bl	8005766 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, sbuf, sizeof(sbuf), HAL_MAX_DELAY); // Send through BT @9600
 8001666:	1d39      	adds	r1, r7, #4
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2209      	movs	r2, #9
 800166e:	489d      	ldr	r0, [pc, #628]	; (80018e4 <main+0x33c>)
 8001670:	f004 f879 	bl	8005766 <HAL_UART_Transmit>

  OLED_Refresh_Gram();
 8001674:	f000 fe5c 	bl	8002330 <OLED_Refresh_Gram>
  HAL_Delay(3000); // pause for 3 second to show message
 8001678:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800167c:	f001 fd02 	bl	8003084 <HAL_Delay>
  OLED_Clear(); // get display ready
 8001680:	f000 fe8e 	bl	80023a0 <OLED_Clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  start = 0;
 8001684:	4b98      	ldr	r3, [pc, #608]	; (80018e8 <main+0x340>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  angle = 0;
 800168a:	4b98      	ldr	r3, [pc, #608]	; (80018ec <main+0x344>)
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
  target_angle = 1000; // rotate 1000 degree
 8001690:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <main+0x348>)
 8001692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001696:	801a      	strh	r2, [r3, #0]
  error = target_angle - angle;
 8001698:	4b95      	ldr	r3, [pc, #596]	; (80018f0 <main+0x348>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <main+0x344>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <main+0x34c>)
 80016b0:	801a      	strh	r2, [r3, #0]
  error_old = 0;
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <main+0x350>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
  error_area = 0;
 80016b8:	4b90      	ldr	r3, [pc, #576]	; (80018fc <main+0x354>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

  // motor drive here
  OLED_Clear();
 80016be:	f000 fe6f 	bl	80023a0 <OLED_Clear>
  OLED_ShowString(0, 0, "Target: ");
 80016c2:	4a8f      	ldr	r2, [pc, #572]	; (8001900 <main+0x358>)
 80016c4:	2100      	movs	r1, #0
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 ff5c 	bl	8002584 <OLED_ShowString>
  OLED_ShowString(0, 10, "Rotated: ");
 80016cc:	4a8d      	ldr	r2, [pc, #564]	; (8001904 <main+0x35c>)
 80016ce:	210a      	movs	r1, #10
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 ff57 	bl	8002584 <OLED_ShowString>
  OLED_ShowString(0, 30, "RPM = ");
 80016d6:	4a8c      	ldr	r2, [pc, #560]	; (8001908 <main+0x360>)
 80016d8:	211e      	movs	r1, #30
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 ff52 	bl	8002584 <OLED_ShowString>
  sprintf(buf, "%4d", target_angle);//Hall Sensor = 26 poles/13 pulses, DC motor = 20x13 = 260 pulse per revolution
 80016e0:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <main+0x348>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	461a      	mov	r2, r3
 80016e8:	4988      	ldr	r1, [pc, #544]	; (800190c <main+0x364>)
 80016ea:	4889      	ldr	r0, [pc, #548]	; (8001910 <main+0x368>)
 80016ec:	f005 fc9e 	bl	800702c <siprintf>
  OLED_ShowString(60, 0, buf);
 80016f0:	4a87      	ldr	r2, [pc, #540]	; (8001910 <main+0x368>)
 80016f2:	2100      	movs	r1, #0
 80016f4:	203c      	movs	r0, #60	; 0x3c
 80016f6:	f000 ff45 	bl	8002584 <OLED_ShowString>

  OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 80016fa:	4a86      	ldr	r2, [pc, #536]	; (8001914 <main+0x36c>)
 80016fc:	2128      	movs	r1, #40	; 0x28
 80016fe:	200f      	movs	r0, #15
 8001700:	f000 ff40 	bl	8002584 <OLED_ShowString>
  OLED_ShowString(0, 50, "button to stop"); // show message on OLED display at line 50)
 8001704:	4a84      	ldr	r2, [pc, #528]	; (8001918 <main+0x370>)
 8001706:	2132      	movs	r1, #50	; 0x32
 8001708:	2000      	movs	r0, #0
 800170a:	f000 ff3b 	bl	8002584 <OLED_ShowString>
  OLED_Refresh_Gram();
 800170e:	f000 fe0f 	bl	8002330 <OLED_Refresh_Gram>

  Kp = 7;   // range: 1 to 10
 8001712:	4b82      	ldr	r3, [pc, #520]	; (800191c <main+0x374>)
 8001714:	2207      	movs	r2, #7
 8001716:	801a      	strh	r2, [r3, #0]
  Ki = 2;   // range 0 to 3
 8001718:	4b81      	ldr	r3, [pc, #516]	; (8001920 <main+0x378>)
 800171a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800171e:	601a      	str	r2, [r3, #0]
  Kd = 1;   // range: 0 to 3
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <main+0x37c>)
 8001722:	2201      	movs	r2, #1
 8001724:	801a      	strh	r2, [r3, #0]

  if (target_angle > 0)  // Determine rotation direction)
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <main+0x348>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dd03      	ble.n	8001738 <main+0x190>
     direction = 0;
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <main+0x380>)
 8001732:	2200      	movs	r2, #0
 8001734:	801a      	strh	r2, [r3, #0]
 8001736:	e002      	b.n	800173e <main+0x196>
  else
	 direction = 1;
 8001738:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <main+0x380>)
 800173a:	2201      	movs	r2, #1
 800173c:	801a      	strh	r2, [r3, #0]

  start = 1; // do a step response upon reset and power up
 800173e:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <main+0x340>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  MotorDrive_enable(); // enable PWM needed to drive MotroDrive A and D
 8001744:	f7ff fc1e 	bl	8000f84 <MotorDrive_enable>
  millisOld = HAL_GetTick(); // get time value before starting - for PID
 8001748:	f001 fc90 	bl	800306c <HAL_GetTick>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	4b76      	ldr	r3, [pc, #472]	; (800192c <main+0x384>)
 8001752:	601a      	str	r2, [r3, #0]



  while (1){
  	  if (start==0){ // reset and wait for the User PB to be pressed
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <main+0x340>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d136      	bne.n	80017ca <main+0x222>
  		  Motor_stop();
 800175c:	f7ff fc2a 	bl	8000fb4 <Motor_stop>
      	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
 8001760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001764:	4872      	ldr	r0, [pc, #456]	; (8001930 <main+0x388>)
 8001766:	f002 f80a 	bl	800377e <HAL_GPIO_TogglePin>
      	  OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 800176a:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <main+0x36c>)
 800176c:	2128      	movs	r1, #40	; 0x28
 800176e:	200f      	movs	r0, #15
 8001770:	f000 ff08 	bl	8002584 <OLED_ShowString>
      	  OLED_ShowString(0, 50, "button to start"); // show message on OLED display at line 50)
 8001774:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <main+0x38c>)
 8001776:	2132      	movs	r1, #50	; 0x32
 8001778:	2000      	movs	r0, #0
 800177a:	f000 ff03 	bl	8002584 <OLED_ShowString>
      	  OLED_Refresh_Gram();
 800177e:	f000 fdd7 	bl	8002330 <OLED_Refresh_Gram>
      	  err = 0;// for checking whether error has settle down near to zero
 8001782:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <main+0x390>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
      	  angle = 0;
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <main+0x344>)
 800178a:	2200      	movs	r2, #0
 800178c:	801a      	strh	r2, [r3, #0]
      	  error_old = 0;
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <main+0x350>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
      	  error_area = 0;
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <main+0x354>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
      	  error = target_angle - angle;
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <main+0x348>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b52      	ldr	r3, [pc, #328]	; (80018ec <main+0x344>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <main+0x34c>)
 80017b2:	801a      	strh	r2, [r3, #0]
  	      }
  	  while (start==0){ //wait for the User PB to be pressed
 80017b4:	e009      	b.n	80017ca <main+0x222>
      	  HAL_Delay(500);
 80017b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017ba:	f001 fc63 	bl	8003084 <HAL_Delay>
      	  millisOld = HAL_GetTick(); // get time value before starting - for PID
 80017be:	f001 fc55 	bl	800306c <HAL_GetTick>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b59      	ldr	r3, [pc, #356]	; (800192c <main+0x384>)
 80017c8:	601a      	str	r2, [r3, #0]
  	  while (start==0){ //wait for the User PB to be pressed
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <main+0x340>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f1      	beq.n	80017b6 <main+0x20e>
  		  }

  	  pwmVal = PID_Control(); // call the PID control loop calculation
 80017d2:	f7ff fc7b 	bl	80010cc <PID_Control>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b58      	ldr	r3, [pc, #352]	; (800193c <main+0x394>)
 80017dc:	601a      	str	r2, [r3, #0]
  	  //pwmVal =500;          // this will overwrite PID control above
  	  //error = 5;              // to overwrite control loop checking

  	  if (direction == 0)
 80017de:	4b52      	ldr	r3, [pc, #328]	; (8001928 <main+0x380>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <main+0x24c>
  		  Motor_reverse(pwmVal);
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <main+0x394>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fc47 	bl	8001080 <Motor_reverse>
 80017f2:	e004      	b.n	80017fe <main+0x256>
  	  else
  		  Motor_forward(pwmVal);
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <main+0x394>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fc1b 	bl	8001034 <Motor_forward>

  	  if (abs(error) <= 3){ // error is not more than 3 deg - assume steady state
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <main+0x34c>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	2b00      	cmp	r3, #0
 8001806:	bfb8      	it	lt
 8001808:	425b      	neglt	r3, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d822      	bhi.n	8001856 <main+0x2ae>
  	      err++; // to keep track how long it has reached steady state
 8001810:	4b49      	ldr	r3, [pc, #292]	; (8001938 <main+0x390>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a48      	ldr	r2, [pc, #288]	; (8001938 <main+0x390>)
 8001818:	6013      	str	r3, [r2, #0]
  	      angle = (int)(position*360/260);  //calculate the angle
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <main+0x398>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	461a      	mov	r2, r3
 8001822:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <main+0x31c>)
 800182c:	fb82 1203 	smull	r1, r2, r2, r3
 8001830:	11d2      	asrs	r2, r2, #7
 8001832:	17db      	asrs	r3, r3, #31
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b21a      	sxth	r2, r3
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <main+0x344>)
 800183a:	801a      	strh	r2, [r3, #0]
  	      error = target_angle - angle; // calculate the error
 800183c:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <main+0x348>)
 800183e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <main+0x344>)
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	b29b      	uxth	r3, r3
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	b29b      	uxth	r3, r3
 8001850:	b21a      	sxth	r2, r3
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <main+0x34c>)
 8001854:	801a      	strh	r2, [r3, #0]
  	      }

  	  serial_uart(); // send the various data to the serial port for display
 8001856:	f7ff fd9d 	bl	8001394 <serial_uart>

      if (err > 5) { // error has settled to within the acceptance ranges
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <main+0x390>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b05      	cmp	r3, #5
 8001860:	dd1d      	ble.n	800189e <main+0x2f6>
         Motor_stop();
 8001862:	f7ff fba7 	bl	8000fb4 <Motor_stop>

         for (i=0; i<50; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
 800186a:	e004      	b.n	8001876 <main+0x2ce>
     	    serial_uart();
 800186c:	f7ff fd92 	bl	8001394 <serial_uart>
         for (i=0; i<50; i++)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	3301      	adds	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b31      	cmp	r3, #49	; 0x31
 800187a:	d9f7      	bls.n	800186c <main+0x2c4>

     	 start = 0;  // wait for PB to restart
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <main+0x340>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 8001882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001886:	482f      	ldr	r0, [pc, #188]	; (8001944 <main+0x39c>)
 8001888:	f001 ff79 	bl	800377e <HAL_GPIO_TogglePin>
     	 HAL_Delay(500);
 800188c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001890:	f001 fbf8 	bl	8003084 <HAL_Delay>
  		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 8001894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001898:	482a      	ldr	r0, [pc, #168]	; (8001944 <main+0x39c>)
 800189a:	f001 ff70 	bl	800377e <HAL_GPIO_TogglePin>
         }//if

      OLED_ShowString(15, 40, "Press User"); // show message on OLED display at line 40)
 800189e:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <main+0x36c>)
 80018a0:	2128      	movs	r1, #40	; 0x28
 80018a2:	200f      	movs	r0, #15
 80018a4:	f000 fe6e 	bl	8002584 <OLED_ShowString>
      OLED_ShowString(0, 50, "button to stop "); // show message on OLED display at line 50)
 80018a8:	4a27      	ldr	r2, [pc, #156]	; (8001948 <main+0x3a0>)
 80018aa:	2132      	movs	r1, #50	; 0x32
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 fe69 	bl	8002584 <OLED_ShowString>
      OLED_Refresh_Gram();
 80018b2:	f000 fd3d 	bl	8002330 <OLED_Refresh_Gram>
  	  if (start==0){ // reset and wait for the User PB to be pressed
 80018b6:	e74d      	b.n	8001754 <main+0x1ac>
 80018b8:	2000029c 	.word	0x2000029c
 80018bc:	20000374 	.word	0x20000374
 80018c0:	20000000 	.word	0x20000000
 80018c4:	7e07e07f 	.word	0x7e07e07f
 80018c8:	20000528 	.word	0x20000528
 80018cc:	200004dc 	.word	0x200004dc
 80018d0:	08009594 	.word	0x08009594
 80018d4:	080095a4 	.word	0x080095a4
 80018d8:	080095ac 	.word	0x080095ac
 80018dc:	0800961c 	.word	0x0800961c
 80018e0:	20000490 	.word	0x20000490
 80018e4:	2000044c 	.word	0x2000044c
 80018e8:	200004e0 	.word	0x200004e0
 80018ec:	20000506 	.word	0x20000506
 80018f0:	20000508 	.word	0x20000508
 80018f4:	2000050c 	.word	0x2000050c
 80018f8:	20000514 	.word	0x20000514
 80018fc:	20000510 	.word	0x20000510
 8001900:	080095bc 	.word	0x080095bc
 8001904:	080095c8 	.word	0x080095c8
 8001908:	080095d4 	.word	0x080095d4
 800190c:	080095dc 	.word	0x080095dc
 8001910:	200004f0 	.word	0x200004f0
 8001914:	080095e0 	.word	0x080095e0
 8001918:	080095ec 	.word	0x080095ec
 800191c:	2000052c 	.word	0x2000052c
 8001920:	20000530 	.word	0x20000530
 8001924:	2000052e 	.word	0x2000052e
 8001928:	2000050a 	.word	0x2000050a
 800192c:	20000520 	.word	0x20000520
 8001930:	40021000 	.word	0x40021000
 8001934:	080095fc 	.word	0x080095fc
 8001938:	200004ec 	.word	0x200004ec
 800193c:	200004e4 	.word	0x200004e4
 8001940:	20000504 	.word	0x20000504
 8001944:	40020400 	.word	0x40020400
 8001948:	0800960c 	.word	0x0800960c

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b094      	sub	sp, #80	; 0x50
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	f107 0320 	add.w	r3, r7, #32
 8001956:	2230      	movs	r2, #48	; 0x30
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f004 fef4 	bl	8006748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <SystemClock_Config+0xc8>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a26      	ldr	r2, [pc, #152]	; (8001a14 <SystemClock_Config+0xc8>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <SystemClock_Config+0xc8>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <SystemClock_Config+0xcc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a20      	ldr	r2, [pc, #128]	; (8001a18 <SystemClock_Config+0xcc>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <SystemClock_Config+0xcc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b2:	2302      	movs	r3, #2
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019bc:	2304      	movs	r3, #4
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019c0:	2348      	movs	r3, #72	; 0x48
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019c8:	2304      	movs	r3, #4
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 f873 	bl	8003abc <HAL_RCC_OscConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019dc:	f000 fc54 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e0:	230f      	movs	r3, #15
 80019e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2102      	movs	r1, #2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fad5 	bl	8003fac <HAL_RCC_ClockConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a08:	f000 fc3e 	bl	8002288 <Error_Handler>
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3750      	adds	r7, #80	; 0x50
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40007000 	.word	0x40007000

08001a1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a22:	4a13      	ldr	r2, [pc, #76]	; (8001a70 <MX_I2C2_Init+0x54>)
 8001a24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_I2C2_Init+0x58>)
 8001a2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a58:	4804      	ldr	r0, [pc, #16]	; (8001a6c <MX_I2C2_Init+0x50>)
 8001a5a:	f001 fec3 	bl	80037e4 <HAL_I2C_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a64:	f000 fc10 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000200 	.word	0x20000200
 8001a70:	40005800 	.word	0x40005800
 8001a74:	000186a0 	.word	0x000186a0

08001a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b096      	sub	sp, #88	; 0x58
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	2220      	movs	r2, #32
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f004 fe49 	bl	8006748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <MX_TIM1_Init+0x188>)
 8001aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001ac8:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001aca:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad6:	4b49      	ldr	r3, [pc, #292]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ae2:	4846      	ldr	r0, [pc, #280]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001ae4:	f002 fc82 	bl	80043ec <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001aee:	f000 fbcb 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001afc:	4619      	mov	r1, r3
 8001afe:	483f      	ldr	r0, [pc, #252]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b00:	f003 f902 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b0a:	f000 fbbd 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b0e:	483b      	ldr	r0, [pc, #236]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b10:	f002 fcbb 	bl	800448a <HAL_TIM_PWM_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b1a:	f000 fbb5 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4833      	ldr	r0, [pc, #204]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b2e:	f003 fceb 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b38:	f000 fba6 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3c:	2360      	movs	r3, #96	; 0x60
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4826      	ldr	r0, [pc, #152]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b62:	f003 f80f 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b6c:	f000 fb8c 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	2204      	movs	r2, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4820      	ldr	r0, [pc, #128]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b7a:	f003 f803 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b84:	f000 fb80 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2208      	movs	r2, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	4819      	ldr	r0, [pc, #100]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001b96:	f002 fff5 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001ba0:	f000 fb72 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	4813      	ldr	r0, [pc, #76]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001bae:	f002 ffe9 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001bb8:	f000 fb66 	bl	8002288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001be0:	f003 fd0e 	bl	8005600 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8001bea:	f000 fb4d 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bee:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM1_Init+0x184>)
 8001bf0:	f000 ff48 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001bf4:	bf00      	nop
 8001bf6:	3758      	adds	r7, #88	; 0x58
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000254 	.word	0x20000254
 8001c00:	40010000 	.word	0x40010000

08001c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	; 0x30
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fd98 	bl	8006748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c50:	2301      	movs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c74:	f002 fd2a 	bl	80046cc <HAL_TIM_Encoder_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c7e:	f000 fb03 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <MX_TIM2_Init+0xa4>)
 8001c90:	f003 fc3a 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c9a:	f000 faf5 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000029c 	.word	0x2000029c

08001cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
 8001cd8:	615a      	str	r2, [r3, #20]
 8001cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001cde:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <MX_TIM3_Init+0xec>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720;
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001ce4:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001cf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cf6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d04:	4823      	ldr	r0, [pc, #140]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d06:	f002 fb71 	bl	80043ec <HAL_TIM_Base_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d10:	f000 faba 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d22:	f002 fff1 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d2c:	f000 faac 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d30:	4818      	ldr	r0, [pc, #96]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d32:	f002 fbaa 	bl	800448a <HAL_TIM_PWM_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d3c:	f000 faa4 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4811      	ldr	r0, [pc, #68]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d50:	f003 fbda 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d5a:	f000 fa95 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5e:	2360      	movs	r3, #96	; 0x60
 8001d60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	220c      	movs	r2, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d76:	f002 ff05 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d80:	f000 fa82 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <MX_TIM3_Init+0xe8>)
 8001d86:	f000 fe7d 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001d8a:	bf00      	nop
 8001d8c:	3738      	adds	r7, #56	; 0x38
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200002e4 	.word	0x200002e4
 8001d98:	40000400 	.word	0x40000400

08001d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	; 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001dce:	4a33      	ldr	r2, [pc, #204]	; (8001e9c <MX_TIM4_Init+0x100>)
 8001dd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8001dde:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001de0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001de4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dec:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001df2:	4829      	ldr	r0, [pc, #164]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001df4:	f002 fafa 	bl	80043ec <HAL_TIM_Base_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001dfe:	f000 fa43 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4822      	ldr	r0, [pc, #136]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e10:	f002 ff7a 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e1a:	f000 fa35 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e1e:	481e      	ldr	r0, [pc, #120]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e20:	f002 fb33 	bl	800448a <HAL_TIM_PWM_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e2a:	f000 fa2d 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e36:	f107 0320 	add.w	r3, r7, #32
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4816      	ldr	r0, [pc, #88]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e3e:	f003 fb63 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e48:	f000 fa1e 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4c:	2360      	movs	r3, #96	; 0x60
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e54:	2302      	movs	r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2208      	movs	r2, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e64:	f002 fe8e 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e6e:	f000 fa0b 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	220c      	movs	r2, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e7a:	f002 fe83 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e84:	f000 fa00 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM4_Init+0xfc>)
 8001e8a:	f000 fdfb 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8001e8e:	bf00      	nop
 8001e90:	3738      	adds	r7, #56	; 0x38
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000032c 	.word	0x2000032c
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fc4a 	bl	8006748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <MX_TIM5_Init+0xa4>)
 8001ec0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eea:	2301      	movs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001efa:	2301      	movs	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001f0e:	f002 fbdd 	bl	80046cc <HAL_TIM_Encoder_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001f18:	f000 f9b6 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM5_Init+0xa0>)
 8001f2a:	f003 faed 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001f34:	f000 f9a8 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000374 	.word	0x20000374
 8001f44:	40000c00 	.word	0x40000c00

08001f48 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <MX_TIM8_Init+0x9c>)
 8001f68:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f78:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001f7c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f90:	4813      	ldr	r0, [pc, #76]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001f92:	f002 fa2b 	bl	80043ec <HAL_TIM_Base_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001f9c:	f000 f974 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4619      	mov	r1, r3
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001fae:	f002 feab 	bl	8004d08 <HAL_TIM_ConfigClockSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001fb8:	f000 f966 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_TIM8_Init+0x98>)
 8001fca:	f003 fa9d 	bl	8005508 <HAL_TIMEx_MasterConfigSynchronization>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001fd4:	f000 f958 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200003bc 	.word	0x200003bc
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	615a      	str	r2, [r3, #20]
 8001ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002002:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <MX_TIM11_Init+0x90>)
 8002004:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_TIM11_Init+0x8c>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7199;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002014:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002018:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_TIM11_Init+0x8c>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002026:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002028:	f002 f9e0 	bl	80043ec <HAL_TIM_Base_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002032:	f000 f929 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002036:	480f      	ldr	r0, [pc, #60]	; (8002074 <MX_TIM11_Init+0x8c>)
 8002038:	f002 fa27 	bl	800448a <HAL_TIM_PWM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002042:	f000 f921 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002046:	2360      	movs	r3, #96	; 0x60
 8002048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_TIM11_Init+0x8c>)
 800205e:	f002 fd91 	bl	8004b84 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002068:	f000 f90e 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000404 	.word	0x20000404
 8002078:	40014800 	.word	0x40014800

0800207c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_USART2_UART_Init+0x50>)
 8002084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002088:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800208c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020a2:	220c      	movs	r2, #12
 80020a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART2_UART_Init+0x4c>)
 80020b4:	f003 fb0a 	bl	80056cc <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020be:	f000 f8e3 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000044c 	.word	0x2000044c
 80020cc:	40004400 	.word	0x40004400

080020d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <MX_USART3_UART_Init+0x50>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b08      	ldr	r3, [pc, #32]	; (800211c <MX_USART3_UART_Init+0x4c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_USART3_UART_Init+0x4c>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002106:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_USART3_UART_Init+0x4c>)
 8002108:	f003 fae0 	bl	80056cc <HAL_UART_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002112:	f000 f8b9 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000490 	.word	0x20000490
 8002120:	40004800 	.word	0x40004800

08002124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <MX_GPIO_Init+0x154>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <MX_GPIO_Init+0x154>)
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <MX_GPIO_Init+0x154>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <MX_GPIO_Init+0x154>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a46      	ldr	r2, [pc, #280]	; (8002278 <MX_GPIO_Init+0x154>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <MX_GPIO_Init+0x154>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b40      	ldr	r3, [pc, #256]	; (8002278 <MX_GPIO_Init+0x154>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a3f      	ldr	r2, [pc, #252]	; (8002278 <MX_GPIO_Init+0x154>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b3d      	ldr	r3, [pc, #244]	; (8002278 <MX_GPIO_Init+0x154>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b39      	ldr	r3, [pc, #228]	; (8002278 <MX_GPIO_Init+0x154>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a38      	ldr	r2, [pc, #224]	; (8002278 <MX_GPIO_Init+0x154>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b36      	ldr	r3, [pc, #216]	; (8002278 <MX_GPIO_Init+0x154>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b32      	ldr	r3, [pc, #200]	; (8002278 <MX_GPIO_Init+0x154>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a31      	ldr	r2, [pc, #196]	; (8002278 <MX_GPIO_Init+0x154>)
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <MX_GPIO_Init+0x154>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <MX_GPIO_Init+0x154>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <MX_GPIO_Init+0x154>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <MX_GPIO_Init+0x154>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED4_Pin|OLED3_Pin|OLED2_Pin|OLED1_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80021e8:	4824      	ldr	r0, [pc, #144]	; (800227c <MX_GPIO_Init+0x158>)
 80021ea:	f001 faaf 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LED_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 80021f4:	4822      	ldr	r0, [pc, #136]	; (8002280 <MX_GPIO_Init+0x15c>)
 80021f6:	f001 faa9 	bl	800374c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED4_Pin OLED3_Pin OLED2_Pin OLED1_Pin */
  GPIO_InitStruct.Pin = OLED4_Pin|OLED3_Pin|OLED2_Pin|OLED1_Pin;
 80021fa:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80021fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	481a      	ldr	r0, [pc, #104]	; (800227c <MX_GPIO_Init+0x158>)
 8002214:	f001 f8fe 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_Pin;
 8002218:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800221c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_GPIO_Init+0x15c>)
 8002232:	f001 f8ef 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_PB_Pin IMU_INT_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin|IMU_INT_Pin;
 8002236:	2303      	movs	r3, #3
 8002238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800223a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800223e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <MX_GPIO_Init+0x160>)
 800224c:	f001 f8e2 	bl	8003414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2006      	movs	r0, #6
 8002256:	f001 f814 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800225a:	2006      	movs	r0, #6
 800225c:	f001 f82d 	bl	80032ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2007      	movs	r0, #7
 8002266:	f001 f80c 	bl	8003282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800226a:	2007      	movs	r0, #7
 800226c:	f001 f825 	bl	80032ba <HAL_NVIC_EnableIRQ>

}
 8002270:	bf00      	nop
 8002272:	3730      	adds	r7, #48	; 0x30
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40020000 	.word	0x40020000
 8002284:	40021000 	.word	0x40021000

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>
	...

08002294 <OLED_WR_Byte>:
#include <oled.h>
#include <oledfont.h>
#include "stdlib.h"

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	460a      	mov	r2, r1
 800229e:	71fb      	strb	r3, [r7, #7]
 80022a0:	4613      	mov	r3, r2
 80022a2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1)    // Data write
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	481e      	ldr	r0, [pc, #120]	; (800232c <OLED_WR_Byte+0x98>)
 80022b2:	f001 fa4b 	bl	800374c <HAL_GPIO_WritePin>
 80022b6:	e005      	b.n	80022c4 <OLED_WR_Byte+0x30>
	else                // Command write
	  OLED_RS_Clr();
 80022b8:	2200      	movs	r2, #0
 80022ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022be:	481b      	ldr	r0, [pc, #108]	; (800232c <OLED_WR_Byte+0x98>)
 80022c0:	f001 fa44 	bl	800374c <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e022      	b.n	8002310 <OLED_WR_Byte+0x7c>
	{	OLED_SCLK_Clr();  // clear the clock
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <OLED_WR_Byte+0x98>)
 80022d2:	f001 fa3b 	bl	800374c <HAL_GPIO_WritePin>
		if(dat&0x80)      // check data bit
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da06      	bge.n	80022ec <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 80022de:	2201      	movs	r2, #1
 80022e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e4:	4811      	ldr	r0, [pc, #68]	; (800232c <OLED_WR_Byte+0x98>)
 80022e6:	f001 fa31 	bl	800374c <HAL_GPIO_WritePin>
 80022ea:	e005      	b.n	80022f8 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f2:	480e      	ldr	r0, [pc, #56]	; (800232c <OLED_WR_Byte+0x98>)
 80022f4:	f001 fa2a 	bl	800374c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022fe:	480b      	ldr	r0, [pc, #44]	; (800232c <OLED_WR_Byte+0x98>)
 8002300:	f001 fa24 	bl	800374c <HAL_GPIO_WritePin>
		dat<<=1;          // check next data bit
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d9d9      	bls.n	80022ca <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Set RS=1 upon exit
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <OLED_WR_Byte+0x98>)
 800231e:	f001 fa15 	bl	800374c <HAL_GPIO_WritePin>
} 
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40020c00 	.word	0x40020c00

08002330 <OLED_Refresh_Gram>:

// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8002336:	2300      	movs	r3, #0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	e026      	b.n	800238a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	3b50      	subs	r3, #80	; 0x50
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ffa5 	bl	8002294 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800234a:	2100      	movs	r1, #0
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff ffa1 	bl	8002294 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8002352:	2100      	movs	r1, #0
 8002354:	2010      	movs	r0, #16
 8002356:	f7ff ff9d 	bl	8002294 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800235a:	2300      	movs	r3, #0
 800235c:	71bb      	strb	r3, [r7, #6]
 800235e:	e00d      	b.n	800237c <OLED_Refresh_Gram+0x4c>
 8002360:	79ba      	ldrb	r2, [r7, #6]
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	490d      	ldr	r1, [pc, #52]	; (800239c <OLED_Refresh_Gram+0x6c>)
 8002366:	00d2      	lsls	r2, r2, #3
 8002368:	440a      	add	r2, r1
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2101      	movs	r1, #1
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff8f 	bl	8002294 <OLED_WR_Byte>
 8002376:	79bb      	ldrb	r3, [r7, #6]
 8002378:	3301      	adds	r3, #1
 800237a:	71bb      	strb	r3, [r7, #6]
 800237c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002380:	2b00      	cmp	r3, #0
 8002382:	daed      	bge.n	8002360 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	3301      	adds	r3, #1
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b07      	cmp	r3, #7
 800238e:	d9d5      	bls.n	800233c <OLED_Refresh_Gram+0xc>
	}
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000534 	.word	0x20000534

080023a0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	e014      	b.n	80023d6 <OLED_Clear+0x36>
 80023ac:	2300      	movs	r3, #0
 80023ae:	71bb      	strb	r3, [r7, #6]
 80023b0:	e00a      	b.n	80023c8 <OLED_Clear+0x28>
 80023b2:	79ba      	ldrb	r2, [r7, #6]
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	490c      	ldr	r1, [pc, #48]	; (80023e8 <OLED_Clear+0x48>)
 80023b8:	00d2      	lsls	r2, r2, #3
 80023ba:	440a      	add	r2, r1
 80023bc:	4413      	add	r3, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	3301      	adds	r3, #1
 80023c6:	71bb      	strb	r3, [r7, #6]
 80023c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	daf0      	bge.n	80023b2 <OLED_Clear+0x12>
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	3301      	adds	r3, #1
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b07      	cmp	r3, #7
 80023da:	d9e7      	bls.n	80023ac <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80023dc:	f7ff ffa8 	bl	8002330 <OLED_Refresh_Gram>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000534 	.word	0x20000534

080023ec <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
 80023f6:	460b      	mov	r3, r1
 80023f8:	71bb      	strb	r3, [r7, #6]
 80023fa:	4613      	mov	r3, r2
 80023fc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db41      	blt.n	800248e <OLED_DrawPoint+0xa2>
 800240a:	79bb      	ldrb	r3, [r7, #6]
 800240c:	2b3f      	cmp	r3, #63	; 0x3f
 800240e:	d83e      	bhi.n	800248e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002424:	7b7b      	ldrb	r3, [r7, #13]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2201      	movs	r2, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8002432:	797b      	ldrb	r3, [r7, #5]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <OLED_DrawPoint+0x72>
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	7bbb      	ldrb	r3, [r7, #14]
 800243c:	4917      	ldr	r1, [pc, #92]	; (800249c <OLED_DrawPoint+0xb0>)
 800243e:	00d2      	lsls	r2, r2, #3
 8002440:	440a      	add	r2, r1
 8002442:	4413      	add	r3, r2
 8002444:	7818      	ldrb	r0, [r3, #0]
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	7bf9      	ldrb	r1, [r7, #15]
 800244c:	4301      	orrs	r1, r0
 800244e:	b2c8      	uxtb	r0, r1
 8002450:	4912      	ldr	r1, [pc, #72]	; (800249c <OLED_DrawPoint+0xb0>)
 8002452:	00d2      	lsls	r2, r2, #3
 8002454:	440a      	add	r2, r1
 8002456:	4413      	add	r3, r2
 8002458:	4602      	mov	r2, r0
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e018      	b.n	8002490 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	7bbb      	ldrb	r3, [r7, #14]
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <OLED_DrawPoint+0xb0>)
 8002464:	00d2      	lsls	r2, r2, #3
 8002466:	440a      	add	r2, r1
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b25a      	sxtb	r2, r3
 800246e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002472:	43db      	mvns	r3, r3
 8002474:	b25b      	sxtb	r3, r3
 8002476:	4013      	ands	r3, r2
 8002478:	b259      	sxtb	r1, r3
 800247a:	79fa      	ldrb	r2, [r7, #7]
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	b2c8      	uxtb	r0, r1
 8002480:	4906      	ldr	r1, [pc, #24]	; (800249c <OLED_DrawPoint+0xb0>)
 8002482:	00d2      	lsls	r2, r2, #3
 8002484:	440a      	add	r2, r1
 8002486:	4413      	add	r3, r2
 8002488:	4602      	mov	r2, r0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e000      	b.n	8002490 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800248e:	bf00      	nop
}
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000534 	.word	0x20000534

080024a0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	4603      	mov	r3, r0
 80024b4:	71bb      	strb	r3, [r7, #6]
 80024b6:	460b      	mov	r3, r1
 80024b8:	717b      	strb	r3, [r7, #5]
 80024ba:	4613      	mov	r3, r2
 80024bc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80024be:	79bb      	ldrb	r3, [r7, #6]
 80024c0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80024c2:	797b      	ldrb	r3, [r7, #5]
 80024c4:	3b20      	subs	r3, #32
 80024c6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	73bb      	strb	r3, [r7, #14]
 80024cc:	e04d      	b.n	800256a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80024ce:	793b      	ldrb	r3, [r7, #4]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d10b      	bne.n	80024ec <OLED_ShowChar+0x4c>
 80024d4:	797a      	ldrb	r2, [r7, #5]
 80024d6:	7bb9      	ldrb	r1, [r7, #14]
 80024d8:	4828      	ldr	r0, [pc, #160]	; (800257c <OLED_ShowChar+0xdc>)
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	440b      	add	r3, r1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e007      	b.n	80024fc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80024ec:	797a      	ldrb	r2, [r7, #5]
 80024ee:	7bbb      	ldrb	r3, [r7, #14]
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <OLED_ShowChar+0xe0>)
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	440a      	add	r2, r1
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	737b      	strb	r3, [r7, #13]
 8002500:	e02d      	b.n	800255e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	da07      	bge.n	800251a <OLED_ShowChar+0x7a>
 800250a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800250e:	79b9      	ldrb	r1, [r7, #6]
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff6a 	bl	80023ec <OLED_DrawPoint>
 8002518:	e00c      	b.n	8002534 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800251a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	79b9      	ldrb	r1, [r7, #6]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff5c 	bl	80023ec <OLED_DrawPoint>
			temp<<=1;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
			y++;
 800253a:	79bb      	ldrb	r3, [r7, #6]
 800253c:	3301      	adds	r3, #1
 800253e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8002540:	79ba      	ldrb	r2, [r7, #6]
 8002542:	7b3b      	ldrb	r3, [r7, #12]
 8002544:	1ad2      	subs	r2, r2, r3
 8002546:	793b      	ldrb	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	d105      	bne.n	8002558 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800254c:	7b3b      	ldrb	r3, [r7, #12]
 800254e:	71bb      	strb	r3, [r7, #6]
				x++;
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	3301      	adds	r3, #1
 8002554:	71fb      	strb	r3, [r7, #7]
				break;
 8002556:	e005      	b.n	8002564 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	3301      	adds	r3, #1
 800255c:	737b      	strb	r3, [r7, #13]
 800255e:	7b7b      	ldrb	r3, [r7, #13]
 8002560:	2b07      	cmp	r3, #7
 8002562:	d9ce      	bls.n	8002502 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	3301      	adds	r3, #1
 8002568:	73bb      	strb	r3, [r7, #14]
 800256a:	7bba      	ldrb	r2, [r7, #14]
 800256c:	793b      	ldrb	r3, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3ad      	bcc.n	80024ce <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	08009628 	.word	0x08009628
 8002580:	08009a9c 	.word	0x08009a9c

08002584 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af02      	add	r7, sp, #8
 800258a:	4603      	mov	r3, r0
 800258c:	603a      	str	r2, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
 8002590:	460b      	mov	r3, r1
 8002592:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8002594:	e01f      	b.n	80025d6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b7a      	cmp	r3, #122	; 0x7a
 800259a:	d904      	bls.n	80025a6 <OLED_ShowString+0x22>
 800259c:	2300      	movs	r3, #0
 800259e:	71fb      	strb	r3, [r7, #7]
 80025a0:	79bb      	ldrb	r3, [r7, #6]
 80025a2:	3310      	adds	r3, #16
 80025a4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	2b3a      	cmp	r3, #58	; 0x3a
 80025aa:	d905      	bls.n	80025b8 <OLED_ShowString+0x34>
 80025ac:	2300      	movs	r3, #0
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	71bb      	strb	r3, [r7, #6]
 80025b4:	f7ff fef4 	bl	80023a0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	79b9      	ldrb	r1, [r7, #6]
 80025be:	79f8      	ldrb	r0, [r7, #7]
 80025c0:	2301      	movs	r3, #1
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	230c      	movs	r3, #12
 80025c6:	f7ff ff6b 	bl	80024a0 <OLED_ShowChar>
        x+=8;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	3308      	adds	r3, #8
 80025ce:	71fb      	strb	r3, [r7, #7]
        p++;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1db      	bne.n	8002596 <OLED_ShowString+0x12>
    }  
}	 
 80025de:	bf00      	nop
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <OLED_Init>:

void OLED_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80025ec:	f001 fa3e 	bl	8003a6c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <OLED_Init+0x114>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a41      	ldr	r2, [pc, #260]	; (80026fc <OLED_Init+0x114>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <OLED_Init+0x114>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <OLED_Init+0x114>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002608:	f001 fa44 	bl	8003a94 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002612:	483b      	ldr	r0, [pc, #236]	; (8002700 <OLED_Init+0x118>)
 8002614:	f001 f89a 	bl	800374c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002618:	2064      	movs	r0, #100	; 0x64
 800261a:	f000 fd33 	bl	8003084 <HAL_Delay>
	OLED_RST_Set();
 800261e:	2201      	movs	r2, #1
 8002620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002624:	4836      	ldr	r0, [pc, #216]	; (8002700 <OLED_Init+0x118>)
 8002626:	f001 f891 	bl	800374c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800262a:	2100      	movs	r1, #0
 800262c:	20ae      	movs	r0, #174	; 0xae
 800262e:	f7ff fe31 	bl	8002294 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8002632:	2100      	movs	r1, #0
 8002634:	20d5      	movs	r0, #213	; 0xd5
 8002636:	f7ff fe2d 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800263a:	2100      	movs	r1, #0
 800263c:	2050      	movs	r0, #80	; 0x50
 800263e:	f7ff fe29 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8002642:	2100      	movs	r1, #0
 8002644:	20a8      	movs	r0, #168	; 0xa8
 8002646:	f7ff fe25 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800264a:	2100      	movs	r1, #0
 800264c:	203f      	movs	r0, #63	; 0x3f
 800264e:	f7ff fe21 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8002652:	2100      	movs	r1, #0
 8002654:	20d3      	movs	r0, #211	; 0xd3
 8002656:	f7ff fe1d 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800265a:	2100      	movs	r1, #0
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fe19 	bl	8002294 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8002662:	2100      	movs	r1, #0
 8002664:	2040      	movs	r0, #64	; 0x40
 8002666:	f7ff fe15 	bl	8002294 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800266a:	2100      	movs	r1, #0
 800266c:	208d      	movs	r0, #141	; 0x8d
 800266e:	f7ff fe11 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8002672:	2100      	movs	r1, #0
 8002674:	2014      	movs	r0, #20
 8002676:	f7ff fe0d 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800267a:	2100      	movs	r1, #0
 800267c:	2020      	movs	r0, #32
 800267e:	f7ff fe09 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8002682:	2100      	movs	r1, #0
 8002684:	2002      	movs	r0, #2
 8002686:	f7ff fe05 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800268a:	2100      	movs	r1, #0
 800268c:	20a1      	movs	r0, #161	; 0xa1
 800268e:	f7ff fe01 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8002692:	2100      	movs	r1, #0
 8002694:	20c0      	movs	r0, #192	; 0xc0
 8002696:	f7ff fdfd 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800269a:	2100      	movs	r1, #0
 800269c:	20da      	movs	r0, #218	; 0xda
 800269e:	f7ff fdf9 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80026a2:	2100      	movs	r1, #0
 80026a4:	2012      	movs	r0, #18
 80026a6:	f7ff fdf5 	bl	8002294 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80026aa:	2100      	movs	r1, #0
 80026ac:	2081      	movs	r0, #129	; 0x81
 80026ae:	f7ff fdf1 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80026b2:	2100      	movs	r1, #0
 80026b4:	20ef      	movs	r0, #239	; 0xef
 80026b6:	f7ff fded 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80026ba:	2100      	movs	r1, #0
 80026bc:	20d9      	movs	r0, #217	; 0xd9
 80026be:	f7ff fde9 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80026c2:	2100      	movs	r1, #0
 80026c4:	20f1      	movs	r0, #241	; 0xf1
 80026c6:	f7ff fde5 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80026ca:	2100      	movs	r1, #0
 80026cc:	20db      	movs	r0, #219	; 0xdb
 80026ce:	f7ff fde1 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80026d2:	2100      	movs	r1, #0
 80026d4:	2030      	movs	r0, #48	; 0x30
 80026d6:	f7ff fddd 	bl	8002294 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80026da:	2100      	movs	r1, #0
 80026dc:	20a4      	movs	r0, #164	; 0xa4
 80026de:	f7ff fdd9 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80026e2:	2100      	movs	r1, #0
 80026e4:	20a6      	movs	r0, #166	; 0xa6
 80026e6:	f7ff fdd5 	bl	8002294 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80026ea:	2100      	movs	r1, #0
 80026ec:	20af      	movs	r0, #175	; 0xaf
 80026ee:	f7ff fdd1 	bl	8002294 <OLED_WR_Byte>
	OLED_Clear(); 
 80026f2:	f7ff fe55 	bl	80023a0 <OLED_Clear>
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020c00 	.word	0x40020c00

08002704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <HAL_MspInit+0x68>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <HAL_MspInit+0x68>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <HAL_MspInit+0x68>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_MspInit+0x68>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_MspInit+0x68>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_MspInit+0x68>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2005      	movs	r0, #5
 8002748:	f000 fd9b 	bl	8003282 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800274c:	2005      	movs	r0, #5
 800274e:	f000 fdb4 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2005      	movs	r0, #5
 8002758:	f000 fd93 	bl	8003282 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800275c:	2005      	movs	r0, #5
 800275e:	f000 fdac 	bl	80032ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <HAL_I2C_MspInit+0x84>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12c      	bne.n	80027ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b4:	2312      	movs	r3, #18
 80027b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027bc:	2303      	movs	r3, #3
 80027be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027c0:	2304      	movs	r3, #4
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	480c      	ldr	r0, [pc, #48]	; (80027fc <HAL_I2C_MspInit+0x8c>)
 80027cc:	f000 fe22 	bl	8003414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_I2C_MspInit+0x88>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027ec:	bf00      	nop
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40005800 	.word	0x40005800
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40020400 	.word	0x40020400

08002800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a41      	ldr	r2, [pc, #260]	; (8002924 <HAL_TIM_Base_MspInit+0x124>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d12d      	bne.n	800287e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	623b      	str	r3, [r7, #32]
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a38      	ldr	r2, [pc, #224]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002848:	f043 0310 	orr.w	r3, r3, #16
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = IN2_CO_Pin|IN1_CO_Pin;
 800285a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800286c:	2301      	movs	r3, #1
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	482d      	ldr	r0, [pc, #180]	; (800292c <HAL_TIM_Base_MspInit+0x12c>)
 8002878:	f000 fdcc 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800287c:	e04e      	b.n	800291c <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2b      	ldr	r2, [pc, #172]	; (8002930 <HAL_TIM_Base_MspInit+0x130>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10e      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a25      	ldr	r2, [pc, #148]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
}
 80028a4:	e03a      	b.n	800291c <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_TIM_Base_MspInit+0x134>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10e      	bne.n	80028ce <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6413      	str	r3, [r2, #64]	; 0x40
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]
}
 80028cc:	e026      	b.n	800291c <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM8)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a19      	ldr	r2, [pc, #100]	; (8002938 <HAL_TIM_Base_MspInit+0x138>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d10e      	bne.n	80028f6 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	4a11      	ldr	r2, [pc, #68]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	6453      	str	r3, [r2, #68]	; 0x44
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]
}
 80028f4:	e012      	b.n	800291c <HAL_TIM_Base_MspInit+0x11c>
  else if(htim_base->Instance==TIM11)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a10      	ldr	r2, [pc, #64]	; (800293c <HAL_TIM_Base_MspInit+0x13c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10d      	bne.n	800291c <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 800290a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800290e:	6453      	str	r3, [r2, #68]	; 0x44
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_TIM_Base_MspInit+0x128>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	bf00      	nop
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40010000 	.word	0x40010000
 8002928:	40023800 	.word	0x40023800
 800292c:	40021000 	.word	0x40021000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40010400 	.word	0x40010400
 800293c:	40014800 	.word	0x40014800

08002940 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002960:	d153      	bne.n	8002a0a <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
 8002972:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a3b      	ldr	r2, [pc, #236]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029bc:	2302      	movs	r3, #2
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c8:	2301      	movs	r3, #1
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	4619      	mov	r1, r3
 80029d2:	4829      	ldr	r0, [pc, #164]	; (8002a78 <HAL_TIM_Encoder_MspInit+0x138>)
 80029d4:	f000 fd1e 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d8:	2308      	movs	r3, #8
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e8:	2301      	movs	r3, #1
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4822      	ldr	r0, [pc, #136]	; (8002a7c <HAL_TIM_Encoder_MspInit+0x13c>)
 80029f4:	f000 fd0e 	bl	8003414 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	201c      	movs	r0, #28
 80029fe:	f000 fc40 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a02:	201c      	movs	r0, #28
 8002a04:	f000 fc59 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a08:	e030      	b.n	8002a6c <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM5)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_TIM_Encoder_MspInit+0x140>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d12b      	bne.n	8002a6c <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	6413      	str	r3, [r2, #64]	; 0x40
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_TIM_Encoder_MspInit+0x134>)
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	4804      	ldr	r0, [pc, #16]	; (8002a78 <HAL_TIM_Encoder_MspInit+0x138>)
 8002a68:	f000 fcd4 	bl	8003414 <HAL_GPIO_Init>
}
 8002a6c:	bf00      	nop
 8002a6e:	3730      	adds	r7, #48	; 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40000c00 	.word	0x40000c00

08002a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <HAL_TIM_MspPostInit+0xfc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002ab0:	f043 0310 	orr.w	r3, r3, #16
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = IN2_DO_Pin|IN1_DO_Pin;
 8002ac2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	4619      	mov	r1, r3
 8002ade:	482a      	ldr	r0, [pc, #168]	; (8002b88 <HAL_TIM_MspPostInit+0x104>)
 8002ae0:	f000 fc98 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ae4:	e048      	b.n	8002b78 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_TIM_MspPostInit+0x108>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d11f      	bne.n	8002b30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	4819      	ldr	r0, [pc, #100]	; (8002b90 <HAL_TIM_MspPostInit+0x10c>)
 8002b2a:	f000 fc73 	bl	8003414 <HAL_GPIO_Init>
}
 8002b2e:	e023      	b.n	8002b78 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_TIM_MspPostInit+0x110>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d11e      	bne.n	8002b78 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_TIM_MspPostInit+0x100>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IN2_A_PWM_Pin|IN1_A_PWM_Pin;
 8002b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4619      	mov	r1, r3
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <HAL_TIM_MspPostInit+0x114>)
 8002b74:	f000 fc4e 	bl	8003414 <HAL_GPIO_Init>
}
 8002b78:	bf00      	nop
 8002b7a:	3728      	adds	r7, #40	; 0x28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40010000 	.word	0x40010000
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40020400 	.word	0x40020400

08002b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_UART_MspInit+0xf8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d134      	bne.n	8002c28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bce:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002bf6:	2360      	movs	r3, #96	; 0x60
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c06:	2307      	movs	r3, #7
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4822      	ldr	r0, [pc, #136]	; (8002c9c <HAL_UART_MspInit+0x100>)
 8002c12:	f000 fbff 	bl	8003414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2026      	movs	r0, #38	; 0x26
 8002c1c:	f000 fb31 	bl	8003282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c20:	2026      	movs	r0, #38	; 0x26
 8002c22:	f000 fb4a 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c26:	e031      	b.n	8002c8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <HAL_UART_MspInit+0x104>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12c      	bne.n	8002c8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_UART_MspInit+0xfc>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	4619      	mov	r1, r3
 8002c86:	4805      	ldr	r0, [pc, #20]	; (8002c9c <HAL_UART_MspInit+0x100>)
 8002c88:	f000 fbc4 	bl	8003414 <HAL_GPIO_Init>
}
 8002c8c:	bf00      	nop
 8002c8e:	3730      	adds	r7, #48	; 0x30
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40004800 	.word	0x40004800

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <NMI_Handler+0x4>

08002caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <HardFault_Handler+0x4>

08002cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <MemManage_Handler+0x4>

08002cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <BusFault_Handler+0x4>

08002cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <UsageFault_Handler+0x4>

08002cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	tick++;
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <SysTick_Handler+0x48>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	4a0f      	ldr	r2, [pc, #60]	; (8002d34 <SysTick_Handler+0x48>)
 8002cf8:	6013      	str	r3, [r2, #0]
	if (tick == no_of_tick)	{ // assuming 1 msec tick, calculate speed every 50 msec?
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <SysTick_Handler+0x48>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <SysTick_Handler+0x4c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d111      	bne.n	8002d2a <SysTick_Handler+0x3e>
//		speed = ((position - oldpos)*20*60/180);  // number of ticks/sec * 60 sec  diveide by 180 ticks per round
		speed = (position - oldpos); // change in position
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <SysTick_Handler+0x50>)
 8002d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <SysTick_Handler+0x54>)
 8002d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <SysTick_Handler+0x58>)
 8002d18:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <SysTick_Handler+0x50>)
 8002d1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <SysTick_Handler+0x54>)
 8002d22:	801a      	strh	r2, [r3, #0]
		tick = 0;
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <SysTick_Handler+0x48>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d2a:	f000 f98b 	bl	8003044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000938 	.word	0x20000938
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000504 	.word	0x20000504
 8002d40:	20000934 	.word	0x20000934
 8002d44:	200004da 	.word	0x200004da

08002d48 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f000 fd2a 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 8002d68:	2002      	movs	r0, #2
 8002d6a:	f000 fd23 	bl	80037b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <TIM2_IRQHandler+0x10>)
 8002d7a:	f001 fdfb 	bl	8004974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000029c 	.word	0x2000029c

08002d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <USART2_IRQHandler+0x10>)
 8002d8e:	f002 fd7d 	bl	800588c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000044c 	.word	0x2000044c

08002d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
	return 1;
 8002da0:	2301      	movs	r3, #1
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_kill>:

int _kill(int pid, int sig)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002db6:	f003 fc9d 	bl	80066f4 <__errno>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2216      	movs	r2, #22
 8002dbe:	601a      	str	r2, [r3, #0]
	return -1;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_exit>:

void _exit (int status)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ffe7 	bl	8002dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002dde:	e7fe      	b.n	8002dde <_exit+0x12>

08002de0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002df2:	f3af 8000 	nop.w
 8002df6:	4601      	mov	r1, r0
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	60ba      	str	r2, [r7, #8]
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	dbf0      	blt.n	8002df2 <_read+0x12>
	}

return len;
 8002e10:	687b      	ldr	r3, [r7, #4]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e009      	b.n	8002e40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	60ba      	str	r2, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbf1      	blt.n	8002e2c <_write+0x12>
	}
	return len;
 8002e48:	687b      	ldr	r3, [r7, #4]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <_close>:

int _close(int file)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
	return -1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <_isatty>:

int _isatty(int file)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	return 1;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
	return 0;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <_sbrk+0x5c>)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <_sbrk+0x60>)
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x64>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <_sbrk+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eec:	f003 fc02 	bl	80066f4 <__errno>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8002efa:	e009      	b.n	8002f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_sbrk+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20020000 	.word	0x20020000
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	2000093c 	.word	0x2000093c
 8002f24:	20000958 	.word	0x20000958

08002f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SystemInit+0x20>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <SystemInit+0x20>)
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f50:	480d      	ldr	r0, [pc, #52]	; (8002f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f52:	490e      	ldr	r1, [pc, #56]	; (8002f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f54:	4a0e      	ldr	r2, [pc, #56]	; (8002f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0b      	ldr	r2, [pc, #44]	; (8002f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f68:	4c0b      	ldr	r4, [pc, #44]	; (8002f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f76:	f7ff ffd7 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f003 fbc1 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7e:	f7fe fb13 	bl	80015a8 <main>
  bx  lr    
 8002f82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f8c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002f90:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 8002f94:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002f98:	20000954 	.word	0x20000954

08002f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <HAL_Init+0x40>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <HAL_Init+0x40>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_Init+0x40>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_Init+0x40>)
 8002fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_Init+0x40>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <HAL_Init+0x40>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f000 f94f 	bl	800326c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fce:	200f      	movs	r0, #15
 8002fd0:	f000 f808 	bl	8002fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fd4:	f7ff fb96 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_InitTick+0x54>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_InitTick+0x58>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f967 	bl	80032d6 <HAL_SYSTICK_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00e      	b.n	8003030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b0f      	cmp	r3, #15
 8003016:	d80a      	bhi.n	800302e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003018:	2200      	movs	r2, #0
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	f000 f92f 	bl	8003282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <HAL_InitTick+0x5c>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000008 	.word	0x20000008
 800303c:	20000010 	.word	0x20000010
 8003040:	2000000c 	.word	0x2000000c

08003044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_IncTick+0x20>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x24>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4413      	add	r3, r2
 8003054:	4a04      	ldr	r2, [pc, #16]	; (8003068 <HAL_IncTick+0x24>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000010 	.word	0x20000010
 8003068:	20000940 	.word	0x20000940

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_GetTick+0x14>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	4618      	mov	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000940 	.word	0x20000940

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff ffee 	bl	800306c <HAL_GetTick>
 8003090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309c:	d005      	beq.n	80030aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_Delay+0x44>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030aa:	bf00      	nop
 80030ac:	f7ff ffde 	bl	800306c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d8f7      	bhi.n	80030ac <HAL_Delay+0x28>
  {
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000010 	.word	0x20000010

080030cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e8:	4013      	ands	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fe:	4a04      	ldr	r2, [pc, #16]	; (8003110 <__NVIC_SetPriorityGrouping+0x44>)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	60d3      	str	r3, [r2, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__NVIC_GetPriorityGrouping+0x18>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	f003 0307 	and.w	r3, r3, #7
}
 8003122:	4618      	mov	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db0b      	blt.n	800315a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	4907      	ldr	r1, [pc, #28]	; (8003168 <__NVIC_EnableIRQ+0x38>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	e000e100 	.word	0xe000e100

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	; (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003238:	d301      	bcc.n	800323e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323a:	2301      	movs	r3, #1
 800323c:	e00f      	b.n	800325e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <SysTick_Config+0x40>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003246:	210f      	movs	r1, #15
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f7ff ff8e 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <SysTick_Config+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <SysTick_Config+0x40>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff29 	bl	80030cc <__NVIC_SetPriorityGrouping>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff3e 	bl	8003114 <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff8e 	bl	80031c0 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5d 	bl	800316c <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff31 	bl	8003130 <__NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa2 	bl	8003228 <SysTick_Config>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff feb6 	bl	800306c <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d008      	beq.n	8003320 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e052      	b.n	80033c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0216 	bic.w	r2, r2, #22
 800332e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800333e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <HAL_DMA_Abort+0x62>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0208 	bic.w	r2, r2, #8
 800335e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003370:	e013      	b.n	800339a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003372:	f7ff fe7b 	bl	800306c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b05      	cmp	r3, #5
 800337e:	d90c      	bls.n	800339a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e015      	b.n	80033c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e4      	bne.n	8003372 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	223f      	movs	r2, #63	; 0x3f
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e00c      	b.n	8003406 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2205      	movs	r2, #5
 80033f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e16b      	b.n	8003708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 815a 	bne.w	8003702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d005      	beq.n	8003466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	2b02      	cmp	r3, #2
 8003464:	d130      	bne.n	80034c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80b4 	beq.w	8003702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b60      	ldr	r3, [pc, #384]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a5f      	ldr	r2, [pc, #380]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_GPIO_Init+0x30c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b6:	4a5b      	ldr	r2, [pc, #364]	; (8003724 <HAL_GPIO_Init+0x310>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_GPIO_Init+0x314>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <HAL_GPIO_Init+0x226>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a51      	ldr	r2, [pc, #324]	; (800372c <HAL_GPIO_Init+0x318>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d025      	beq.n	8003636 <HAL_GPIO_Init+0x222>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_GPIO_Init+0x31c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <HAL_GPIO_Init+0x21e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4f      	ldr	r2, [pc, #316]	; (8003734 <HAL_GPIO_Init+0x320>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d019      	beq.n	800362e <HAL_GPIO_Init+0x21a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x216>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_GPIO_Init+0x328>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x212>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_GPIO_Init+0x32c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x20e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4b      	ldr	r2, [pc, #300]	; (8003744 <HAL_GPIO_Init+0x330>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x20a>
 800361a:	2307      	movs	r3, #7
 800361c:	e00e      	b.n	800363c <HAL_GPIO_Init+0x228>
 800361e:	2308      	movs	r3, #8
 8003620:	e00c      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003622:	2306      	movs	r3, #6
 8003624:	e00a      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003626:	2305      	movs	r3, #5
 8003628:	e008      	b.n	800363c <HAL_GPIO_Init+0x228>
 800362a:	2304      	movs	r3, #4
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x228>
 800362e:	2303      	movs	r3, #3
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x228>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x228>
 800363a:	2300      	movs	r3, #0
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f002 0203 	and.w	r2, r2, #3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4093      	lsls	r3, r2
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364c:	4935      	ldr	r1, [pc, #212]	; (8003724 <HAL_GPIO_Init+0x310>)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3302      	adds	r3, #2
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_GPIO_Init+0x334>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367e:	4a32      	ldr	r2, [pc, #200]	; (8003748 <HAL_GPIO_Init+0x334>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003684:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HAL_GPIO_Init+0x334>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a8:	4a27      	ldr	r2, [pc, #156]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_GPIO_Init+0x334>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3301      	adds	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0f      	cmp	r3, #15
 800370c:	f67f ae90 	bls.w	8003430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40023800 	.word	0x40023800
 8003724:	40013800 	.word	0x40013800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40020800 	.word	0x40020800
 8003734:	40020c00 	.word	0x40020c00
 8003738:	40021000 	.word	0x40021000
 800373c:	40021400 	.word	0x40021400
 8003740:	40021800 	.word	0x40021800
 8003744:	40021c00 	.word	0x40021c00
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
 8003758:	4613      	mov	r3, r2
 800375a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800375c:	787b      	ldrb	r3, [r7, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003768:	e003      	b.n	8003772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800376a:	887b      	ldrh	r3, [r7, #2]
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003790:	887a      	ldrh	r2, [r7, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	041a      	lsls	r2, r3, #16
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43d9      	mvns	r1, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	400b      	ands	r3, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ca:	4a05      	ldr	r2, [pc, #20]	; (80037e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fb98 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e12b      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fe ffb0 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003848:	f000 fda8 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a81      	ldr	r2, [pc, #516]	; (8003a58 <HAL_I2C_Init+0x274>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d807      	bhi.n	8003868 <HAL_I2C_Init+0x84>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a80      	ldr	r2, [pc, #512]	; (8003a5c <HAL_I2C_Init+0x278>)
 800385c:	4293      	cmp	r3, r2
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e006      	b.n	8003876 <HAL_I2C_Init+0x92>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a7d      	ldr	r2, [pc, #500]	; (8003a60 <HAL_I2C_Init+0x27c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	bf94      	ite	ls
 8003870:	2301      	movls	r3, #1
 8003872:	2300      	movhi	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0e7      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a78      	ldr	r2, [pc, #480]	; (8003a64 <HAL_I2C_Init+0x280>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a6a      	ldr	r2, [pc, #424]	; (8003a58 <HAL_I2C_Init+0x274>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <HAL_I2C_Init+0xd4>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3301      	adds	r3, #1
 80038b6:	e009      	b.n	80038cc <HAL_I2C_Init+0xe8>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <HAL_I2C_Init+0x284>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	3301      	adds	r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	495c      	ldr	r1, [pc, #368]	; (8003a58 <HAL_I2C_Init+0x274>)
 80038e8:	428b      	cmp	r3, r1
 80038ea:	d819      	bhi.n	8003920 <HAL_I2C_Init+0x13c>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e59      	subs	r1, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003900:	400b      	ands	r3, r1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_I2C_Init+0x138>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e59      	subs	r1, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fbb1 f3f3 	udiv	r3, r1, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	e051      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800391c:	2304      	movs	r3, #4
 800391e:	e04f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <HAL_I2C_Init+0x168>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e012      	b.n	8003972 <HAL_I2C_Init+0x18e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Init+0x196>
 8003976:	2301      	movs	r3, #1
 8003978:	e022      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <HAL_I2C_Init+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e58      	subs	r0, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	440b      	add	r3, r1
 8003990:	fbb0 f3f3 	udiv	r3, r0, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800399e:	e00f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	0099      	lsls	r1, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6809      	ldr	r1, [r1, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6911      	ldr	r1, [r2, #16]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d2      	ldr	r2, [r2, #12]
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	000186a0 	.word	0x000186a0
 8003a5c:	001e847f 	.word	0x001e847f
 8003a60:	003d08ff 	.word	0x003d08ff
 8003a64:	431bde83 	.word	0x431bde83
 8003a68:	10624dd3 	.word	0x10624dd3

08003a6c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003a7e:	687b      	ldr	r3, [r7, #4]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	420e0020 	.word	0x420e0020
 8003a90:	40007000 	.word	0x40007000

08003a94 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003aa6:	687b      	ldr	r3, [r7, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	420e0020 	.word	0x420e0020
 8003ab8:	40007000 	.word	0x40007000

08003abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e267      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d075      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d00c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d112      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	4b7e      	ldr	r3, [pc, #504]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d05b      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x108>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d157      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e242      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d106      	bne.n	8003b30 <HAL_RCC_OscConfig+0x74>
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a75      	ldr	r2, [pc, #468]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e01d      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6c      	ldr	r2, [pc, #432]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e00b      	b.n	8003b6c <HAL_RCC_OscConfig+0xb0>
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a68      	ldr	r2, [pc, #416]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b66      	ldr	r3, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a65      	ldr	r2, [pc, #404]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7ff fa7a 	bl	800306c <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7ff fa76 	bl	800306c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	; 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e207      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0xc0>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7ff fa66 	bl	800306c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7ff fa62 	bl	800306c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e1f3      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xe8>
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d11c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d116      	bne.n	8003c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e1c7      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0e:	4b3b      	ldr	r3, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	e03a      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d020      	beq.n	8003c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7ff fa1b 	bl	800306c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c3a:	f7ff fa17 	bl	800306c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a8      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4925      	ldr	r1, [pc, #148]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
 8003c6c:	e015      	b.n	8003c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCC_OscConfig+0x244>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7ff f9fa 	bl	800306c <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7ff f9f6 	bl	800306c <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e187      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d036      	beq.n	8003d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7ff f9da 	bl	800306c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cbc:	f7ff f9d6 	bl	800306c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e167      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x200>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <HAL_RCC_OscConfig+0x248>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce2:	f7ff f9c3 	bl	800306c <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7ff f9bf 	bl	800306c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d907      	bls.n	8003d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e150      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	42470000 	.word	0x42470000
 8003d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ea      	bne.n	8003cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8097 	beq.w	8003e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d26:	4b81      	ldr	r3, [pc, #516]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b7d      	ldr	r3, [pc, #500]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4a7c      	ldr	r2, [pc, #496]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	; 0x40
 8003d42:	4b7a      	ldr	r3, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d52:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d118      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5e:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a73      	ldr	r2, [pc, #460]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d6a:	f7ff f97f 	bl	800306c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d72:	f7ff f97b 	bl	800306c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e10c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x474>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2ea>
 8003d98:	4b64      	ldr	r3, [pc, #400]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4a63      	ldr	r2, [pc, #396]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	; 0x70
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x30c>
 8003dae:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a5e      	ldr	r2, [pc, #376]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003db4:	f043 0304 	orr.w	r3, r3, #4
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b5c      	ldr	r3, [pc, #368]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a5b      	ldr	r2, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0x324>
 8003dc8:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a57      	ldr	r2, [pc, #348]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	4b55      	ldr	r3, [pc, #340]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a54      	ldr	r2, [pc, #336]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d015      	beq.n	8003e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7ff f940 	bl	800306c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7ff f93c 	bl	800306c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e0cb      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0ee      	beq.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003e12:	e014      	b.n	8003e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e14:	f7ff f92a 	bl	800306c <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1c:	f7ff f926 	bl	800306c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e0b5      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d105      	bne.n	8003e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	4a38      	ldr	r2, [pc, #224]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a1 	beq.w	8003f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d05c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7ff f8fa 	bl	800306c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7ff f8f6 	bl	800306c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e087      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	019b      	lsls	r3, r3, #6
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	061b      	lsls	r3, r3, #24
 8003ebe:	491b      	ldr	r1, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7ff f8cf 	bl	800306c <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7ff f8cb 	bl	800306c <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e05c      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x416>
 8003ef0:	e054      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_RCC_OscConfig+0x478>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7ff f8b8 	bl	800306c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f00:	f7ff f8b4 	bl	800306c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e045      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_RCC_OscConfig+0x470>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x444>
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e038      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000
 8003f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x4ec>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d028      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d121      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11a      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	3b01      	subs	r3, #1
 8003f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0cc      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b68      	ldr	r3, [pc, #416]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d90c      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b63      	ldr	r3, [pc, #396]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0b8      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004000:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a58      	ldr	r2, [pc, #352]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004018:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	494d      	ldr	r1, [pc, #308]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d044      	beq.n	80040cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b47      	ldr	r3, [pc, #284]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d119      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e07f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d003      	beq.n	800406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	2b03      	cmp	r3, #3
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e067      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408a:	4b37      	ldr	r3, [pc, #220]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4934      	ldr	r1, [pc, #208]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800409c:	f7fe ffe6 	bl	800306c <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	e00a      	b.n	80040ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a4:	f7fe ffe2 	bl	800306c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e04f      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 020c 	and.w	r2, r3, #12
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d1eb      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d20c      	bcs.n	80040f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b22      	ldr	r3, [pc, #136]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e032      	b.n	800415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4916      	ldr	r1, [pc, #88]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	490e      	ldr	r1, [pc, #56]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004132:	f000 f821 	bl	8004178 <HAL_RCC_GetSysClockFreq>
 8004136:	4602      	mov	r2, r0
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	091b      	lsrs	r3, r3, #4
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	490a      	ldr	r1, [pc, #40]	; (800416c <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	5ccb      	ldrb	r3, [r1, r3]
 8004146:	fa22 f303 	lsr.w	r3, r2, r3
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe ff46 	bl	8002fe4 <HAL_InitTick>

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00
 8004168:	40023800 	.word	0x40023800
 800416c:	0800a08c 	.word	0x0800a08c
 8004170:	20000008 	.word	0x20000008
 8004174:	2000000c 	.word	0x2000000c

08004178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b094      	sub	sp, #80	; 0x50
 800417e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	647b      	str	r3, [r7, #68]	; 0x44
 8004184:	2300      	movs	r3, #0
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	2300      	movs	r3, #0
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004190:	4b79      	ldr	r3, [pc, #484]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b08      	cmp	r3, #8
 800419a:	d00d      	beq.n	80041b8 <HAL_RCC_GetSysClockFreq+0x40>
 800419c:	2b08      	cmp	r3, #8
 800419e:	f200 80e1 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x34>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041aa:	e0db      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ac:	4b73      	ldr	r3, [pc, #460]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041b0:	e0db      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b2:	4b73      	ldr	r3, [pc, #460]	; (8004380 <HAL_RCC_GetSysClockFreq+0x208>)
 80041b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b6:	e0d8      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b8:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d063      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	2200      	movs	r2, #0
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e0:	633b      	str	r3, [r7, #48]	; 0x30
 80041e2:	2300      	movs	r3, #0
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041ea:	4622      	mov	r2, r4
 80041ec:	462b      	mov	r3, r5
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	0159      	lsls	r1, r3, #5
 80041f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041fc:	0150      	lsls	r0, r2, #5
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4621      	mov	r1, r4
 8004204:	1a51      	subs	r1, r2, r1
 8004206:	6139      	str	r1, [r7, #16]
 8004208:	4629      	mov	r1, r5
 800420a:	eb63 0301 	sbc.w	r3, r3, r1
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800421c:	4659      	mov	r1, fp
 800421e:	018b      	lsls	r3, r1, #6
 8004220:	4651      	mov	r1, sl
 8004222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004226:	4651      	mov	r1, sl
 8004228:	018a      	lsls	r2, r1, #6
 800422a:	4651      	mov	r1, sl
 800422c:	ebb2 0801 	subs.w	r8, r2, r1
 8004230:	4659      	mov	r1, fp
 8004232:	eb63 0901 	sbc.w	r9, r3, r1
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424a:	4690      	mov	r8, r2
 800424c:	4699      	mov	r9, r3
 800424e:	4623      	mov	r3, r4
 8004250:	eb18 0303 	adds.w	r3, r8, r3
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	462b      	mov	r3, r5
 8004258:	eb49 0303 	adc.w	r3, r9, r3
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800426a:	4629      	mov	r1, r5
 800426c:	024b      	lsls	r3, r1, #9
 800426e:	4621      	mov	r1, r4
 8004270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004274:	4621      	mov	r1, r4
 8004276:	024a      	lsls	r2, r1, #9
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
 8004282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004288:	f7fc fc8e 	bl	8000ba8 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4613      	mov	r3, r2
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	e058      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004296:	4b38      	ldr	r3, [pc, #224]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	2200      	movs	r2, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	4611      	mov	r1, r2
 80042a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
 80042ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042b0:	4642      	mov	r2, r8
 80042b2:	464b      	mov	r3, r9
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	0159      	lsls	r1, r3, #5
 80042be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c2:	0150      	lsls	r0, r2, #5
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4641      	mov	r1, r8
 80042ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e8:	ebb2 040a 	subs.w	r4, r2, sl
 80042ec:	eb63 050b 	sbc.w	r5, r3, fp
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	00eb      	lsls	r3, r5, #3
 80042fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042fe:	00e2      	lsls	r2, r4, #3
 8004300:	4614      	mov	r4, r2
 8004302:	461d      	mov	r5, r3
 8004304:	4643      	mov	r3, r8
 8004306:	18e3      	adds	r3, r4, r3
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	464b      	mov	r3, r9
 800430c:	eb45 0303 	adc.w	r3, r5, r3
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800431e:	4629      	mov	r1, r5
 8004320:	028b      	lsls	r3, r1, #10
 8004322:	4621      	mov	r1, r4
 8004324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004328:	4621      	mov	r1, r4
 800432a:	028a      	lsls	r2, r1, #10
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	2200      	movs	r2, #0
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	61fa      	str	r2, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	f7fc fc34 	bl	8000ba8 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x204>)
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800436c:	4618      	mov	r0, r3
 800436e:	3750      	adds	r7, #80	; 0x50
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000008 	.word	0x20000008

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	0800a09c 	.word	0x0800a09c

080043c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c8:	f7ff ffdc 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0b5b      	lsrs	r3, r3, #13
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0800a09c 	.word	0x0800a09c

080043ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e041      	b.n	8004482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fe f9f4 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fd5c 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e041      	b.n	8004520 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f839 	bl	8004528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f000 fd0d 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x24>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e022      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d109      	bne.n	800457a <HAL_TIM_PWM_Start+0x3e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	bf14      	ite	ne
 8004572:	2301      	movne	r3, #1
 8004574:	2300      	moveq	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e015      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d109      	bne.n	8004594 <HAL_TIM_PWM_Start+0x58>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e008      	b.n	80045a6 <HAL_TIM_PWM_Start+0x6a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	bf14      	ite	ne
 80045a0:	2301      	movne	r3, #1
 80045a2:	2300      	moveq	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e07c      	b.n	80046a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start+0x82>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045bc:	e013      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0x92>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	e00b      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0xa2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045dc:	e003      	b.n	80045e6 <HAL_TIM_PWM_Start+0xaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 ff64 	bl	80054bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <HAL_TIM_PWM_Start+0x174>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_PWM_Start+0xcc>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <HAL_TIM_PWM_Start+0x178>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <HAL_TIM_PWM_Start+0xd0>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <HAL_TIM_PWM_Start+0xd2>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <HAL_TIM_PWM_Start+0x174>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d022      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d01d      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_TIM_PWM_Start+0x17c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d018      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1d      	ldr	r2, [pc, #116]	; (80046bc <HAL_TIM_PWM_Start+0x180>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <HAL_TIM_PWM_Start+0x184>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <HAL_TIM_PWM_Start+0x178>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d009      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_TIM_PWM_Start+0x188>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIM_PWM_Start+0x136>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <HAL_TIM_PWM_Start+0x18c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d111      	bne.n	8004696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d010      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004694:	e007      	b.n	80046a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40001800 	.word	0x40001800

080046cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e097      	b.n	8004810 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe f923 	bl	8002940 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004710:	f023 0307 	bic.w	r3, r3, #7
 8004714:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3304      	adds	r3, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4610      	mov	r0, r2
 8004722:	f000 fbe1 	bl	8004ee8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474e:	f023 0303 	bic.w	r3, r3, #3
 8004752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	4313      	orrs	r3, r2
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800476c:	f023 030c 	bic.w	r3, r3, #12
 8004770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004778:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	4313      	orrs	r3, r2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	011a      	lsls	r2, r3, #4
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	031b      	lsls	r3, r3, #12
 800479c:	4313      	orrs	r3, r2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4313      	orrs	r3, r2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004840:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d110      	bne.n	800486a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d102      	bne.n	8004854 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800484e:	7b7b      	ldrb	r3, [r7, #13]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e089      	b.n	800496c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	e031      	b.n	80048ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b04      	cmp	r3, #4
 800486e:	d110      	bne.n	8004892 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d102      	bne.n	800487c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004876:	7b3b      	ldrb	r3, [r7, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e075      	b.n	800496c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	e01d      	b.n	80048ce <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d108      	bne.n	80048aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800489e:	7b7b      	ldrb	r3, [r7, #13]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048a4:	7b3b      	ldrb	r3, [r7, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e05e      	b.n	800496c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_TIM_Encoder_Start_IT+0xc4>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d010      	beq.n	80048fc <HAL_TIM_Encoder_Start_IT+0xe4>
 80048da:	e01f      	b.n	800491c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fde9 	bl	80054bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0202 	orr.w	r2, r2, #2
 80048f8:	60da      	str	r2, [r3, #12]
      break;
 80048fa:	e02e      	b.n	800495a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	2104      	movs	r1, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fdd9 	bl	80054bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0204 	orr.w	r2, r2, #4
 8004918:	60da      	str	r2, [r3, #12]
      break;
 800491a:	e01e      	b.n	800495a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fdc9 	bl	80054bc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2201      	movs	r2, #1
 8004930:	2104      	movs	r1, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fdc2 	bl	80054bc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0202 	orr.w	r2, r2, #2
 8004946:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0204 	orr.w	r2, r2, #4
 8004956:	60da      	str	r2, [r3, #12]
      break;
 8004958:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b02      	cmp	r3, #2
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b02      	cmp	r3, #2
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0202 	mvn.w	r2, #2
 80049a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fa78 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa73 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa7a 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0204 	mvn.w	r2, #4
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2202      	movs	r2, #2
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc fa4e 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa49 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa50 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0208 	mvn.w	r2, #8
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc fa24 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa1f 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa26 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0210 	mvn.w	r2, #16
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc f9fa 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f9f5 	bl	8004eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f9fc 	bl	8004ebe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d10e      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d107      	bne.n	8004af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0201 	mvn.w	r2, #1
 8004af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9cf 	bl	8004e96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d10e      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b80      	cmp	r3, #128	; 0x80
 8004b12:	d107      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fdca 	bl	80056b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d10e      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d107      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9c1 	bl	8004ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d10e      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d107      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0220 	mvn.w	r2, #32
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fd94 	bl	80056a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e0ae      	b.n	8004d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	f200 809f 	bhi.w	8004cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004cf1 	.word	0x08004cf1
 8004bc0:	08004cf1 	.word	0x08004cf1
 8004bc4:	08004cf1 	.word	0x08004cf1
 8004bc8:	08004c2d 	.word	0x08004c2d
 8004bcc:	08004cf1 	.word	0x08004cf1
 8004bd0:	08004cf1 	.word	0x08004cf1
 8004bd4:	08004cf1 	.word	0x08004cf1
 8004bd8:	08004c6f 	.word	0x08004c6f
 8004bdc:	08004cf1 	.word	0x08004cf1
 8004be0:	08004cf1 	.word	0x08004cf1
 8004be4:	08004cf1 	.word	0x08004cf1
 8004be8:	08004caf 	.word	0x08004caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa18 	bl	8005028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0204 	bic.w	r2, r2, #4
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	619a      	str	r2, [r3, #24]
      break;
 8004c2a:	e064      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fa68 	bl	8005108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6999      	ldr	r1, [r3, #24]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	619a      	str	r2, [r3, #24]
      break;
 8004c6c:	e043      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fabd 	bl	80051f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0208 	orr.w	r2, r2, #8
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0204 	bic.w	r2, r2, #4
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	61da      	str	r2, [r3, #28]
      break;
 8004cac:	e023      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fb11 	bl	80052dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	61da      	str	r2, [r3, #28]
      break;
 8004cee:	e002      	b.n	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_ConfigClockSource+0x1c>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0b4      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x186>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5c:	d03e      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0xd4>
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d62:	f200 8087 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d6a:	f000 8086 	beq.w	8004e7a <HAL_TIM_ConfigClockSource+0x172>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d72:	d87f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d74:	2b70      	cmp	r3, #112	; 0x70
 8004d76:	d01a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xa6>
 8004d78:	2b70      	cmp	r3, #112	; 0x70
 8004d7a:	d87b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7c:	2b60      	cmp	r3, #96	; 0x60
 8004d7e:	d050      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x11a>
 8004d80:	2b60      	cmp	r3, #96	; 0x60
 8004d82:	d877      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b50      	cmp	r3, #80	; 0x50
 8004d86:	d03c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0xfa>
 8004d88:	2b50      	cmp	r3, #80	; 0x50
 8004d8a:	d873      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d058      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x13a>
 8004d90:	2b40      	cmp	r3, #64	; 0x40
 8004d92:	d86f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b30      	cmp	r3, #48	; 0x30
 8004d96:	d064      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004d98:	2b30      	cmp	r3, #48	; 0x30
 8004d9a:	d86b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d060      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d867      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d05c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d05a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	e062      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6899      	ldr	r1, [r3, #8]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f000 fb5d 	bl	800547c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
      break;
 8004dda:	e04f      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f000 fb46 	bl	800547c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e03c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 faba 	bl	8005388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2150      	movs	r1, #80	; 0x50
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb13 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004e20:	e02c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 fad9 	bl	80053e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2160      	movs	r1, #96	; 0x60
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fb03 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004e40:	e01c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 fa9a 	bl	8005388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2140      	movs	r1, #64	; 0x40
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 faf3 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004e60:	e00c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 faea 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8004e72:	e003      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e000      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a40      	ldr	r2, [pc, #256]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3b      	ldr	r2, [pc, #236]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3a      	ldr	r2, [pc, #232]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02b      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d027      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <TIM_Base_SetConfig+0x118>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d023      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2b      	ldr	r2, [pc, #172]	; (8005004 <TIM_Base_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01f      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <TIM_Base_SetConfig+0x120>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01b      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a29      	ldr	r2, [pc, #164]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d017      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a28      	ldr	r2, [pc, #160]	; (8005010 <TIM_Base_SetConfig+0x128>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <TIM_Base_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00f      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_Base_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a25      	ldr	r2, [pc, #148]	; (800501c <TIM_Base_SetConfig+0x134>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a24      	ldr	r2, [pc, #144]	; (8005020 <TIM_Base_SetConfig+0x138>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a23      	ldr	r2, [pc, #140]	; (8005024 <TIM_Base_SetConfig+0x13c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <TIM_Base_SetConfig+0x114>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <TIM_Base_SetConfig+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d103      	bne.n	8004fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	615a      	str	r2, [r3, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40000c00 	.word	0x40000c00
 800500c:	40010400 	.word	0x40010400
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800
 800501c:	40001800 	.word	0x40001800
 8005020:	40001c00 	.word	0x40001c00
 8005024:	40002000 	.word	0x40002000

08005028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0302 	bic.w	r3, r3, #2
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a20      	ldr	r2, [pc, #128]	; (8005100 <TIM_OC1_SetConfig+0xd8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_OC1_SetConfig+0x64>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <TIM_OC1_SetConfig+0xdc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0308 	bic.w	r3, r3, #8
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a15      	ldr	r2, [pc, #84]	; (8005100 <TIM_OC1_SetConfig+0xd8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC1_SetConfig+0x8e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <TIM_OC1_SetConfig+0xdc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d111      	bne.n	80050da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0210 	bic.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	021b      	lsls	r3, r3, #8
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a22      	ldr	r2, [pc, #136]	; (80051ec <TIM_OC2_SetConfig+0xe4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC2_SetConfig+0x68>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <TIM_OC2_SetConfig+0xe8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10d      	bne.n	800518c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <TIM_OC2_SetConfig+0xe4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_OC2_SetConfig+0x94>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a16      	ldr	r2, [pc, #88]	; (80051f0 <TIM_OC2_SetConfig+0xe8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d113      	bne.n	80051c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <TIM_OC3_SetConfig+0xe0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_OC3_SetConfig+0x66>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a20      	ldr	r2, [pc, #128]	; (80052d8 <TIM_OC3_SetConfig+0xe4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10d      	bne.n	8005276 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <TIM_OC3_SetConfig+0xe0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0x92>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <TIM_OC3_SetConfig+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40010400 	.word	0x40010400

080052dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	031b      	lsls	r3, r3, #12
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a12      	ldr	r2, [pc, #72]	; (8005380 <TIM_OC4_SetConfig+0xa4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC4_SetConfig+0x68>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a11      	ldr	r2, [pc, #68]	; (8005384 <TIM_OC4_SetConfig+0xa8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	019b      	lsls	r3, r3, #6
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400

08005388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	f043 0307 	orr.w	r3, r3, #7
 8005468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2201      	movs	r2, #1
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1a      	ldr	r2, [r3, #32]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	43db      	mvns	r3, r3
 80054de:	401a      	ands	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800551c:	2302      	movs	r3, #2
 800551e:	e05a      	b.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d022      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d01d      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1d      	ldr	r2, [pc, #116]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d018      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00e      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d004      	beq.n	80055aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d10c      	bne.n	80055c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40000400 	.word	0x40000400
 80055ec:	40000800 	.word	0x40000800
 80055f0:	40000c00 	.word	0x40000c00
 80055f4:	40010400 	.word	0x40010400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40001800 	.word	0x40001800

08005600 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005618:	2302      	movs	r3, #2
 800561a:	e03d      	b.n	8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e03f      	b.n	800575e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fd fa52 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2224      	movs	r2, #36	; 0x24
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800570e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fd7b 	bl	800620c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08a      	sub	sp, #40	; 0x28
 800576a:	af02      	add	r7, sp, #8
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b20      	cmp	r3, #32
 8005784:	d17c      	bne.n	8005880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_UART_Transmit+0x2c>
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e075      	b.n	8005882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Transmit+0x3e>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e06e      	b.n	8005882 <HAL_UART_Transmit+0x11c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2221      	movs	r2, #33	; 0x21
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057ba:	f7fd fc57 	bl	800306c <HAL_GetTick>
 80057be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d108      	bne.n	80057e8 <HAL_UART_Transmit+0x82>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	e003      	b.n	80057f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057f8:	e02a      	b.n	8005850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 faf9 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e036      	b.n	8005882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	3302      	adds	r3, #2
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	e007      	b.n	8005842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	781a      	ldrb	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1cf      	bne.n	80057fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	2140      	movs	r1, #64	; 0x40
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fac9 	bl	8005dfc <UART_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e006      	b.n	8005882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b0ba      	sub	sp, #232	; 0xe8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10f      	bne.n	80058f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <HAL_UART_IRQHandler+0x66>
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fbd3 	bl	8006096 <UART_Receive_IT>
      return;
 80058f0:	e256      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80de 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x22c>
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80d1 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_UART_IRQHandler+0xae>
 8005922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xd2>
 8005946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0202 	orr.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_UART_IRQHandler+0xf6>
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f043 0204 	orr.w	r2, r3, #4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d011      	beq.n	80059b2 <HAL_UART_IRQHandler+0x126>
 800598e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d105      	bne.n	80059a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0208 	orr.w	r2, r3, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 81ed 	beq.w	8005d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_UART_IRQHandler+0x14e>
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb5e 	bl	8006096 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	bf0c      	ite	eq
 80059e8:	2301      	moveq	r3, #1
 80059ea:	2300      	movne	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <HAL_UART_IRQHandler+0x17a>
 80059fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d04f      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa66 	bl	8005ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d141      	bne.n	8005a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d9      	bne.n	8005a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d013      	beq.n	8005a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	4a7d      	ldr	r2, [pc, #500]	; (8005c68 <HAL_UART_IRQHandler+0x3dc>)
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd fca7 	bl	80033ce <HAL_DMA_Abort_IT>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d016      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a90:	4610      	mov	r0, r2
 8005a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e00e      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f99a 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	e00a      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f996 	bl	8005dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa4:	e006      	b.n	8005ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f992 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ab2:	e170      	b.n	8005d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	bf00      	nop
    return;
 8005ab6:	e16e      	b.n	8005d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 814a 	bne.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8143 	beq.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 813c 	beq.w	8005d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	f040 80b4 	bne.w	8005c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8140 	beq.w	8005d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b22:	429a      	cmp	r2, r3
 8005b24:	f080 8139 	bcs.w	8005d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b3a:	f000 8088 	beq.w	8005c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	330c      	adds	r3, #12
 8005b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d9      	bne.n	8005b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e1      	bne.n	8005b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e3      	bne.n	8005bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	f023 0310 	bic.w	r3, r3, #16
 8005c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e3      	bne.n	8005c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fd fb50 	bl	80032ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8c0 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c64:	e099      	b.n	8005d9a <HAL_UART_IRQHandler+0x50e>
 8005c66:	bf00      	nop
 8005c68:	08005f9f 	.word	0x08005f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 808b 	beq.w	8005d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8086 	beq.w	8005d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e3      	bne.n	8005c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3314      	adds	r3, #20
 8005cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cee:	633a      	str	r2, [r7, #48]	; 0x30
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e3      	bne.n	8005cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0310 	bic.w	r3, r3, #16
 8005d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d34:	61fa      	str	r2, [r7, #28]
 8005d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e3      	bne.n	8005d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f848 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d54:	e023      	b.n	8005d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_UART_IRQHandler+0x4ea>
 8005d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f929 	bl	8005fc6 <UART_Transmit_IT>
    return;
 8005d74:	e014      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00e      	beq.n	8005da0 <HAL_UART_IRQHandler+0x514>
 8005d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f969 	bl	8006066 <UART_EndTransmit_IT>
    return;
 8005d94:	e004      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
    return;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
      return;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_UART_IRQHandler+0x514>
      return;
 8005d9e:	bf00      	nop
  }
}
 8005da0:	37e8      	adds	r7, #232	; 0xe8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop

08005da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b090      	sub	sp, #64	; 0x40
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0c:	e050      	b.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d04c      	beq.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e1c:	f7fd f926 	bl	800306c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d241      	bcs.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e4c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e54:	e841 2300 	strex	r3, r2, [r1]
 8005e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e5      	bne.n	8005e2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e80:	623a      	str	r2, [r7, #32]
 8005e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e5      	bne.n	8005e60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e00f      	b.n	8005ed0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d09f      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3740      	adds	r7, #64	; 0x40
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b095      	sub	sp, #84	; 0x54
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f00:	643a      	str	r2, [r7, #64]	; 0x40
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d119      	bne.n	8005f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f70:	61ba      	str	r2, [r7, #24]
 8005f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6979      	ldr	r1, [r7, #20]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f92:	bf00      	nop
 8005f94:	3754      	adds	r7, #84	; 0x54
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff ff09 	bl	8005dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b21      	cmp	r3, #33	; 0x21
 8005fd8:	d13e      	bne.n	8006058 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe2:	d114      	bne.n	800600e <UART_Transmit_IT+0x48>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d110      	bne.n	800600e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006000:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]
 800600c:	e008      	b.n	8006020 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6211      	str	r1, [r2, #32]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10f      	bne.n	8006054 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006042:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe8e 	bl	8005da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b08c      	sub	sp, #48	; 0x30
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b22      	cmp	r3, #34	; 0x22
 80060a8:	f040 80ab 	bne.w	8006202 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b4:	d117      	bne.n	80060e6 <UART_Receive_IT+0x50>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d113      	bne.n	80060e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	1c9a      	adds	r2, r3, #2
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28
 80060e4:	e026      	b.n	8006134 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f8:	d007      	beq.n	800610a <UART_Receive_IT+0x74>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <UART_Receive_IT+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e008      	b.n	800612a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29b      	uxth	r3, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	4619      	mov	r1, r3
 8006142:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006144:	2b00      	cmp	r3, #0
 8006146:	d15a      	bne.n	80061fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0220 	bic.w	r2, r2, #32
 8006156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d135      	bne.n	80061f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	613b      	str	r3, [r7, #16]
   return(result);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	623a      	str	r2, [r7, #32]
 80061b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	69f9      	ldr	r1, [r7, #28]
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d10a      	bne.n	80061e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fdf9 	bl	8005de4 <HAL_UARTEx_RxEventCallback>
 80061f2:	e002      	b.n	80061fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff fde1 	bl	8005dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e002      	b.n	8006204 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e000      	b.n	8006204 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
  }
}
 8006204:	4618      	mov	r0, r3
 8006206:	3730      	adds	r7, #48	; 0x30
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800620c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006210:	b0c0      	sub	sp, #256	; 0x100
 8006212:	af00      	add	r7, sp, #0
 8006214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	68d9      	ldr	r1, [r3, #12]
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	ea40 0301 	orr.w	r3, r0, r1
 8006234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	431a      	orrs	r2, r3
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006264:	f021 010c 	bic.w	r1, r1, #12
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006272:	430b      	orrs	r3, r1
 8006274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	6999      	ldr	r1, [r3, #24]
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	ea40 0301 	orr.w	r3, r0, r1
 8006292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b8f      	ldr	r3, [pc, #572]	; (80064d8 <UART_SetConfig+0x2cc>)
 800629c:	429a      	cmp	r2, r3
 800629e:	d005      	beq.n	80062ac <UART_SetConfig+0xa0>
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b8d      	ldr	r3, [pc, #564]	; (80064dc <UART_SetConfig+0x2d0>)
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d104      	bne.n	80062b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062ac:	f7fe f88a 	bl	80043c4 <HAL_RCC_GetPCLK2Freq>
 80062b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b4:	e003      	b.n	80062be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b6:	f7fe f871 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 80062ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	f040 810c 	bne.w	80064e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	1891      	adds	r1, r2, r2
 80062e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e6:	415b      	adcs	r3, r3
 80062e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ee:	4621      	mov	r1, r4
 80062f0:	eb12 0801 	adds.w	r8, r2, r1
 80062f4:	4629      	mov	r1, r5
 80062f6:	eb43 0901 	adc.w	r9, r3, r1
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800630a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630e:	4690      	mov	r8, r2
 8006310:	4699      	mov	r9, r3
 8006312:	4623      	mov	r3, r4
 8006314:	eb18 0303 	adds.w	r3, r8, r3
 8006318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800631c:	462b      	mov	r3, r5
 800631e:	eb49 0303 	adc.w	r3, r9, r3
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800633a:	460b      	mov	r3, r1
 800633c:	18db      	adds	r3, r3, r3
 800633e:	653b      	str	r3, [r7, #80]	; 0x50
 8006340:	4613      	mov	r3, r2
 8006342:	eb42 0303 	adc.w	r3, r2, r3
 8006346:	657b      	str	r3, [r7, #84]	; 0x54
 8006348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800634c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006350:	f7fa fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4b61      	ldr	r3, [pc, #388]	; (80064e0 <UART_SetConfig+0x2d4>)
 800635a:	fba3 2302 	umull	r2, r3, r3, r2
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	011c      	lsls	r4, r3, #4
 8006362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800636c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006374:	4642      	mov	r2, r8
 8006376:	464b      	mov	r3, r9
 8006378:	1891      	adds	r1, r2, r2
 800637a:	64b9      	str	r1, [r7, #72]	; 0x48
 800637c:	415b      	adcs	r3, r3
 800637e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006384:	4641      	mov	r1, r8
 8006386:	eb12 0a01 	adds.w	sl, r2, r1
 800638a:	4649      	mov	r1, r9
 800638c:	eb43 0b01 	adc.w	fp, r3, r1
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800639c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a4:	4692      	mov	sl, r2
 80063a6:	469b      	mov	fp, r3
 80063a8:	4643      	mov	r3, r8
 80063aa:	eb1a 0303 	adds.w	r3, sl, r3
 80063ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063b2:	464b      	mov	r3, r9
 80063b4:	eb4b 0303 	adc.w	r3, fp, r3
 80063b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063d0:	460b      	mov	r3, r1
 80063d2:	18db      	adds	r3, r3, r3
 80063d4:	643b      	str	r3, [r7, #64]	; 0x40
 80063d6:	4613      	mov	r3, r2
 80063d8:	eb42 0303 	adc.w	r3, r2, r3
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
 80063de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e6:	f7fa fbdf 	bl	8000ba8 <__aeabi_uldivmod>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <UART_SetConfig+0x2d4>)
 80063f2:	fba3 2301 	umull	r2, r3, r3, r1
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2264      	movs	r2, #100	; 0x64
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	1acb      	subs	r3, r1, r3
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006406:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <UART_SetConfig+0x2d4>)
 8006408:	fba3 2302 	umull	r2, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006414:	441c      	add	r4, r3
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006430:	415b      	adcs	r3, r3
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6339      	str	r1, [r7, #48]	; 0x30
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800648c:	460b      	mov	r3, r1
 800648e:	18db      	adds	r3, r3, r3
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	4613      	mov	r3, r2
 8006494:	eb42 0303 	adc.w	r3, r2, r3
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800649a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064a2:	f7fa fb81 	bl	8000ba8 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <UART_SetConfig+0x2d4>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <UART_SetConfig+0x2d4>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 0207 	and.w	r2, r3, #7
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4422      	add	r2, r4
 80064d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d4:	e105      	b.n	80066e2 <UART_SetConfig+0x4d6>
 80064d6:	bf00      	nop
 80064d8:	40011000 	.word	0x40011000
 80064dc:	40011400 	.word	0x40011400
 80064e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f6:	4642      	mov	r2, r8
 80064f8:	464b      	mov	r3, r9
 80064fa:	1891      	adds	r1, r2, r2
 80064fc:	6239      	str	r1, [r7, #32]
 80064fe:	415b      	adcs	r3, r3
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
 8006502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006506:	4641      	mov	r1, r8
 8006508:	1854      	adds	r4, r2, r1
 800650a:	4649      	mov	r1, r9
 800650c:	eb43 0501 	adc.w	r5, r3, r1
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	00eb      	lsls	r3, r5, #3
 800651a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651e:	00e2      	lsls	r2, r4, #3
 8006520:	4614      	mov	r4, r2
 8006522:	461d      	mov	r5, r3
 8006524:	4643      	mov	r3, r8
 8006526:	18e3      	adds	r3, r4, r3
 8006528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800652c:	464b      	mov	r3, r9
 800652e:	eb45 0303 	adc.w	r3, r5, r3
 8006532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006552:	4629      	mov	r1, r5
 8006554:	008b      	lsls	r3, r1, #2
 8006556:	4621      	mov	r1, r4
 8006558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655c:	4621      	mov	r1, r4
 800655e:	008a      	lsls	r2, r1, #2
 8006560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006564:	f7fa fb20 	bl	8000ba8 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4b60      	ldr	r3, [pc, #384]	; (80066f0 <UART_SetConfig+0x4e4>)
 800656e:	fba3 2302 	umull	r2, r3, r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	011c      	lsls	r4, r3, #4
 8006576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	1891      	adds	r1, r2, r2
 800658e:	61b9      	str	r1, [r7, #24]
 8006590:	415b      	adcs	r3, r3
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006598:	4641      	mov	r1, r8
 800659a:	1851      	adds	r1, r2, r1
 800659c:	6139      	str	r1, [r7, #16]
 800659e:	4649      	mov	r1, r9
 80065a0:	414b      	adcs	r3, r1
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b0:	4659      	mov	r1, fp
 80065b2:	00cb      	lsls	r3, r1, #3
 80065b4:	4651      	mov	r1, sl
 80065b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ba:	4651      	mov	r1, sl
 80065bc:	00ca      	lsls	r2, r1, #3
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	4642      	mov	r2, r8
 80065c6:	189b      	adds	r3, r3, r2
 80065c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065cc:	464b      	mov	r3, r9
 80065ce:	460a      	mov	r2, r1
 80065d0:	eb42 0303 	adc.w	r3, r2, r3
 80065d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065f0:	4649      	mov	r1, r9
 80065f2:	008b      	lsls	r3, r1, #2
 80065f4:	4641      	mov	r1, r8
 80065f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fa:	4641      	mov	r1, r8
 80065fc:	008a      	lsls	r2, r1, #2
 80065fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006602:	f7fa fad1 	bl	8000ba8 <__aeabi_uldivmod>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <UART_SetConfig+0x4e4>)
 800660c:	fba3 1302 	umull	r1, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	2164      	movs	r1, #100	; 0x64
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	3332      	adds	r3, #50	; 0x32
 800661e:	4a34      	ldr	r2, [pc, #208]	; (80066f0 <UART_SetConfig+0x4e4>)
 8006620:	fba2 2303 	umull	r2, r3, r2, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800662a:	441c      	add	r4, r3
 800662c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006630:	2200      	movs	r2, #0
 8006632:	673b      	str	r3, [r7, #112]	; 0x70
 8006634:	677a      	str	r2, [r7, #116]	; 0x74
 8006636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800663a:	4642      	mov	r2, r8
 800663c:	464b      	mov	r3, r9
 800663e:	1891      	adds	r1, r2, r2
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	415b      	adcs	r3, r3
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664a:	4641      	mov	r1, r8
 800664c:	1851      	adds	r1, r2, r1
 800664e:	6039      	str	r1, [r7, #0]
 8006650:	4649      	mov	r1, r9
 8006652:	414b      	adcs	r3, r1
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	f04f 0200 	mov.w	r2, #0
 800665a:	f04f 0300 	mov.w	r3, #0
 800665e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006662:	4659      	mov	r1, fp
 8006664:	00cb      	lsls	r3, r1, #3
 8006666:	4651      	mov	r1, sl
 8006668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666c:	4651      	mov	r1, sl
 800666e:	00ca      	lsls	r2, r1, #3
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	4603      	mov	r3, r0
 8006676:	4642      	mov	r2, r8
 8006678:	189b      	adds	r3, r3, r2
 800667a:	66bb      	str	r3, [r7, #104]	; 0x68
 800667c:	464b      	mov	r3, r9
 800667e:	460a      	mov	r2, r1
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	663b      	str	r3, [r7, #96]	; 0x60
 8006690:	667a      	str	r2, [r7, #100]	; 0x64
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669e:	4649      	mov	r1, r9
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4641      	mov	r1, r8
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4641      	mov	r1, r8
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066b0:	f7fa fa7a 	bl	8000ba8 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <UART_SetConfig+0x4e4>)
 80066ba:	fba3 1302 	umull	r1, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2164      	movs	r1, #100	; 0x64
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	3332      	adds	r3, #50	; 0x32
 80066cc:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <UART_SetConfig+0x4e4>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4422      	add	r2, r4
 80066e0:	609a      	str	r2, [r3, #8]
}
 80066e2:	bf00      	nop
 80066e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e8:	46bd      	mov	sp, r7
 80066ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ee:	bf00      	nop
 80066f0:	51eb851f 	.word	0x51eb851f

080066f4 <__errno>:
 80066f4:	4b01      	ldr	r3, [pc, #4]	; (80066fc <__errno+0x8>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000014 	.word	0x20000014

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	; (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	; (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	; (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	; (8006744 <__libc_init_array+0x44>)
 8006714:	f002 ff04 	bl	8009520 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	0800a484 	.word	0x0800a484
 800673c:	0800a484 	.word	0x0800a484
 8006740:	0800a484 	.word	0x0800a484
 8006744:	0800a488 	.word	0x0800a488

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <__cvt>:
 8006758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800675c:	ec55 4b10 	vmov	r4, r5, d0
 8006760:	2d00      	cmp	r5, #0
 8006762:	460e      	mov	r6, r1
 8006764:	4619      	mov	r1, r3
 8006766:	462b      	mov	r3, r5
 8006768:	bfbb      	ittet	lt
 800676a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800676e:	461d      	movlt	r5, r3
 8006770:	2300      	movge	r3, #0
 8006772:	232d      	movlt	r3, #45	; 0x2d
 8006774:	700b      	strb	r3, [r1, #0]
 8006776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006778:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800677c:	4691      	mov	r9, r2
 800677e:	f023 0820 	bic.w	r8, r3, #32
 8006782:	bfbc      	itt	lt
 8006784:	4622      	movlt	r2, r4
 8006786:	4614      	movlt	r4, r2
 8006788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800678c:	d005      	beq.n	800679a <__cvt+0x42>
 800678e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006792:	d100      	bne.n	8006796 <__cvt+0x3e>
 8006794:	3601      	adds	r6, #1
 8006796:	2102      	movs	r1, #2
 8006798:	e000      	b.n	800679c <__cvt+0x44>
 800679a:	2103      	movs	r1, #3
 800679c:	ab03      	add	r3, sp, #12
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	ab02      	add	r3, sp, #8
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	ec45 4b10 	vmov	d0, r4, r5
 80067a8:	4653      	mov	r3, sl
 80067aa:	4632      	mov	r2, r6
 80067ac:	f000 fcec 	bl	8007188 <_dtoa_r>
 80067b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067b4:	4607      	mov	r7, r0
 80067b6:	d102      	bne.n	80067be <__cvt+0x66>
 80067b8:	f019 0f01 	tst.w	r9, #1
 80067bc:	d022      	beq.n	8006804 <__cvt+0xac>
 80067be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067c2:	eb07 0906 	add.w	r9, r7, r6
 80067c6:	d110      	bne.n	80067ea <__cvt+0x92>
 80067c8:	783b      	ldrb	r3, [r7, #0]
 80067ca:	2b30      	cmp	r3, #48	; 0x30
 80067cc:	d10a      	bne.n	80067e4 <__cvt+0x8c>
 80067ce:	2200      	movs	r2, #0
 80067d0:	2300      	movs	r3, #0
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7fa f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80067da:	b918      	cbnz	r0, 80067e4 <__cvt+0x8c>
 80067dc:	f1c6 0601 	rsb	r6, r6, #1
 80067e0:	f8ca 6000 	str.w	r6, [sl]
 80067e4:	f8da 3000 	ldr.w	r3, [sl]
 80067e8:	4499      	add	r9, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	2300      	movs	r3, #0
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7fa f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f6:	b108      	cbz	r0, 80067fc <__cvt+0xa4>
 80067f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067fc:	2230      	movs	r2, #48	; 0x30
 80067fe:	9b03      	ldr	r3, [sp, #12]
 8006800:	454b      	cmp	r3, r9
 8006802:	d307      	bcc.n	8006814 <__cvt+0xbc>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006808:	1bdb      	subs	r3, r3, r7
 800680a:	4638      	mov	r0, r7
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	b004      	add	sp, #16
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	9103      	str	r1, [sp, #12]
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	e7f0      	b.n	80067fe <__cvt+0xa6>

0800681c <__exponent>:
 800681c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800681e:	4603      	mov	r3, r0
 8006820:	2900      	cmp	r1, #0
 8006822:	bfb8      	it	lt
 8006824:	4249      	neglt	r1, r1
 8006826:	f803 2b02 	strb.w	r2, [r3], #2
 800682a:	bfb4      	ite	lt
 800682c:	222d      	movlt	r2, #45	; 0x2d
 800682e:	222b      	movge	r2, #43	; 0x2b
 8006830:	2909      	cmp	r1, #9
 8006832:	7042      	strb	r2, [r0, #1]
 8006834:	dd2a      	ble.n	800688c <__exponent+0x70>
 8006836:	f10d 0407 	add.w	r4, sp, #7
 800683a:	46a4      	mov	ip, r4
 800683c:	270a      	movs	r7, #10
 800683e:	46a6      	mov	lr, r4
 8006840:	460a      	mov	r2, r1
 8006842:	fb91 f6f7 	sdiv	r6, r1, r7
 8006846:	fb07 1516 	mls	r5, r7, r6, r1
 800684a:	3530      	adds	r5, #48	; 0x30
 800684c:	2a63      	cmp	r2, #99	; 0x63
 800684e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006852:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006856:	4631      	mov	r1, r6
 8006858:	dcf1      	bgt.n	800683e <__exponent+0x22>
 800685a:	3130      	adds	r1, #48	; 0x30
 800685c:	f1ae 0502 	sub.w	r5, lr, #2
 8006860:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006864:	1c44      	adds	r4, r0, #1
 8006866:	4629      	mov	r1, r5
 8006868:	4561      	cmp	r1, ip
 800686a:	d30a      	bcc.n	8006882 <__exponent+0x66>
 800686c:	f10d 0209 	add.w	r2, sp, #9
 8006870:	eba2 020e 	sub.w	r2, r2, lr
 8006874:	4565      	cmp	r5, ip
 8006876:	bf88      	it	hi
 8006878:	2200      	movhi	r2, #0
 800687a:	4413      	add	r3, r2
 800687c:	1a18      	subs	r0, r3, r0
 800687e:	b003      	add	sp, #12
 8006880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006886:	f804 2f01 	strb.w	r2, [r4, #1]!
 800688a:	e7ed      	b.n	8006868 <__exponent+0x4c>
 800688c:	2330      	movs	r3, #48	; 0x30
 800688e:	3130      	adds	r1, #48	; 0x30
 8006890:	7083      	strb	r3, [r0, #2]
 8006892:	70c1      	strb	r1, [r0, #3]
 8006894:	1d03      	adds	r3, r0, #4
 8006896:	e7f1      	b.n	800687c <__exponent+0x60>

08006898 <_printf_float>:
 8006898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689c:	ed2d 8b02 	vpush	{d8}
 80068a0:	b08d      	sub	sp, #52	; 0x34
 80068a2:	460c      	mov	r4, r1
 80068a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068a8:	4616      	mov	r6, r2
 80068aa:	461f      	mov	r7, r3
 80068ac:	4605      	mov	r5, r0
 80068ae:	f001 fa59 	bl	8007d64 <_localeconv_r>
 80068b2:	f8d0 a000 	ldr.w	sl, [r0]
 80068b6:	4650      	mov	r0, sl
 80068b8:	f7f9 fc8a 	bl	80001d0 <strlen>
 80068bc:	2300      	movs	r3, #0
 80068be:	930a      	str	r3, [sp, #40]	; 0x28
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	9305      	str	r3, [sp, #20]
 80068c4:	f8d8 3000 	ldr.w	r3, [r8]
 80068c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068cc:	3307      	adds	r3, #7
 80068ce:	f023 0307 	bic.w	r3, r3, #7
 80068d2:	f103 0208 	add.w	r2, r3, #8
 80068d6:	f8c8 2000 	str.w	r2, [r8]
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f0:	ee08 0a10 	vmov	s16, r0
 80068f4:	4b9f      	ldr	r3, [pc, #636]	; (8006b74 <_printf_float+0x2dc>)
 80068f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	f7fa f915 	bl	8000b2c <__aeabi_dcmpun>
 8006902:	bb88      	cbnz	r0, 8006968 <_printf_float+0xd0>
 8006904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006908:	4b9a      	ldr	r3, [pc, #616]	; (8006b74 <_printf_float+0x2dc>)
 800690a:	f04f 32ff 	mov.w	r2, #4294967295
 800690e:	f7fa f8ef 	bl	8000af0 <__aeabi_dcmple>
 8006912:	bb48      	cbnz	r0, 8006968 <_printf_float+0xd0>
 8006914:	2200      	movs	r2, #0
 8006916:	2300      	movs	r3, #0
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7fa f8de 	bl	8000adc <__aeabi_dcmplt>
 8006920:	b110      	cbz	r0, 8006928 <_printf_float+0x90>
 8006922:	232d      	movs	r3, #45	; 0x2d
 8006924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006928:	4b93      	ldr	r3, [pc, #588]	; (8006b78 <_printf_float+0x2e0>)
 800692a:	4894      	ldr	r0, [pc, #592]	; (8006b7c <_printf_float+0x2e4>)
 800692c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006930:	bf94      	ite	ls
 8006932:	4698      	movls	r8, r3
 8006934:	4680      	movhi	r8, r0
 8006936:	2303      	movs	r3, #3
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	9b05      	ldr	r3, [sp, #20]
 800693c:	f023 0204 	bic.w	r2, r3, #4
 8006940:	6022      	str	r2, [r4, #0]
 8006942:	f04f 0900 	mov.w	r9, #0
 8006946:	9700      	str	r7, [sp, #0]
 8006948:	4633      	mov	r3, r6
 800694a:	aa0b      	add	r2, sp, #44	; 0x2c
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f000 f9d8 	bl	8006d04 <_printf_common>
 8006954:	3001      	adds	r0, #1
 8006956:	f040 8090 	bne.w	8006a7a <_printf_float+0x1e2>
 800695a:	f04f 30ff 	mov.w	r0, #4294967295
 800695e:	b00d      	add	sp, #52	; 0x34
 8006960:	ecbd 8b02 	vpop	{d8}
 8006964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7fa f8dc 	bl	8000b2c <__aeabi_dcmpun>
 8006974:	b140      	cbz	r0, 8006988 <_printf_float+0xf0>
 8006976:	464b      	mov	r3, r9
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfbc      	itt	lt
 800697c:	232d      	movlt	r3, #45	; 0x2d
 800697e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006982:	487f      	ldr	r0, [pc, #508]	; (8006b80 <_printf_float+0x2e8>)
 8006984:	4b7f      	ldr	r3, [pc, #508]	; (8006b84 <_printf_float+0x2ec>)
 8006986:	e7d1      	b.n	800692c <_printf_float+0x94>
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800698e:	9206      	str	r2, [sp, #24]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	d13f      	bne.n	8006a14 <_printf_float+0x17c>
 8006994:	2306      	movs	r3, #6
 8006996:	6063      	str	r3, [r4, #4]
 8006998:	9b05      	ldr	r3, [sp, #20]
 800699a:	6861      	ldr	r1, [r4, #4]
 800699c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069a0:	2300      	movs	r3, #0
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	ab0a      	add	r3, sp, #40	; 0x28
 80069a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069aa:	ab09      	add	r3, sp, #36	; 0x24
 80069ac:	ec49 8b10 	vmov	d0, r8, r9
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7ff fecd 	bl	8006758 <__cvt>
 80069be:	9b06      	ldr	r3, [sp, #24]
 80069c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c2:	2b47      	cmp	r3, #71	; 0x47
 80069c4:	4680      	mov	r8, r0
 80069c6:	d108      	bne.n	80069da <_printf_float+0x142>
 80069c8:	1cc8      	adds	r0, r1, #3
 80069ca:	db02      	blt.n	80069d2 <_printf_float+0x13a>
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	dd41      	ble.n	8006a56 <_printf_float+0x1be>
 80069d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80069d6:	fa5f fb8b 	uxtb.w	fp, fp
 80069da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069de:	d820      	bhi.n	8006a22 <_printf_float+0x18a>
 80069e0:	3901      	subs	r1, #1
 80069e2:	465a      	mov	r2, fp
 80069e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069e8:	9109      	str	r1, [sp, #36]	; 0x24
 80069ea:	f7ff ff17 	bl	800681c <__exponent>
 80069ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f0:	1813      	adds	r3, r2, r0
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	4681      	mov	r9, r0
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	dc02      	bgt.n	8006a00 <_printf_float+0x168>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	07d2      	lsls	r2, r2, #31
 80069fe:	d501      	bpl.n	8006a04 <_printf_float+0x16c>
 8006a00:	3301      	adds	r3, #1
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d09c      	beq.n	8006946 <_printf_float+0xae>
 8006a0c:	232d      	movs	r3, #45	; 0x2d
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a12:	e798      	b.n	8006946 <_printf_float+0xae>
 8006a14:	9a06      	ldr	r2, [sp, #24]
 8006a16:	2a47      	cmp	r2, #71	; 0x47
 8006a18:	d1be      	bne.n	8006998 <_printf_float+0x100>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1bc      	bne.n	8006998 <_printf_float+0x100>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7b9      	b.n	8006996 <_printf_float+0xfe>
 8006a22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a26:	d118      	bne.n	8006a5a <_printf_float+0x1c2>
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	6863      	ldr	r3, [r4, #4]
 8006a2c:	dd0b      	ble.n	8006a46 <_printf_float+0x1ae>
 8006a2e:	6121      	str	r1, [r4, #16]
 8006a30:	b913      	cbnz	r3, 8006a38 <_printf_float+0x1a0>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	07d0      	lsls	r0, r2, #31
 8006a36:	d502      	bpl.n	8006a3e <_printf_float+0x1a6>
 8006a38:	3301      	adds	r3, #1
 8006a3a:	440b      	add	r3, r1
 8006a3c:	6123      	str	r3, [r4, #16]
 8006a3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a40:	f04f 0900 	mov.w	r9, #0
 8006a44:	e7de      	b.n	8006a04 <_printf_float+0x16c>
 8006a46:	b913      	cbnz	r3, 8006a4e <_printf_float+0x1b6>
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	07d2      	lsls	r2, r2, #31
 8006a4c:	d501      	bpl.n	8006a52 <_printf_float+0x1ba>
 8006a4e:	3302      	adds	r3, #2
 8006a50:	e7f4      	b.n	8006a3c <_printf_float+0x1a4>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7f2      	b.n	8006a3c <_printf_float+0x1a4>
 8006a56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	db05      	blt.n	8006a6c <_printf_float+0x1d4>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	6121      	str	r1, [r4, #16]
 8006a64:	07d8      	lsls	r0, r3, #31
 8006a66:	d5ea      	bpl.n	8006a3e <_printf_float+0x1a6>
 8006a68:	1c4b      	adds	r3, r1, #1
 8006a6a:	e7e7      	b.n	8006a3c <_printf_float+0x1a4>
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	bfd4      	ite	le
 8006a70:	f1c1 0202 	rsble	r2, r1, #2
 8006a74:	2201      	movgt	r2, #1
 8006a76:	4413      	add	r3, r2
 8006a78:	e7e0      	b.n	8006a3c <_printf_float+0x1a4>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	055a      	lsls	r2, r3, #21
 8006a7e:	d407      	bmi.n	8006a90 <_printf_float+0x1f8>
 8006a80:	6923      	ldr	r3, [r4, #16]
 8006a82:	4642      	mov	r2, r8
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d12c      	bne.n	8006ae8 <_printf_float+0x250>
 8006a8e:	e764      	b.n	800695a <_printf_float+0xc2>
 8006a90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a94:	f240 80e0 	bls.w	8006c58 <_printf_float+0x3c0>
 8006a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f7fa f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d034      	beq.n	8006b12 <_printf_float+0x27a>
 8006aa8:	4a37      	ldr	r2, [pc, #220]	; (8006b88 <_printf_float+0x2f0>)
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	47b8      	blx	r7
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	f43f af51 	beq.w	800695a <_printf_float+0xc2>
 8006ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006abc:	429a      	cmp	r2, r3
 8006abe:	db02      	blt.n	8006ac6 <_printf_float+0x22e>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	07d8      	lsls	r0, r3, #31
 8006ac4:	d510      	bpl.n	8006ae8 <_printf_float+0x250>
 8006ac6:	ee18 3a10 	vmov	r3, s16
 8006aca:	4652      	mov	r2, sl
 8006acc:	4631      	mov	r1, r6
 8006ace:	4628      	mov	r0, r5
 8006ad0:	47b8      	blx	r7
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	f43f af41 	beq.w	800695a <_printf_float+0xc2>
 8006ad8:	f04f 0800 	mov.w	r8, #0
 8006adc:	f104 091a 	add.w	r9, r4, #26
 8006ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	dc09      	bgt.n	8006afc <_printf_float+0x264>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	079b      	lsls	r3, r3, #30
 8006aec:	f100 8105 	bmi.w	8006cfa <_printf_float+0x462>
 8006af0:	68e0      	ldr	r0, [r4, #12]
 8006af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af4:	4298      	cmp	r0, r3
 8006af6:	bfb8      	it	lt
 8006af8:	4618      	movlt	r0, r3
 8006afa:	e730      	b.n	800695e <_printf_float+0xc6>
 8006afc:	2301      	movs	r3, #1
 8006afe:	464a      	mov	r2, r9
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	f43f af27 	beq.w	800695a <_printf_float+0xc2>
 8006b0c:	f108 0801 	add.w	r8, r8, #1
 8006b10:	e7e6      	b.n	8006ae0 <_printf_float+0x248>
 8006b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc39      	bgt.n	8006b8c <_printf_float+0x2f4>
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <_printf_float+0x2f0>)
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	f43f af19 	beq.w	800695a <_printf_float+0xc2>
 8006b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	d102      	bne.n	8006b36 <_printf_float+0x29e>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	07d9      	lsls	r1, r3, #31
 8006b34:	d5d8      	bpl.n	8006ae8 <_printf_float+0x250>
 8006b36:	ee18 3a10 	vmov	r3, s16
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af09 	beq.w	800695a <_printf_float+0xc2>
 8006b48:	f04f 0900 	mov.w	r9, #0
 8006b4c:	f104 0a1a 	add.w	sl, r4, #26
 8006b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b52:	425b      	negs	r3, r3
 8006b54:	454b      	cmp	r3, r9
 8006b56:	dc01      	bgt.n	8006b5c <_printf_float+0x2c4>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	e792      	b.n	8006a82 <_printf_float+0x1ea>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	4652      	mov	r2, sl
 8006b60:	4631      	mov	r1, r6
 8006b62:	4628      	mov	r0, r5
 8006b64:	47b8      	blx	r7
 8006b66:	3001      	adds	r0, #1
 8006b68:	f43f aef7 	beq.w	800695a <_printf_float+0xc2>
 8006b6c:	f109 0901 	add.w	r9, r9, #1
 8006b70:	e7ee      	b.n	8006b50 <_printf_float+0x2b8>
 8006b72:	bf00      	nop
 8006b74:	7fefffff 	.word	0x7fefffff
 8006b78:	0800a0a8 	.word	0x0800a0a8
 8006b7c:	0800a0ac 	.word	0x0800a0ac
 8006b80:	0800a0b4 	.word	0x0800a0b4
 8006b84:	0800a0b0 	.word	0x0800a0b0
 8006b88:	0800a0b8 	.word	0x0800a0b8
 8006b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bfa8      	it	ge
 8006b94:	461a      	movge	r2, r3
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	4691      	mov	r9, r2
 8006b9a:	dc37      	bgt.n	8006c0c <_printf_float+0x374>
 8006b9c:	f04f 0b00 	mov.w	fp, #0
 8006ba0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba4:	f104 021a 	add.w	r2, r4, #26
 8006ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006baa:	9305      	str	r3, [sp, #20]
 8006bac:	eba3 0309 	sub.w	r3, r3, r9
 8006bb0:	455b      	cmp	r3, fp
 8006bb2:	dc33      	bgt.n	8006c1c <_printf_float+0x384>
 8006bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	db3b      	blt.n	8006c34 <_printf_float+0x39c>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	07da      	lsls	r2, r3, #31
 8006bc0:	d438      	bmi.n	8006c34 <_printf_float+0x39c>
 8006bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc4:	9a05      	ldr	r2, [sp, #20]
 8006bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bc8:	1a9a      	subs	r2, r3, r2
 8006bca:	eba3 0901 	sub.w	r9, r3, r1
 8006bce:	4591      	cmp	r9, r2
 8006bd0:	bfa8      	it	ge
 8006bd2:	4691      	movge	r9, r2
 8006bd4:	f1b9 0f00 	cmp.w	r9, #0
 8006bd8:	dc35      	bgt.n	8006c46 <_printf_float+0x3ae>
 8006bda:	f04f 0800 	mov.w	r8, #0
 8006bde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be2:	f104 0a1a 	add.w	sl, r4, #26
 8006be6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	eba3 0309 	sub.w	r3, r3, r9
 8006bf0:	4543      	cmp	r3, r8
 8006bf2:	f77f af79 	ble.w	8006ae8 <_printf_float+0x250>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4652      	mov	r2, sl
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f aeaa 	beq.w	800695a <_printf_float+0xc2>
 8006c06:	f108 0801 	add.w	r8, r8, #1
 8006c0a:	e7ec      	b.n	8006be6 <_printf_float+0x34e>
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4642      	mov	r2, r8
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	d1c0      	bne.n	8006b9c <_printf_float+0x304>
 8006c1a:	e69e      	b.n	800695a <_printf_float+0xc2>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4631      	mov	r1, r6
 8006c20:	4628      	mov	r0, r5
 8006c22:	9205      	str	r2, [sp, #20]
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	f43f ae97 	beq.w	800695a <_printf_float+0xc2>
 8006c2c:	9a05      	ldr	r2, [sp, #20]
 8006c2e:	f10b 0b01 	add.w	fp, fp, #1
 8006c32:	e7b9      	b.n	8006ba8 <_printf_float+0x310>
 8006c34:	ee18 3a10 	vmov	r3, s16
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d1be      	bne.n	8006bc2 <_printf_float+0x32a>
 8006c44:	e689      	b.n	800695a <_printf_float+0xc2>
 8006c46:	9a05      	ldr	r2, [sp, #20]
 8006c48:	464b      	mov	r3, r9
 8006c4a:	4442      	add	r2, r8
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	d1c1      	bne.n	8006bda <_printf_float+0x342>
 8006c56:	e680      	b.n	800695a <_printf_float+0xc2>
 8006c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	dc01      	bgt.n	8006c62 <_printf_float+0x3ca>
 8006c5e:	07db      	lsls	r3, r3, #31
 8006c60:	d538      	bpl.n	8006cd4 <_printf_float+0x43c>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4642      	mov	r2, r8
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae74 	beq.w	800695a <_printf_float+0xc2>
 8006c72:	ee18 3a10 	vmov	r3, s16
 8006c76:	4652      	mov	r2, sl
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f43f ae6b 	beq.w	800695a <_printf_float+0xc2>
 8006c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f7f9 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c90:	b9d8      	cbnz	r0, 8006cca <_printf_float+0x432>
 8006c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c94:	f108 0201 	add.w	r2, r8, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d10e      	bne.n	8006cc2 <_printf_float+0x42a>
 8006ca4:	e659      	b.n	800695a <_printf_float+0xc2>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f ae52 	beq.w	800695a <_printf_float+0xc2>
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	4543      	cmp	r3, r8
 8006cc0:	dcf1      	bgt.n	8006ca6 <_printf_float+0x40e>
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cc8:	e6dc      	b.n	8006a84 <_printf_float+0x1ec>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f104 0a1a 	add.w	sl, r4, #26
 8006cd2:	e7f2      	b.n	8006cba <_printf_float+0x422>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	e7df      	b.n	8006c9a <_printf_float+0x402>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	464a      	mov	r2, r9
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f ae38 	beq.w	800695a <_printf_float+0xc2>
 8006cea:	f108 0801 	add.w	r8, r8, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	4543      	cmp	r3, r8
 8006cf6:	dcf0      	bgt.n	8006cda <_printf_float+0x442>
 8006cf8:	e6fa      	b.n	8006af0 <_printf_float+0x258>
 8006cfa:	f04f 0800 	mov.w	r8, #0
 8006cfe:	f104 0919 	add.w	r9, r4, #25
 8006d02:	e7f4      	b.n	8006cee <_printf_float+0x456>

08006d04 <_printf_common>:
 8006d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	4616      	mov	r6, r2
 8006d0a:	4699      	mov	r9, r3
 8006d0c:	688a      	ldr	r2, [r1, #8]
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bfb8      	it	lt
 8006d18:	4613      	movlt	r3, r2
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d20:	4607      	mov	r7, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	b10a      	cbz	r2, 8006d2a <_printf_common+0x26>
 8006d26:	3301      	adds	r3, #1
 8006d28:	6033      	str	r3, [r6, #0]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	0699      	lsls	r1, r3, #26
 8006d2e:	bf42      	ittt	mi
 8006d30:	6833      	ldrmi	r3, [r6, #0]
 8006d32:	3302      	addmi	r3, #2
 8006d34:	6033      	strmi	r3, [r6, #0]
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	f015 0506 	ands.w	r5, r5, #6
 8006d3c:	d106      	bne.n	8006d4c <_printf_common+0x48>
 8006d3e:	f104 0a19 	add.w	sl, r4, #25
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	6832      	ldr	r2, [r6, #0]
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dc26      	bgt.n	8006d9a <_printf_common+0x96>
 8006d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d50:	1e13      	subs	r3, r2, #0
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	bf18      	it	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	0692      	lsls	r2, r2, #26
 8006d5a:	d42b      	bmi.n	8006db4 <_printf_common+0xb0>
 8006d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d60:	4649      	mov	r1, r9
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c0      	blx	r8
 8006d66:	3001      	adds	r0, #1
 8006d68:	d01e      	beq.n	8006da8 <_printf_common+0xa4>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	68e5      	ldr	r5, [r4, #12]
 8006d6e:	6832      	ldr	r2, [r6, #0]
 8006d70:	f003 0306 	and.w	r3, r3, #6
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	bf08      	it	eq
 8006d78:	1aad      	subeq	r5, r5, r2
 8006d7a:	68a3      	ldr	r3, [r4, #8]
 8006d7c:	6922      	ldr	r2, [r4, #16]
 8006d7e:	bf0c      	ite	eq
 8006d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d84:	2500      	movne	r5, #0
 8006d86:	4293      	cmp	r3, r2
 8006d88:	bfc4      	itt	gt
 8006d8a:	1a9b      	subgt	r3, r3, r2
 8006d8c:	18ed      	addgt	r5, r5, r3
 8006d8e:	2600      	movs	r6, #0
 8006d90:	341a      	adds	r4, #26
 8006d92:	42b5      	cmp	r5, r6
 8006d94:	d11a      	bne.n	8006dcc <_printf_common+0xc8>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e008      	b.n	8006dac <_printf_common+0xa8>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4638      	mov	r0, r7
 8006da2:	47c0      	blx	r8
 8006da4:	3001      	adds	r0, #1
 8006da6:	d103      	bne.n	8006db0 <_printf_common+0xac>
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	3501      	adds	r5, #1
 8006db2:	e7c6      	b.n	8006d42 <_printf_common+0x3e>
 8006db4:	18e1      	adds	r1, r4, r3
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	2030      	movs	r0, #48	; 0x30
 8006dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dbe:	4422      	add	r2, r4
 8006dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dc8:	3302      	adds	r3, #2
 8006dca:	e7c7      	b.n	8006d5c <_printf_common+0x58>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4649      	mov	r1, r9
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	47c0      	blx	r8
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d0e6      	beq.n	8006da8 <_printf_common+0xa4>
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7d9      	b.n	8006d92 <_printf_common+0x8e>
	...

08006de0 <_printf_i>:
 8006de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	7e0f      	ldrb	r7, [r1, #24]
 8006de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006de8:	2f78      	cmp	r7, #120	; 0x78
 8006dea:	4691      	mov	r9, r2
 8006dec:	4680      	mov	r8, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	469a      	mov	sl, r3
 8006df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006df6:	d807      	bhi.n	8006e08 <_printf_i+0x28>
 8006df8:	2f62      	cmp	r7, #98	; 0x62
 8006dfa:	d80a      	bhi.n	8006e12 <_printf_i+0x32>
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	f000 80d8 	beq.w	8006fb2 <_printf_i+0x1d2>
 8006e02:	2f58      	cmp	r7, #88	; 0x58
 8006e04:	f000 80a3 	beq.w	8006f4e <_printf_i+0x16e>
 8006e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e10:	e03a      	b.n	8006e88 <_printf_i+0xa8>
 8006e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e16:	2b15      	cmp	r3, #21
 8006e18:	d8f6      	bhi.n	8006e08 <_printf_i+0x28>
 8006e1a:	a101      	add	r1, pc, #4	; (adr r1, 8006e20 <_printf_i+0x40>)
 8006e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e09 	.word	0x08006e09
 8006e2c:	08006e09 	.word	0x08006e09
 8006e30:	08006e09 	.word	0x08006e09
 8006e34:	08006e09 	.word	0x08006e09
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006e09 	.word	0x08006e09
 8006e40:	08006e09 	.word	0x08006e09
 8006e44:	08006e09 	.word	0x08006e09
 8006e48:	08006e09 	.word	0x08006e09
 8006e4c:	08006f99 	.word	0x08006f99
 8006e50:	08006ebd 	.word	0x08006ebd
 8006e54:	08006f7b 	.word	0x08006f7b
 8006e58:	08006e09 	.word	0x08006e09
 8006e5c:	08006e09 	.word	0x08006e09
 8006e60:	08006fbb 	.word	0x08006fbb
 8006e64:	08006e09 	.word	0x08006e09
 8006e68:	08006ebd 	.word	0x08006ebd
 8006e6c:	08006e09 	.word	0x08006e09
 8006e70:	08006e09 	.word	0x08006e09
 8006e74:	08006f83 	.word	0x08006f83
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	1d1a      	adds	r2, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	602a      	str	r2, [r5, #0]
 8006e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0a3      	b.n	8006fd4 <_printf_i+0x1f4>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	6829      	ldr	r1, [r5, #0]
 8006e90:	0606      	lsls	r6, r0, #24
 8006e92:	f101 0304 	add.w	r3, r1, #4
 8006e96:	d50a      	bpl.n	8006eae <_printf_i+0xce>
 8006e98:	680e      	ldr	r6, [r1, #0]
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	da03      	bge.n	8006ea8 <_printf_i+0xc8>
 8006ea0:	232d      	movs	r3, #45	; 0x2d
 8006ea2:	4276      	negs	r6, r6
 8006ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea8:	485e      	ldr	r0, [pc, #376]	; (8007024 <_printf_i+0x244>)
 8006eaa:	230a      	movs	r3, #10
 8006eac:	e019      	b.n	8006ee2 <_printf_i+0x102>
 8006eae:	680e      	ldr	r6, [r1, #0]
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eb6:	bf18      	it	ne
 8006eb8:	b236      	sxthne	r6, r6
 8006eba:	e7ef      	b.n	8006e9c <_printf_i+0xbc>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	6820      	ldr	r0, [r4, #0]
 8006ec0:	1d19      	adds	r1, r3, #4
 8006ec2:	6029      	str	r1, [r5, #0]
 8006ec4:	0601      	lsls	r1, r0, #24
 8006ec6:	d501      	bpl.n	8006ecc <_printf_i+0xec>
 8006ec8:	681e      	ldr	r6, [r3, #0]
 8006eca:	e002      	b.n	8006ed2 <_printf_i+0xf2>
 8006ecc:	0646      	lsls	r6, r0, #25
 8006ece:	d5fb      	bpl.n	8006ec8 <_printf_i+0xe8>
 8006ed0:	881e      	ldrh	r6, [r3, #0]
 8006ed2:	4854      	ldr	r0, [pc, #336]	; (8007024 <_printf_i+0x244>)
 8006ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2308      	moveq	r3, #8
 8006eda:	230a      	movne	r3, #10
 8006edc:	2100      	movs	r1, #0
 8006ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee2:	6865      	ldr	r5, [r4, #4]
 8006ee4:	60a5      	str	r5, [r4, #8]
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	bfa2      	ittt	ge
 8006eea:	6821      	ldrge	r1, [r4, #0]
 8006eec:	f021 0104 	bicge.w	r1, r1, #4
 8006ef0:	6021      	strge	r1, [r4, #0]
 8006ef2:	b90e      	cbnz	r6, 8006ef8 <_printf_i+0x118>
 8006ef4:	2d00      	cmp	r5, #0
 8006ef6:	d04d      	beq.n	8006f94 <_printf_i+0x1b4>
 8006ef8:	4615      	mov	r5, r2
 8006efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006efe:	fb03 6711 	mls	r7, r3, r1, r6
 8006f02:	5dc7      	ldrb	r7, [r0, r7]
 8006f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f08:	4637      	mov	r7, r6
 8006f0a:	42bb      	cmp	r3, r7
 8006f0c:	460e      	mov	r6, r1
 8006f0e:	d9f4      	bls.n	8006efa <_printf_i+0x11a>
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d10b      	bne.n	8006f2c <_printf_i+0x14c>
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	07de      	lsls	r6, r3, #31
 8006f18:	d508      	bpl.n	8006f2c <_printf_i+0x14c>
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	6861      	ldr	r1, [r4, #4]
 8006f1e:	4299      	cmp	r1, r3
 8006f20:	bfde      	ittt	le
 8006f22:	2330      	movle	r3, #48	; 0x30
 8006f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f2c:	1b52      	subs	r2, r2, r5
 8006f2e:	6122      	str	r2, [r4, #16]
 8006f30:	f8cd a000 	str.w	sl, [sp]
 8006f34:	464b      	mov	r3, r9
 8006f36:	aa03      	add	r2, sp, #12
 8006f38:	4621      	mov	r1, r4
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	f7ff fee2 	bl	8006d04 <_printf_common>
 8006f40:	3001      	adds	r0, #1
 8006f42:	d14c      	bne.n	8006fde <_printf_i+0x1fe>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	b004      	add	sp, #16
 8006f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4e:	4835      	ldr	r0, [pc, #212]	; (8007024 <_printf_i+0x244>)
 8006f50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f54:	6829      	ldr	r1, [r5, #0]
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f5c:	6029      	str	r1, [r5, #0]
 8006f5e:	061d      	lsls	r5, r3, #24
 8006f60:	d514      	bpl.n	8006f8c <_printf_i+0x1ac>
 8006f62:	07df      	lsls	r7, r3, #31
 8006f64:	bf44      	itt	mi
 8006f66:	f043 0320 	orrmi.w	r3, r3, #32
 8006f6a:	6023      	strmi	r3, [r4, #0]
 8006f6c:	b91e      	cbnz	r6, 8006f76 <_printf_i+0x196>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	f023 0320 	bic.w	r3, r3, #32
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	2310      	movs	r3, #16
 8006f78:	e7b0      	b.n	8006edc <_printf_i+0xfc>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	f043 0320 	orr.w	r3, r3, #32
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	2378      	movs	r3, #120	; 0x78
 8006f84:	4828      	ldr	r0, [pc, #160]	; (8007028 <_printf_i+0x248>)
 8006f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8a:	e7e3      	b.n	8006f54 <_printf_i+0x174>
 8006f8c:	0659      	lsls	r1, r3, #25
 8006f8e:	bf48      	it	mi
 8006f90:	b2b6      	uxthmi	r6, r6
 8006f92:	e7e6      	b.n	8006f62 <_printf_i+0x182>
 8006f94:	4615      	mov	r5, r2
 8006f96:	e7bb      	b.n	8006f10 <_printf_i+0x130>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	6826      	ldr	r6, [r4, #0]
 8006f9c:	6961      	ldr	r1, [r4, #20]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6028      	str	r0, [r5, #0]
 8006fa2:	0635      	lsls	r5, r6, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1cc>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1d2>
 8006fac:	0670      	lsls	r0, r6, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1c8>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	4615      	mov	r5, r2
 8006fb8:	e7ba      	b.n	8006f30 <_printf_i+0x150>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	681d      	ldr	r5, [r3, #0]
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7f9 f90a 	bl	80001e0 <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1f2>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fdc:	e7a8      	b.n	8006f30 <_printf_i+0x150>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ab      	beq.n	8006f44 <_printf_i+0x164>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x23a>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a4      	b.n	8006f48 <_printf_i+0x168>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09b      	beq.n	8006f44 <_printf_i+0x164>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x21e>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x212>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x22e>
 8007022:	bf00      	nop
 8007024:	0800a0ba 	.word	0x0800a0ba
 8007028:	0800a0cb 	.word	0x0800a0cb

0800702c <siprintf>:
 800702c:	b40e      	push	{r1, r2, r3}
 800702e:	b500      	push	{lr}
 8007030:	b09c      	sub	sp, #112	; 0x70
 8007032:	ab1d      	add	r3, sp, #116	; 0x74
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800703c:	4809      	ldr	r0, [pc, #36]	; (8007064 <siprintf+0x38>)
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	9104      	str	r1, [sp, #16]
 8007042:	4909      	ldr	r1, [pc, #36]	; (8007068 <siprintf+0x3c>)
 8007044:	f853 2b04 	ldr.w	r2, [r3], #4
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	a902      	add	r1, sp, #8
 8007050:	f001 fb78 	bl	8008744 <_svfiprintf_r>
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	b01c      	add	sp, #112	; 0x70
 800705c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007060:	b003      	add	sp, #12
 8007062:	4770      	bx	lr
 8007064:	20000014 	.word	0x20000014
 8007068:	ffff0208 	.word	0xffff0208

0800706c <quorem>:
 800706c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	6903      	ldr	r3, [r0, #16]
 8007072:	690c      	ldr	r4, [r1, #16]
 8007074:	42a3      	cmp	r3, r4
 8007076:	4607      	mov	r7, r0
 8007078:	f2c0 8081 	blt.w	800717e <quorem+0x112>
 800707c:	3c01      	subs	r4, #1
 800707e:	f101 0814 	add.w	r8, r1, #20
 8007082:	f100 0514 	add.w	r5, r0, #20
 8007086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007094:	3301      	adds	r3, #1
 8007096:	429a      	cmp	r2, r3
 8007098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800709c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070a4:	d331      	bcc.n	800710a <quorem+0x9e>
 80070a6:	f04f 0e00 	mov.w	lr, #0
 80070aa:	4640      	mov	r0, r8
 80070ac:	46ac      	mov	ip, r5
 80070ae:	46f2      	mov	sl, lr
 80070b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070b4:	b293      	uxth	r3, r2
 80070b6:	fb06 e303 	mla	r3, r6, r3, lr
 80070ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070be:	b29b      	uxth	r3, r3
 80070c0:	ebaa 0303 	sub.w	r3, sl, r3
 80070c4:	f8dc a000 	ldr.w	sl, [ip]
 80070c8:	0c12      	lsrs	r2, r2, #16
 80070ca:	fa13 f38a 	uxtah	r3, r3, sl
 80070ce:	fb06 e202 	mla	r2, r6, r2, lr
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	9b00      	ldr	r3, [sp, #0]
 80070d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070da:	b292      	uxth	r2, r2
 80070dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80070e8:	4581      	cmp	r9, r0
 80070ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ee:	f84c 3b04 	str.w	r3, [ip], #4
 80070f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070f6:	d2db      	bcs.n	80070b0 <quorem+0x44>
 80070f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80070fc:	b92b      	cbnz	r3, 800710a <quorem+0x9e>
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	3b04      	subs	r3, #4
 8007102:	429d      	cmp	r5, r3
 8007104:	461a      	mov	r2, r3
 8007106:	d32e      	bcc.n	8007166 <quorem+0xfa>
 8007108:	613c      	str	r4, [r7, #16]
 800710a:	4638      	mov	r0, r7
 800710c:	f001 f8c6 	bl	800829c <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	db24      	blt.n	800715e <quorem+0xf2>
 8007114:	3601      	adds	r6, #1
 8007116:	4628      	mov	r0, r5
 8007118:	f04f 0c00 	mov.w	ip, #0
 800711c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007120:	f8d0 e000 	ldr.w	lr, [r0]
 8007124:	b293      	uxth	r3, r2
 8007126:	ebac 0303 	sub.w	r3, ip, r3
 800712a:	0c12      	lsrs	r2, r2, #16
 800712c:	fa13 f38e 	uxtah	r3, r3, lr
 8007130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800713e:	45c1      	cmp	r9, r8
 8007140:	f840 3b04 	str.w	r3, [r0], #4
 8007144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007148:	d2e8      	bcs.n	800711c <quorem+0xb0>
 800714a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800714e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007152:	b922      	cbnz	r2, 800715e <quorem+0xf2>
 8007154:	3b04      	subs	r3, #4
 8007156:	429d      	cmp	r5, r3
 8007158:	461a      	mov	r2, r3
 800715a:	d30a      	bcc.n	8007172 <quorem+0x106>
 800715c:	613c      	str	r4, [r7, #16]
 800715e:	4630      	mov	r0, r6
 8007160:	b003      	add	sp, #12
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	6812      	ldr	r2, [r2, #0]
 8007168:	3b04      	subs	r3, #4
 800716a:	2a00      	cmp	r2, #0
 800716c:	d1cc      	bne.n	8007108 <quorem+0x9c>
 800716e:	3c01      	subs	r4, #1
 8007170:	e7c7      	b.n	8007102 <quorem+0x96>
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	3b04      	subs	r3, #4
 8007176:	2a00      	cmp	r2, #0
 8007178:	d1f0      	bne.n	800715c <quorem+0xf0>
 800717a:	3c01      	subs	r4, #1
 800717c:	e7eb      	b.n	8007156 <quorem+0xea>
 800717e:	2000      	movs	r0, #0
 8007180:	e7ee      	b.n	8007160 <quorem+0xf4>
 8007182:	0000      	movs	r0, r0
 8007184:	0000      	movs	r0, r0
	...

08007188 <_dtoa_r>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	ed2d 8b04 	vpush	{d8-d9}
 8007190:	ec57 6b10 	vmov	r6, r7, d0
 8007194:	b093      	sub	sp, #76	; 0x4c
 8007196:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007198:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800719c:	9106      	str	r1, [sp, #24]
 800719e:	ee10 aa10 	vmov	sl, s0
 80071a2:	4604      	mov	r4, r0
 80071a4:	9209      	str	r2, [sp, #36]	; 0x24
 80071a6:	930c      	str	r3, [sp, #48]	; 0x30
 80071a8:	46bb      	mov	fp, r7
 80071aa:	b975      	cbnz	r5, 80071ca <_dtoa_r+0x42>
 80071ac:	2010      	movs	r0, #16
 80071ae:	f000 fddd 	bl	8007d6c <malloc>
 80071b2:	4602      	mov	r2, r0
 80071b4:	6260      	str	r0, [r4, #36]	; 0x24
 80071b6:	b920      	cbnz	r0, 80071c2 <_dtoa_r+0x3a>
 80071b8:	4ba7      	ldr	r3, [pc, #668]	; (8007458 <_dtoa_r+0x2d0>)
 80071ba:	21ea      	movs	r1, #234	; 0xea
 80071bc:	48a7      	ldr	r0, [pc, #668]	; (800745c <_dtoa_r+0x2d4>)
 80071be:	f001 fbd1 	bl	8008964 <__assert_func>
 80071c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071c6:	6005      	str	r5, [r0, #0]
 80071c8:	60c5      	str	r5, [r0, #12]
 80071ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071cc:	6819      	ldr	r1, [r3, #0]
 80071ce:	b151      	cbz	r1, 80071e6 <_dtoa_r+0x5e>
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	604a      	str	r2, [r1, #4]
 80071d4:	2301      	movs	r3, #1
 80071d6:	4093      	lsls	r3, r2
 80071d8:	608b      	str	r3, [r1, #8]
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fe1c 	bl	8007e18 <_Bfree>
 80071e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	1e3b      	subs	r3, r7, #0
 80071e8:	bfaa      	itet	ge
 80071ea:	2300      	movge	r3, #0
 80071ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80071f0:	f8c8 3000 	strge.w	r3, [r8]
 80071f4:	4b9a      	ldr	r3, [pc, #616]	; (8007460 <_dtoa_r+0x2d8>)
 80071f6:	bfbc      	itt	lt
 80071f8:	2201      	movlt	r2, #1
 80071fa:	f8c8 2000 	strlt.w	r2, [r8]
 80071fe:	ea33 030b 	bics.w	r3, r3, fp
 8007202:	d11b      	bne.n	800723c <_dtoa_r+0xb4>
 8007204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007206:	f242 730f 	movw	r3, #9999	; 0x270f
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007210:	4333      	orrs	r3, r6
 8007212:	f000 8592 	beq.w	8007d3a <_dtoa_r+0xbb2>
 8007216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007218:	b963      	cbnz	r3, 8007234 <_dtoa_r+0xac>
 800721a:	4b92      	ldr	r3, [pc, #584]	; (8007464 <_dtoa_r+0x2dc>)
 800721c:	e022      	b.n	8007264 <_dtoa_r+0xdc>
 800721e:	4b92      	ldr	r3, [pc, #584]	; (8007468 <_dtoa_r+0x2e0>)
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	3308      	adds	r3, #8
 8007224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	9801      	ldr	r0, [sp, #4]
 800722a:	b013      	add	sp, #76	; 0x4c
 800722c:	ecbd 8b04 	vpop	{d8-d9}
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007234:	4b8b      	ldr	r3, [pc, #556]	; (8007464 <_dtoa_r+0x2dc>)
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	3303      	adds	r3, #3
 800723a:	e7f3      	b.n	8007224 <_dtoa_r+0x9c>
 800723c:	2200      	movs	r2, #0
 800723e:	2300      	movs	r3, #0
 8007240:	4650      	mov	r0, sl
 8007242:	4659      	mov	r1, fp
 8007244:	f7f9 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007248:	ec4b ab19 	vmov	d9, sl, fp
 800724c:	4680      	mov	r8, r0
 800724e:	b158      	cbz	r0, 8007268 <_dtoa_r+0xe0>
 8007250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007252:	2301      	movs	r3, #1
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 856b 	beq.w	8007d34 <_dtoa_r+0xbac>
 800725e:	4883      	ldr	r0, [pc, #524]	; (800746c <_dtoa_r+0x2e4>)
 8007260:	6018      	str	r0, [r3, #0]
 8007262:	1e43      	subs	r3, r0, #1
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	e7df      	b.n	8007228 <_dtoa_r+0xa0>
 8007268:	ec4b ab10 	vmov	d0, sl, fp
 800726c:	aa10      	add	r2, sp, #64	; 0x40
 800726e:	a911      	add	r1, sp, #68	; 0x44
 8007270:	4620      	mov	r0, r4
 8007272:	f001 f8b9 	bl	80083e8 <__d2b>
 8007276:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800727a:	ee08 0a10 	vmov	s16, r0
 800727e:	2d00      	cmp	r5, #0
 8007280:	f000 8084 	beq.w	800738c <_dtoa_r+0x204>
 8007284:	ee19 3a90 	vmov	r3, s19
 8007288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800728c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007290:	4656      	mov	r6, sl
 8007292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800729a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800729e:	4b74      	ldr	r3, [pc, #464]	; (8007470 <_dtoa_r+0x2e8>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	4630      	mov	r0, r6
 80072a4:	4639      	mov	r1, r7
 80072a6:	f7f8 ffef 	bl	8000288 <__aeabi_dsub>
 80072aa:	a365      	add	r3, pc, #404	; (adr r3, 8007440 <_dtoa_r+0x2b8>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	a364      	add	r3, pc, #400	; (adr r3, 8007448 <_dtoa_r+0x2c0>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ffe7 	bl	800028c <__adddf3>
 80072be:	4606      	mov	r6, r0
 80072c0:	4628      	mov	r0, r5
 80072c2:	460f      	mov	r7, r1
 80072c4:	f7f9 f92e 	bl	8000524 <__aeabi_i2d>
 80072c8:	a361      	add	r3, pc, #388	; (adr r3, 8007450 <_dtoa_r+0x2c8>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f8 ffd7 	bl	800028c <__adddf3>
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	f7f9 fc39 	bl	8000b58 <__aeabi_d2iz>
 80072e6:	2200      	movs	r2, #0
 80072e8:	9000      	str	r0, [sp, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f9 fbf4 	bl	8000adc <__aeabi_dcmplt>
 80072f4:	b150      	cbz	r0, 800730c <_dtoa_r+0x184>
 80072f6:	9800      	ldr	r0, [sp, #0]
 80072f8:	f7f9 f914 	bl	8000524 <__aeabi_i2d>
 80072fc:	4632      	mov	r2, r6
 80072fe:	463b      	mov	r3, r7
 8007300:	f7f9 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007304:	b910      	cbnz	r0, 800730c <_dtoa_r+0x184>
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	3b01      	subs	r3, #1
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	2b16      	cmp	r3, #22
 8007310:	d85a      	bhi.n	80073c8 <_dtoa_r+0x240>
 8007312:	9a00      	ldr	r2, [sp, #0]
 8007314:	4b57      	ldr	r3, [pc, #348]	; (8007474 <_dtoa_r+0x2ec>)
 8007316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	ec51 0b19 	vmov	r0, r1, d9
 8007322:	f7f9 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8007326:	2800      	cmp	r0, #0
 8007328:	d050      	beq.n	80073cc <_dtoa_r+0x244>
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	3b01      	subs	r3, #1
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2300      	movs	r3, #0
 8007332:	930b      	str	r3, [sp, #44]	; 0x2c
 8007334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007336:	1b5d      	subs	r5, r3, r5
 8007338:	1e6b      	subs	r3, r5, #1
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	bf45      	ittet	mi
 800733e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007342:	9304      	strmi	r3, [sp, #16]
 8007344:	2300      	movpl	r3, #0
 8007346:	2300      	movmi	r3, #0
 8007348:	bf4c      	ite	mi
 800734a:	9305      	strmi	r3, [sp, #20]
 800734c:	9304      	strpl	r3, [sp, #16]
 800734e:	9b00      	ldr	r3, [sp, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db3d      	blt.n	80073d0 <_dtoa_r+0x248>
 8007354:	9b05      	ldr	r3, [sp, #20]
 8007356:	9a00      	ldr	r2, [sp, #0]
 8007358:	920a      	str	r2, [sp, #40]	; 0x28
 800735a:	4413      	add	r3, r2
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	2300      	movs	r3, #0
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	9b06      	ldr	r3, [sp, #24]
 8007364:	2b09      	cmp	r3, #9
 8007366:	f200 8089 	bhi.w	800747c <_dtoa_r+0x2f4>
 800736a:	2b05      	cmp	r3, #5
 800736c:	bfc4      	itt	gt
 800736e:	3b04      	subgt	r3, #4
 8007370:	9306      	strgt	r3, [sp, #24]
 8007372:	9b06      	ldr	r3, [sp, #24]
 8007374:	f1a3 0302 	sub.w	r3, r3, #2
 8007378:	bfcc      	ite	gt
 800737a:	2500      	movgt	r5, #0
 800737c:	2501      	movle	r5, #1
 800737e:	2b03      	cmp	r3, #3
 8007380:	f200 8087 	bhi.w	8007492 <_dtoa_r+0x30a>
 8007384:	e8df f003 	tbb	[pc, r3]
 8007388:	59383a2d 	.word	0x59383a2d
 800738c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007390:	441d      	add	r5, r3
 8007392:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007396:	2b20      	cmp	r3, #32
 8007398:	bfc1      	itttt	gt
 800739a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800739e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80073a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073aa:	bfda      	itte	le
 80073ac:	f1c3 0320 	rsble	r3, r3, #32
 80073b0:	fa06 f003 	lslle.w	r0, r6, r3
 80073b4:	4318      	orrgt	r0, r3
 80073b6:	f7f9 f8a5 	bl	8000504 <__aeabi_ui2d>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4606      	mov	r6, r0
 80073be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073c2:	3d01      	subs	r5, #1
 80073c4:	930e      	str	r3, [sp, #56]	; 0x38
 80073c6:	e76a      	b.n	800729e <_dtoa_r+0x116>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e7b2      	b.n	8007332 <_dtoa_r+0x1aa>
 80073cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80073ce:	e7b1      	b.n	8007334 <_dtoa_r+0x1ac>
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	9a00      	ldr	r2, [sp, #0]
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	4253      	negs	r3, r2
 80073da:	9307      	str	r3, [sp, #28]
 80073dc:	2300      	movs	r3, #0
 80073de:	930a      	str	r3, [sp, #40]	; 0x28
 80073e0:	e7bf      	b.n	8007362 <_dtoa_r+0x1da>
 80073e2:	2300      	movs	r3, #0
 80073e4:	9308      	str	r3, [sp, #32]
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc55      	bgt.n	8007498 <_dtoa_r+0x310>
 80073ec:	2301      	movs	r3, #1
 80073ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073f2:	461a      	mov	r2, r3
 80073f4:	9209      	str	r2, [sp, #36]	; 0x24
 80073f6:	e00c      	b.n	8007412 <_dtoa_r+0x28a>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e7f3      	b.n	80073e4 <_dtoa_r+0x25c>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	9b00      	ldr	r3, [sp, #0]
 8007404:	4413      	add	r3, r2
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	3301      	adds	r3, #1
 800740a:	2b01      	cmp	r3, #1
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	bfb8      	it	lt
 8007410:	2301      	movlt	r3, #1
 8007412:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007414:	2200      	movs	r2, #0
 8007416:	6042      	str	r2, [r0, #4]
 8007418:	2204      	movs	r2, #4
 800741a:	f102 0614 	add.w	r6, r2, #20
 800741e:	429e      	cmp	r6, r3
 8007420:	6841      	ldr	r1, [r0, #4]
 8007422:	d93d      	bls.n	80074a0 <_dtoa_r+0x318>
 8007424:	4620      	mov	r0, r4
 8007426:	f000 fcb7 	bl	8007d98 <_Balloc>
 800742a:	9001      	str	r0, [sp, #4]
 800742c:	2800      	cmp	r0, #0
 800742e:	d13b      	bne.n	80074a8 <_dtoa_r+0x320>
 8007430:	4b11      	ldr	r3, [pc, #68]	; (8007478 <_dtoa_r+0x2f0>)
 8007432:	4602      	mov	r2, r0
 8007434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007438:	e6c0      	b.n	80071bc <_dtoa_r+0x34>
 800743a:	2301      	movs	r3, #1
 800743c:	e7df      	b.n	80073fe <_dtoa_r+0x276>
 800743e:	bf00      	nop
 8007440:	636f4361 	.word	0x636f4361
 8007444:	3fd287a7 	.word	0x3fd287a7
 8007448:	8b60c8b3 	.word	0x8b60c8b3
 800744c:	3fc68a28 	.word	0x3fc68a28
 8007450:	509f79fb 	.word	0x509f79fb
 8007454:	3fd34413 	.word	0x3fd34413
 8007458:	0800a0e9 	.word	0x0800a0e9
 800745c:	0800a100 	.word	0x0800a100
 8007460:	7ff00000 	.word	0x7ff00000
 8007464:	0800a0e5 	.word	0x0800a0e5
 8007468:	0800a0dc 	.word	0x0800a0dc
 800746c:	0800a0b9 	.word	0x0800a0b9
 8007470:	3ff80000 	.word	0x3ff80000
 8007474:	0800a1f0 	.word	0x0800a1f0
 8007478:	0800a15b 	.word	0x0800a15b
 800747c:	2501      	movs	r5, #1
 800747e:	2300      	movs	r3, #0
 8007480:	9306      	str	r3, [sp, #24]
 8007482:	9508      	str	r5, [sp, #32]
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
 8007488:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	2312      	movs	r3, #18
 8007490:	e7b0      	b.n	80073f4 <_dtoa_r+0x26c>
 8007492:	2301      	movs	r3, #1
 8007494:	9308      	str	r3, [sp, #32]
 8007496:	e7f5      	b.n	8007484 <_dtoa_r+0x2fc>
 8007498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800749a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800749e:	e7b8      	b.n	8007412 <_dtoa_r+0x28a>
 80074a0:	3101      	adds	r1, #1
 80074a2:	6041      	str	r1, [r0, #4]
 80074a4:	0052      	lsls	r2, r2, #1
 80074a6:	e7b8      	b.n	800741a <_dtoa_r+0x292>
 80074a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074aa:	9a01      	ldr	r2, [sp, #4]
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	2b0e      	cmp	r3, #14
 80074b2:	f200 809d 	bhi.w	80075f0 <_dtoa_r+0x468>
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	f000 809a 	beq.w	80075f0 <_dtoa_r+0x468>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd32      	ble.n	8007528 <_dtoa_r+0x3a0>
 80074c2:	4ab7      	ldr	r2, [pc, #732]	; (80077a0 <_dtoa_r+0x618>)
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074d0:	9b00      	ldr	r3, [sp, #0]
 80074d2:	05d8      	lsls	r0, r3, #23
 80074d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80074d8:	d516      	bpl.n	8007508 <_dtoa_r+0x380>
 80074da:	4bb2      	ldr	r3, [pc, #712]	; (80077a4 <_dtoa_r+0x61c>)
 80074dc:	ec51 0b19 	vmov	r0, r1, d9
 80074e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074e4:	f7f9 f9b2 	bl	800084c <__aeabi_ddiv>
 80074e8:	f007 070f 	and.w	r7, r7, #15
 80074ec:	4682      	mov	sl, r0
 80074ee:	468b      	mov	fp, r1
 80074f0:	2503      	movs	r5, #3
 80074f2:	4eac      	ldr	r6, [pc, #688]	; (80077a4 <_dtoa_r+0x61c>)
 80074f4:	b957      	cbnz	r7, 800750c <_dtoa_r+0x384>
 80074f6:	4642      	mov	r2, r8
 80074f8:	464b      	mov	r3, r9
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	f7f9 f9a5 	bl	800084c <__aeabi_ddiv>
 8007502:	4682      	mov	sl, r0
 8007504:	468b      	mov	fp, r1
 8007506:	e028      	b.n	800755a <_dtoa_r+0x3d2>
 8007508:	2502      	movs	r5, #2
 800750a:	e7f2      	b.n	80074f2 <_dtoa_r+0x36a>
 800750c:	07f9      	lsls	r1, r7, #31
 800750e:	d508      	bpl.n	8007522 <_dtoa_r+0x39a>
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007518:	f7f9 f86e 	bl	80005f8 <__aeabi_dmul>
 800751c:	3501      	adds	r5, #1
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	107f      	asrs	r7, r7, #1
 8007524:	3608      	adds	r6, #8
 8007526:	e7e5      	b.n	80074f4 <_dtoa_r+0x36c>
 8007528:	f000 809b 	beq.w	8007662 <_dtoa_r+0x4da>
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	4f9d      	ldr	r7, [pc, #628]	; (80077a4 <_dtoa_r+0x61c>)
 8007530:	425e      	negs	r6, r3
 8007532:	4b9b      	ldr	r3, [pc, #620]	; (80077a0 <_dtoa_r+0x618>)
 8007534:	f006 020f 	and.w	r2, r6, #15
 8007538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	ec51 0b19 	vmov	r0, r1, d9
 8007544:	f7f9 f858 	bl	80005f8 <__aeabi_dmul>
 8007548:	1136      	asrs	r6, r6, #4
 800754a:	4682      	mov	sl, r0
 800754c:	468b      	mov	fp, r1
 800754e:	2300      	movs	r3, #0
 8007550:	2502      	movs	r5, #2
 8007552:	2e00      	cmp	r6, #0
 8007554:	d17a      	bne.n	800764c <_dtoa_r+0x4c4>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1d3      	bne.n	8007502 <_dtoa_r+0x37a>
 800755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8082 	beq.w	8007666 <_dtoa_r+0x4de>
 8007562:	4b91      	ldr	r3, [pc, #580]	; (80077a8 <_dtoa_r+0x620>)
 8007564:	2200      	movs	r2, #0
 8007566:	4650      	mov	r0, sl
 8007568:	4659      	mov	r1, fp
 800756a:	f7f9 fab7 	bl	8000adc <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	d079      	beq.n	8007666 <_dtoa_r+0x4de>
 8007572:	9b03      	ldr	r3, [sp, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d076      	beq.n	8007666 <_dtoa_r+0x4de>
 8007578:	9b02      	ldr	r3, [sp, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd36      	ble.n	80075ec <_dtoa_r+0x464>
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	4650      	mov	r0, sl
 8007582:	4659      	mov	r1, fp
 8007584:	1e5f      	subs	r7, r3, #1
 8007586:	2200      	movs	r2, #0
 8007588:	4b88      	ldr	r3, [pc, #544]	; (80077ac <_dtoa_r+0x624>)
 800758a:	f7f9 f835 	bl	80005f8 <__aeabi_dmul>
 800758e:	9e02      	ldr	r6, [sp, #8]
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	3501      	adds	r5, #1
 8007596:	4628      	mov	r0, r5
 8007598:	f7f8 ffc4 	bl	8000524 <__aeabi_i2d>
 800759c:	4652      	mov	r2, sl
 800759e:	465b      	mov	r3, fp
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	4b82      	ldr	r3, [pc, #520]	; (80077b0 <_dtoa_r+0x628>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	f7f8 fe70 	bl	800028c <__adddf3>
 80075ac:	46d0      	mov	r8, sl
 80075ae:	46d9      	mov	r9, fp
 80075b0:	4682      	mov	sl, r0
 80075b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	d158      	bne.n	800766c <_dtoa_r+0x4e4>
 80075ba:	4b7e      	ldr	r3, [pc, #504]	; (80077b4 <_dtoa_r+0x62c>)
 80075bc:	2200      	movs	r2, #0
 80075be:	4640      	mov	r0, r8
 80075c0:	4649      	mov	r1, r9
 80075c2:	f7f8 fe61 	bl	8000288 <__aeabi_dsub>
 80075c6:	4652      	mov	r2, sl
 80075c8:	465b      	mov	r3, fp
 80075ca:	4680      	mov	r8, r0
 80075cc:	4689      	mov	r9, r1
 80075ce:	f7f9 faa3 	bl	8000b18 <__aeabi_dcmpgt>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	f040 8295 	bne.w	8007b02 <_dtoa_r+0x97a>
 80075d8:	4652      	mov	r2, sl
 80075da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80075de:	4640      	mov	r0, r8
 80075e0:	4649      	mov	r1, r9
 80075e2:	f7f9 fa7b 	bl	8000adc <__aeabi_dcmplt>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	f040 8289 	bne.w	8007afe <_dtoa_r+0x976>
 80075ec:	ec5b ab19 	vmov	sl, fp, d9
 80075f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f2c0 8148 	blt.w	8007888 <_dtoa_r+0x700>
 80075f8:	9a00      	ldr	r2, [sp, #0]
 80075fa:	2a0e      	cmp	r2, #14
 80075fc:	f300 8144 	bgt.w	8007888 <_dtoa_r+0x700>
 8007600:	4b67      	ldr	r3, [pc, #412]	; (80077a0 <_dtoa_r+0x618>)
 8007602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800760a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	f280 80d5 	bge.w	80077bc <_dtoa_r+0x634>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f300 80d1 	bgt.w	80077bc <_dtoa_r+0x634>
 800761a:	f040 826f 	bne.w	8007afc <_dtoa_r+0x974>
 800761e:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <_dtoa_r+0x62c>)
 8007620:	2200      	movs	r2, #0
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f8 ffe7 	bl	80005f8 <__aeabi_dmul>
 800762a:	4652      	mov	r2, sl
 800762c:	465b      	mov	r3, fp
 800762e:	f7f9 fa69 	bl	8000b04 <__aeabi_dcmpge>
 8007632:	9e03      	ldr	r6, [sp, #12]
 8007634:	4637      	mov	r7, r6
 8007636:	2800      	cmp	r0, #0
 8007638:	f040 8245 	bne.w	8007ac6 <_dtoa_r+0x93e>
 800763c:	9d01      	ldr	r5, [sp, #4]
 800763e:	2331      	movs	r3, #49	; 0x31
 8007640:	f805 3b01 	strb.w	r3, [r5], #1
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	e240      	b.n	8007ace <_dtoa_r+0x946>
 800764c:	07f2      	lsls	r2, r6, #31
 800764e:	d505      	bpl.n	800765c <_dtoa_r+0x4d4>
 8007650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007654:	f7f8 ffd0 	bl	80005f8 <__aeabi_dmul>
 8007658:	3501      	adds	r5, #1
 800765a:	2301      	movs	r3, #1
 800765c:	1076      	asrs	r6, r6, #1
 800765e:	3708      	adds	r7, #8
 8007660:	e777      	b.n	8007552 <_dtoa_r+0x3ca>
 8007662:	2502      	movs	r5, #2
 8007664:	e779      	b.n	800755a <_dtoa_r+0x3d2>
 8007666:	9f00      	ldr	r7, [sp, #0]
 8007668:	9e03      	ldr	r6, [sp, #12]
 800766a:	e794      	b.n	8007596 <_dtoa_r+0x40e>
 800766c:	9901      	ldr	r1, [sp, #4]
 800766e:	4b4c      	ldr	r3, [pc, #304]	; (80077a0 <_dtoa_r+0x618>)
 8007670:	4431      	add	r1, r6
 8007672:	910d      	str	r1, [sp, #52]	; 0x34
 8007674:	9908      	ldr	r1, [sp, #32]
 8007676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800767a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800767e:	2900      	cmp	r1, #0
 8007680:	d043      	beq.n	800770a <_dtoa_r+0x582>
 8007682:	494d      	ldr	r1, [pc, #308]	; (80077b8 <_dtoa_r+0x630>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f9 f8e1 	bl	800084c <__aeabi_ddiv>
 800768a:	4652      	mov	r2, sl
 800768c:	465b      	mov	r3, fp
 800768e:	f7f8 fdfb 	bl	8000288 <__aeabi_dsub>
 8007692:	9d01      	ldr	r5, [sp, #4]
 8007694:	4682      	mov	sl, r0
 8007696:	468b      	mov	fp, r1
 8007698:	4649      	mov	r1, r9
 800769a:	4640      	mov	r0, r8
 800769c:	f7f9 fa5c 	bl	8000b58 <__aeabi_d2iz>
 80076a0:	4606      	mov	r6, r0
 80076a2:	f7f8 ff3f 	bl	8000524 <__aeabi_i2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 fdeb 	bl	8000288 <__aeabi_dsub>
 80076b2:	3630      	adds	r6, #48	; 0x30
 80076b4:	f805 6b01 	strb.w	r6, [r5], #1
 80076b8:	4652      	mov	r2, sl
 80076ba:	465b      	mov	r3, fp
 80076bc:	4680      	mov	r8, r0
 80076be:	4689      	mov	r9, r1
 80076c0:	f7f9 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d163      	bne.n	8007790 <_dtoa_r+0x608>
 80076c8:	4642      	mov	r2, r8
 80076ca:	464b      	mov	r3, r9
 80076cc:	4936      	ldr	r1, [pc, #216]	; (80077a8 <_dtoa_r+0x620>)
 80076ce:	2000      	movs	r0, #0
 80076d0:	f7f8 fdda 	bl	8000288 <__aeabi_dsub>
 80076d4:	4652      	mov	r2, sl
 80076d6:	465b      	mov	r3, fp
 80076d8:	f7f9 fa00 	bl	8000adc <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 80b5 	bne.w	800784c <_dtoa_r+0x6c4>
 80076e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e4:	429d      	cmp	r5, r3
 80076e6:	d081      	beq.n	80075ec <_dtoa_r+0x464>
 80076e8:	4b30      	ldr	r3, [pc, #192]	; (80077ac <_dtoa_r+0x624>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	4650      	mov	r0, sl
 80076ee:	4659      	mov	r1, fp
 80076f0:	f7f8 ff82 	bl	80005f8 <__aeabi_dmul>
 80076f4:	4b2d      	ldr	r3, [pc, #180]	; (80077ac <_dtoa_r+0x624>)
 80076f6:	4682      	mov	sl, r0
 80076f8:	468b      	mov	fp, r1
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	2200      	movs	r2, #0
 8007700:	f7f8 ff7a 	bl	80005f8 <__aeabi_dmul>
 8007704:	4680      	mov	r8, r0
 8007706:	4689      	mov	r9, r1
 8007708:	e7c6      	b.n	8007698 <_dtoa_r+0x510>
 800770a:	4650      	mov	r0, sl
 800770c:	4659      	mov	r1, fp
 800770e:	f7f8 ff73 	bl	80005f8 <__aeabi_dmul>
 8007712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007714:	9d01      	ldr	r5, [sp, #4]
 8007716:	930f      	str	r3, [sp, #60]	; 0x3c
 8007718:	4682      	mov	sl, r0
 800771a:	468b      	mov	fp, r1
 800771c:	4649      	mov	r1, r9
 800771e:	4640      	mov	r0, r8
 8007720:	f7f9 fa1a 	bl	8000b58 <__aeabi_d2iz>
 8007724:	4606      	mov	r6, r0
 8007726:	f7f8 fefd 	bl	8000524 <__aeabi_i2d>
 800772a:	3630      	adds	r6, #48	; 0x30
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f8 fda8 	bl	8000288 <__aeabi_dsub>
 8007738:	f805 6b01 	strb.w	r6, [r5], #1
 800773c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773e:	429d      	cmp	r5, r3
 8007740:	4680      	mov	r8, r0
 8007742:	4689      	mov	r9, r1
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	d124      	bne.n	8007794 <_dtoa_r+0x60c>
 800774a:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <_dtoa_r+0x630>)
 800774c:	4650      	mov	r0, sl
 800774e:	4659      	mov	r1, fp
 8007750:	f7f8 fd9c 	bl	800028c <__adddf3>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4640      	mov	r0, r8
 800775a:	4649      	mov	r1, r9
 800775c:	f7f9 f9dc 	bl	8000b18 <__aeabi_dcmpgt>
 8007760:	2800      	cmp	r0, #0
 8007762:	d173      	bne.n	800784c <_dtoa_r+0x6c4>
 8007764:	4652      	mov	r2, sl
 8007766:	465b      	mov	r3, fp
 8007768:	4913      	ldr	r1, [pc, #76]	; (80077b8 <_dtoa_r+0x630>)
 800776a:	2000      	movs	r0, #0
 800776c:	f7f8 fd8c 	bl	8000288 <__aeabi_dsub>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	f7f9 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f af35 	beq.w	80075ec <_dtoa_r+0x464>
 8007782:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007784:	1e6b      	subs	r3, r5, #1
 8007786:	930f      	str	r3, [sp, #60]	; 0x3c
 8007788:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	d0f8      	beq.n	8007782 <_dtoa_r+0x5fa>
 8007790:	9700      	str	r7, [sp, #0]
 8007792:	e049      	b.n	8007828 <_dtoa_r+0x6a0>
 8007794:	4b05      	ldr	r3, [pc, #20]	; (80077ac <_dtoa_r+0x624>)
 8007796:	f7f8 ff2f 	bl	80005f8 <__aeabi_dmul>
 800779a:	4680      	mov	r8, r0
 800779c:	4689      	mov	r9, r1
 800779e:	e7bd      	b.n	800771c <_dtoa_r+0x594>
 80077a0:	0800a1f0 	.word	0x0800a1f0
 80077a4:	0800a1c8 	.word	0x0800a1c8
 80077a8:	3ff00000 	.word	0x3ff00000
 80077ac:	40240000 	.word	0x40240000
 80077b0:	401c0000 	.word	0x401c0000
 80077b4:	40140000 	.word	0x40140000
 80077b8:	3fe00000 	.word	0x3fe00000
 80077bc:	9d01      	ldr	r5, [sp, #4]
 80077be:	4656      	mov	r6, sl
 80077c0:	465f      	mov	r7, fp
 80077c2:	4642      	mov	r2, r8
 80077c4:	464b      	mov	r3, r9
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f9 f83f 	bl	800084c <__aeabi_ddiv>
 80077ce:	f7f9 f9c3 	bl	8000b58 <__aeabi_d2iz>
 80077d2:	4682      	mov	sl, r0
 80077d4:	f7f8 fea6 	bl	8000524 <__aeabi_i2d>
 80077d8:	4642      	mov	r2, r8
 80077da:	464b      	mov	r3, r9
 80077dc:	f7f8 ff0c 	bl	80005f8 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80077ec:	f7f8 fd4c 	bl	8000288 <__aeabi_dsub>
 80077f0:	f805 6b01 	strb.w	r6, [r5], #1
 80077f4:	9e01      	ldr	r6, [sp, #4]
 80077f6:	9f03      	ldr	r7, [sp, #12]
 80077f8:	1bae      	subs	r6, r5, r6
 80077fa:	42b7      	cmp	r7, r6
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	d135      	bne.n	800786e <_dtoa_r+0x6e6>
 8007802:	f7f8 fd43 	bl	800028c <__adddf3>
 8007806:	4642      	mov	r2, r8
 8007808:	464b      	mov	r3, r9
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	f7f9 f983 	bl	8000b18 <__aeabi_dcmpgt>
 8007812:	b9d0      	cbnz	r0, 800784a <_dtoa_r+0x6c2>
 8007814:	4642      	mov	r2, r8
 8007816:	464b      	mov	r3, r9
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f9 f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8007820:	b110      	cbz	r0, 8007828 <_dtoa_r+0x6a0>
 8007822:	f01a 0f01 	tst.w	sl, #1
 8007826:	d110      	bne.n	800784a <_dtoa_r+0x6c2>
 8007828:	4620      	mov	r0, r4
 800782a:	ee18 1a10 	vmov	r1, s16
 800782e:	f000 faf3 	bl	8007e18 <_Bfree>
 8007832:	2300      	movs	r3, #0
 8007834:	9800      	ldr	r0, [sp, #0]
 8007836:	702b      	strb	r3, [r5, #0]
 8007838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800783a:	3001      	adds	r0, #1
 800783c:	6018      	str	r0, [r3, #0]
 800783e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007840:	2b00      	cmp	r3, #0
 8007842:	f43f acf1 	beq.w	8007228 <_dtoa_r+0xa0>
 8007846:	601d      	str	r5, [r3, #0]
 8007848:	e4ee      	b.n	8007228 <_dtoa_r+0xa0>
 800784a:	9f00      	ldr	r7, [sp, #0]
 800784c:	462b      	mov	r3, r5
 800784e:	461d      	mov	r5, r3
 8007850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007854:	2a39      	cmp	r2, #57	; 0x39
 8007856:	d106      	bne.n	8007866 <_dtoa_r+0x6de>
 8007858:	9a01      	ldr	r2, [sp, #4]
 800785a:	429a      	cmp	r2, r3
 800785c:	d1f7      	bne.n	800784e <_dtoa_r+0x6c6>
 800785e:	9901      	ldr	r1, [sp, #4]
 8007860:	2230      	movs	r2, #48	; 0x30
 8007862:	3701      	adds	r7, #1
 8007864:	700a      	strb	r2, [r1, #0]
 8007866:	781a      	ldrb	r2, [r3, #0]
 8007868:	3201      	adds	r2, #1
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	e790      	b.n	8007790 <_dtoa_r+0x608>
 800786e:	4ba6      	ldr	r3, [pc, #664]	; (8007b08 <_dtoa_r+0x980>)
 8007870:	2200      	movs	r2, #0
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	2200      	movs	r2, #0
 8007878:	2300      	movs	r3, #0
 800787a:	4606      	mov	r6, r0
 800787c:	460f      	mov	r7, r1
 800787e:	f7f9 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8007882:	2800      	cmp	r0, #0
 8007884:	d09d      	beq.n	80077c2 <_dtoa_r+0x63a>
 8007886:	e7cf      	b.n	8007828 <_dtoa_r+0x6a0>
 8007888:	9a08      	ldr	r2, [sp, #32]
 800788a:	2a00      	cmp	r2, #0
 800788c:	f000 80d7 	beq.w	8007a3e <_dtoa_r+0x8b6>
 8007890:	9a06      	ldr	r2, [sp, #24]
 8007892:	2a01      	cmp	r2, #1
 8007894:	f300 80ba 	bgt.w	8007a0c <_dtoa_r+0x884>
 8007898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800789a:	2a00      	cmp	r2, #0
 800789c:	f000 80b2 	beq.w	8007a04 <_dtoa_r+0x87c>
 80078a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80078a4:	9e07      	ldr	r6, [sp, #28]
 80078a6:	9d04      	ldr	r5, [sp, #16]
 80078a8:	9a04      	ldr	r2, [sp, #16]
 80078aa:	441a      	add	r2, r3
 80078ac:	9204      	str	r2, [sp, #16]
 80078ae:	9a05      	ldr	r2, [sp, #20]
 80078b0:	2101      	movs	r1, #1
 80078b2:	441a      	add	r2, r3
 80078b4:	4620      	mov	r0, r4
 80078b6:	9205      	str	r2, [sp, #20]
 80078b8:	f000 fb66 	bl	8007f88 <__i2b>
 80078bc:	4607      	mov	r7, r0
 80078be:	2d00      	cmp	r5, #0
 80078c0:	dd0c      	ble.n	80078dc <_dtoa_r+0x754>
 80078c2:	9b05      	ldr	r3, [sp, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd09      	ble.n	80078dc <_dtoa_r+0x754>
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	bfa8      	it	ge
 80078ce:	462b      	movge	r3, r5
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	9204      	str	r2, [sp, #16]
 80078d4:	9a05      	ldr	r2, [sp, #20]
 80078d6:	1aed      	subs	r5, r5, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	b31b      	cbz	r3, 8007928 <_dtoa_r+0x7a0>
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80af 	beq.w	8007a46 <_dtoa_r+0x8be>
 80078e8:	2e00      	cmp	r6, #0
 80078ea:	dd13      	ble.n	8007914 <_dtoa_r+0x78c>
 80078ec:	4639      	mov	r1, r7
 80078ee:	4632      	mov	r2, r6
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fc09 	bl	8008108 <__pow5mult>
 80078f6:	ee18 2a10 	vmov	r2, s16
 80078fa:	4601      	mov	r1, r0
 80078fc:	4607      	mov	r7, r0
 80078fe:	4620      	mov	r0, r4
 8007900:	f000 fb58 	bl	8007fb4 <__multiply>
 8007904:	ee18 1a10 	vmov	r1, s16
 8007908:	4680      	mov	r8, r0
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fa84 	bl	8007e18 <_Bfree>
 8007910:	ee08 8a10 	vmov	s16, r8
 8007914:	9b07      	ldr	r3, [sp, #28]
 8007916:	1b9a      	subs	r2, r3, r6
 8007918:	d006      	beq.n	8007928 <_dtoa_r+0x7a0>
 800791a:	ee18 1a10 	vmov	r1, s16
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fbf2 	bl	8008108 <__pow5mult>
 8007924:	ee08 0a10 	vmov	s16, r0
 8007928:	2101      	movs	r1, #1
 800792a:	4620      	mov	r0, r4
 800792c:	f000 fb2c 	bl	8007f88 <__i2b>
 8007930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007932:	2b00      	cmp	r3, #0
 8007934:	4606      	mov	r6, r0
 8007936:	f340 8088 	ble.w	8007a4a <_dtoa_r+0x8c2>
 800793a:	461a      	mov	r2, r3
 800793c:	4601      	mov	r1, r0
 800793e:	4620      	mov	r0, r4
 8007940:	f000 fbe2 	bl	8008108 <__pow5mult>
 8007944:	9b06      	ldr	r3, [sp, #24]
 8007946:	2b01      	cmp	r3, #1
 8007948:	4606      	mov	r6, r0
 800794a:	f340 8081 	ble.w	8007a50 <_dtoa_r+0x8c8>
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	6933      	ldr	r3, [r6, #16]
 8007954:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007958:	6918      	ldr	r0, [r3, #16]
 800795a:	f000 fac5 	bl	8007ee8 <__hi0bits>
 800795e:	f1c0 0020 	rsb	r0, r0, #32
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	4418      	add	r0, r3
 8007966:	f010 001f 	ands.w	r0, r0, #31
 800796a:	f000 8092 	beq.w	8007a92 <_dtoa_r+0x90a>
 800796e:	f1c0 0320 	rsb	r3, r0, #32
 8007972:	2b04      	cmp	r3, #4
 8007974:	f340 808a 	ble.w	8007a8c <_dtoa_r+0x904>
 8007978:	f1c0 001c 	rsb	r0, r0, #28
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	4403      	add	r3, r0
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	9b05      	ldr	r3, [sp, #20]
 8007984:	4403      	add	r3, r0
 8007986:	4405      	add	r5, r0
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dd07      	ble.n	80079a0 <_dtoa_r+0x818>
 8007990:	ee18 1a10 	vmov	r1, s16
 8007994:	461a      	mov	r2, r3
 8007996:	4620      	mov	r0, r4
 8007998:	f000 fc10 	bl	80081bc <__lshift>
 800799c:	ee08 0a10 	vmov	s16, r0
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dd05      	ble.n	80079b2 <_dtoa_r+0x82a>
 80079a6:	4631      	mov	r1, r6
 80079a8:	461a      	mov	r2, r3
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 fc06 	bl	80081bc <__lshift>
 80079b0:	4606      	mov	r6, r0
 80079b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d06e      	beq.n	8007a96 <_dtoa_r+0x90e>
 80079b8:	ee18 0a10 	vmov	r0, s16
 80079bc:	4631      	mov	r1, r6
 80079be:	f000 fc6d 	bl	800829c <__mcmp>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	da67      	bge.n	8007a96 <_dtoa_r+0x90e>
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	ee18 1a10 	vmov	r1, s16
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	220a      	movs	r2, #10
 80079d2:	2300      	movs	r3, #0
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fa41 	bl	8007e5c <__multadd>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	ee08 0a10 	vmov	s16, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 81b1 	beq.w	8007d48 <_dtoa_r+0xbc0>
 80079e6:	2300      	movs	r3, #0
 80079e8:	4639      	mov	r1, r7
 80079ea:	220a      	movs	r2, #10
 80079ec:	4620      	mov	r0, r4
 80079ee:	f000 fa35 	bl	8007e5c <__multadd>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	4607      	mov	r7, r0
 80079f8:	f300 808e 	bgt.w	8007b18 <_dtoa_r+0x990>
 80079fc:	9b06      	ldr	r3, [sp, #24]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	dc51      	bgt.n	8007aa6 <_dtoa_r+0x91e>
 8007a02:	e089      	b.n	8007b18 <_dtoa_r+0x990>
 8007a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a0a:	e74b      	b.n	80078a4 <_dtoa_r+0x71c>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	1e5e      	subs	r6, r3, #1
 8007a10:	9b07      	ldr	r3, [sp, #28]
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	bfbf      	itttt	lt
 8007a16:	9b07      	ldrlt	r3, [sp, #28]
 8007a18:	9607      	strlt	r6, [sp, #28]
 8007a1a:	1af2      	sublt	r2, r6, r3
 8007a1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007a1e:	bfb6      	itet	lt
 8007a20:	189b      	addlt	r3, r3, r2
 8007a22:	1b9e      	subge	r6, r3, r6
 8007a24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007a26:	9b03      	ldr	r3, [sp, #12]
 8007a28:	bfb8      	it	lt
 8007a2a:	2600      	movlt	r6, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bfb7      	itett	lt
 8007a30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007a34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007a38:	1a9d      	sublt	r5, r3, r2
 8007a3a:	2300      	movlt	r3, #0
 8007a3c:	e734      	b.n	80078a8 <_dtoa_r+0x720>
 8007a3e:	9e07      	ldr	r6, [sp, #28]
 8007a40:	9d04      	ldr	r5, [sp, #16]
 8007a42:	9f08      	ldr	r7, [sp, #32]
 8007a44:	e73b      	b.n	80078be <_dtoa_r+0x736>
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	e767      	b.n	800791a <_dtoa_r+0x792>
 8007a4a:	9b06      	ldr	r3, [sp, #24]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	dc18      	bgt.n	8007a82 <_dtoa_r+0x8fa>
 8007a50:	f1ba 0f00 	cmp.w	sl, #0
 8007a54:	d115      	bne.n	8007a82 <_dtoa_r+0x8fa>
 8007a56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a5a:	b993      	cbnz	r3, 8007a82 <_dtoa_r+0x8fa>
 8007a5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a60:	0d1b      	lsrs	r3, r3, #20
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	b183      	cbz	r3, 8007a88 <_dtoa_r+0x900>
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9b05      	ldr	r3, [sp, #20]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	9305      	str	r3, [sp, #20]
 8007a72:	f04f 0801 	mov.w	r8, #1
 8007a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f47f af6a 	bne.w	8007952 <_dtoa_r+0x7ca>
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e76f      	b.n	8007962 <_dtoa_r+0x7da>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	e7f6      	b.n	8007a76 <_dtoa_r+0x8ee>
 8007a88:	4698      	mov	r8, r3
 8007a8a:	e7f4      	b.n	8007a76 <_dtoa_r+0x8ee>
 8007a8c:	f43f af7d 	beq.w	800798a <_dtoa_r+0x802>
 8007a90:	4618      	mov	r0, r3
 8007a92:	301c      	adds	r0, #28
 8007a94:	e772      	b.n	800797c <_dtoa_r+0x7f4>
 8007a96:	9b03      	ldr	r3, [sp, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc37      	bgt.n	8007b0c <_dtoa_r+0x984>
 8007a9c:	9b06      	ldr	r3, [sp, #24]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	dd34      	ble.n	8007b0c <_dtoa_r+0x984>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	9302      	str	r3, [sp, #8]
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	b96b      	cbnz	r3, 8007ac6 <_dtoa_r+0x93e>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	2205      	movs	r2, #5
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f9d4 	bl	8007e5c <__multadd>
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	ee18 0a10 	vmov	r0, s16
 8007abc:	f000 fbee 	bl	800829c <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f73f adbb 	bgt.w	800763c <_dtoa_r+0x4b4>
 8007ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac8:	9d01      	ldr	r5, [sp, #4]
 8007aca:	43db      	mvns	r3, r3
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 f99f 	bl	8007e18 <_Bfree>
 8007ada:	2f00      	cmp	r7, #0
 8007adc:	f43f aea4 	beq.w	8007828 <_dtoa_r+0x6a0>
 8007ae0:	f1b8 0f00 	cmp.w	r8, #0
 8007ae4:	d005      	beq.n	8007af2 <_dtoa_r+0x96a>
 8007ae6:	45b8      	cmp	r8, r7
 8007ae8:	d003      	beq.n	8007af2 <_dtoa_r+0x96a>
 8007aea:	4641      	mov	r1, r8
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 f993 	bl	8007e18 <_Bfree>
 8007af2:	4639      	mov	r1, r7
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 f98f 	bl	8007e18 <_Bfree>
 8007afa:	e695      	b.n	8007828 <_dtoa_r+0x6a0>
 8007afc:	2600      	movs	r6, #0
 8007afe:	4637      	mov	r7, r6
 8007b00:	e7e1      	b.n	8007ac6 <_dtoa_r+0x93e>
 8007b02:	9700      	str	r7, [sp, #0]
 8007b04:	4637      	mov	r7, r6
 8007b06:	e599      	b.n	800763c <_dtoa_r+0x4b4>
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 80ca 	beq.w	8007ca8 <_dtoa_r+0xb20>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	dd05      	ble.n	8007b28 <_dtoa_r+0x9a0>
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	462a      	mov	r2, r5
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fb4b 	bl	80081bc <__lshift>
 8007b26:	4607      	mov	r7, r0
 8007b28:	f1b8 0f00 	cmp.w	r8, #0
 8007b2c:	d05b      	beq.n	8007be6 <_dtoa_r+0xa5e>
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 f931 	bl	8007d98 <_Balloc>
 8007b36:	4605      	mov	r5, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <_dtoa_r+0x9be>
 8007b3a:	4b87      	ldr	r3, [pc, #540]	; (8007d58 <_dtoa_r+0xbd0>)
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b42:	f7ff bb3b 	b.w	80071bc <_dtoa_r+0x34>
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	3202      	adds	r2, #2
 8007b4a:	0092      	lsls	r2, r2, #2
 8007b4c:	f107 010c 	add.w	r1, r7, #12
 8007b50:	300c      	adds	r0, #12
 8007b52:	f000 f913 	bl	8007d7c <memcpy>
 8007b56:	2201      	movs	r2, #1
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fb2e 	bl	80081bc <__lshift>
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	f103 0901 	add.w	r9, r3, #1
 8007b66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	9305      	str	r3, [sp, #20]
 8007b6e:	f00a 0301 	and.w	r3, sl, #1
 8007b72:	46b8      	mov	r8, r7
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	4607      	mov	r7, r0
 8007b78:	4631      	mov	r1, r6
 8007b7a:	ee18 0a10 	vmov	r0, s16
 8007b7e:	f7ff fa75 	bl	800706c <quorem>
 8007b82:	4641      	mov	r1, r8
 8007b84:	9002      	str	r0, [sp, #8]
 8007b86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b8a:	ee18 0a10 	vmov	r0, s16
 8007b8e:	f000 fb85 	bl	800829c <__mcmp>
 8007b92:	463a      	mov	r2, r7
 8007b94:	9003      	str	r0, [sp, #12]
 8007b96:	4631      	mov	r1, r6
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fb9b 	bl	80082d4 <__mdiff>
 8007b9e:	68c2      	ldr	r2, [r0, #12]
 8007ba0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	bb02      	cbnz	r2, 8007bea <_dtoa_r+0xa62>
 8007ba8:	4601      	mov	r1, r0
 8007baa:	ee18 0a10 	vmov	r0, s16
 8007bae:	f000 fb75 	bl	800829c <__mcmp>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	9207      	str	r2, [sp, #28]
 8007bba:	f000 f92d 	bl	8007e18 <_Bfree>
 8007bbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007bc2:	ea43 0102 	orr.w	r1, r3, r2
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	464d      	mov	r5, r9
 8007bcc:	d10f      	bne.n	8007bee <_dtoa_r+0xa66>
 8007bce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bd2:	d02a      	beq.n	8007c2a <_dtoa_r+0xaa2>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dd02      	ble.n	8007be0 <_dtoa_r+0xa58>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007be0:	f88b a000 	strb.w	sl, [fp]
 8007be4:	e775      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007be6:	4638      	mov	r0, r7
 8007be8:	e7ba      	b.n	8007b60 <_dtoa_r+0x9d8>
 8007bea:	2201      	movs	r2, #1
 8007bec:	e7e2      	b.n	8007bb4 <_dtoa_r+0xa2c>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db04      	blt.n	8007bfe <_dtoa_r+0xa76>
 8007bf4:	9906      	ldr	r1, [sp, #24]
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	9904      	ldr	r1, [sp, #16]
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	d122      	bne.n	8007c44 <_dtoa_r+0xabc>
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	ddee      	ble.n	8007be0 <_dtoa_r+0xa58>
 8007c02:	ee18 1a10 	vmov	r1, s16
 8007c06:	2201      	movs	r2, #1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fad7 	bl	80081bc <__lshift>
 8007c0e:	4631      	mov	r1, r6
 8007c10:	ee08 0a10 	vmov	s16, r0
 8007c14:	f000 fb42 	bl	800829c <__mcmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	dc03      	bgt.n	8007c24 <_dtoa_r+0xa9c>
 8007c1c:	d1e0      	bne.n	8007be0 <_dtoa_r+0xa58>
 8007c1e:	f01a 0f01 	tst.w	sl, #1
 8007c22:	d0dd      	beq.n	8007be0 <_dtoa_r+0xa58>
 8007c24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c28:	d1d7      	bne.n	8007bda <_dtoa_r+0xa52>
 8007c2a:	2339      	movs	r3, #57	; 0x39
 8007c2c:	f88b 3000 	strb.w	r3, [fp]
 8007c30:	462b      	mov	r3, r5
 8007c32:	461d      	mov	r5, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c3a:	2a39      	cmp	r2, #57	; 0x39
 8007c3c:	d071      	beq.n	8007d22 <_dtoa_r+0xb9a>
 8007c3e:	3201      	adds	r2, #1
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e746      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	dd07      	ble.n	8007c58 <_dtoa_r+0xad0>
 8007c48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007c4c:	d0ed      	beq.n	8007c2a <_dtoa_r+0xaa2>
 8007c4e:	f10a 0301 	add.w	r3, sl, #1
 8007c52:	f88b 3000 	strb.w	r3, [fp]
 8007c56:	e73c      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007c5e:	4599      	cmp	r9, r3
 8007c60:	d047      	beq.n	8007cf2 <_dtoa_r+0xb6a>
 8007c62:	ee18 1a10 	vmov	r1, s16
 8007c66:	2300      	movs	r3, #0
 8007c68:	220a      	movs	r2, #10
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 f8f6 	bl	8007e5c <__multadd>
 8007c70:	45b8      	cmp	r8, r7
 8007c72:	ee08 0a10 	vmov	s16, r0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	f04f 020a 	mov.w	r2, #10
 8007c7e:	4641      	mov	r1, r8
 8007c80:	4620      	mov	r0, r4
 8007c82:	d106      	bne.n	8007c92 <_dtoa_r+0xb0a>
 8007c84:	f000 f8ea 	bl	8007e5c <__multadd>
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	f109 0901 	add.w	r9, r9, #1
 8007c90:	e772      	b.n	8007b78 <_dtoa_r+0x9f0>
 8007c92:	f000 f8e3 	bl	8007e5c <__multadd>
 8007c96:	4639      	mov	r1, r7
 8007c98:	4680      	mov	r8, r0
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 f8dc 	bl	8007e5c <__multadd>
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	e7f1      	b.n	8007c8c <_dtoa_r+0xb04>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	9d01      	ldr	r5, [sp, #4]
 8007cae:	ee18 0a10 	vmov	r0, s16
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	f7ff f9da 	bl	800706c <quorem>
 8007cb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007cbc:	9b01      	ldr	r3, [sp, #4]
 8007cbe:	f805 ab01 	strb.w	sl, [r5], #1
 8007cc2:	1aea      	subs	r2, r5, r3
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	dd09      	ble.n	8007cde <_dtoa_r+0xb56>
 8007cca:	ee18 1a10 	vmov	r1, s16
 8007cce:	2300      	movs	r3, #0
 8007cd0:	220a      	movs	r2, #10
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f8c2 	bl	8007e5c <__multadd>
 8007cd8:	ee08 0a10 	vmov	s16, r0
 8007cdc:	e7e7      	b.n	8007cae <_dtoa_r+0xb26>
 8007cde:	9b02      	ldr	r3, [sp, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bfc8      	it	gt
 8007ce4:	461d      	movgt	r5, r3
 8007ce6:	9b01      	ldr	r3, [sp, #4]
 8007ce8:	bfd8      	it	le
 8007cea:	2501      	movle	r5, #1
 8007cec:	441d      	add	r5, r3
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	ee18 1a10 	vmov	r1, s16
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fa5f 	bl	80081bc <__lshift>
 8007cfe:	4631      	mov	r1, r6
 8007d00:	ee08 0a10 	vmov	s16, r0
 8007d04:	f000 faca 	bl	800829c <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	dc91      	bgt.n	8007c30 <_dtoa_r+0xaa8>
 8007d0c:	d102      	bne.n	8007d14 <_dtoa_r+0xb8c>
 8007d0e:	f01a 0f01 	tst.w	sl, #1
 8007d12:	d18d      	bne.n	8007c30 <_dtoa_r+0xaa8>
 8007d14:	462b      	mov	r3, r5
 8007d16:	461d      	mov	r5, r3
 8007d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d1c:	2a30      	cmp	r2, #48	; 0x30
 8007d1e:	d0fa      	beq.n	8007d16 <_dtoa_r+0xb8e>
 8007d20:	e6d7      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007d22:	9a01      	ldr	r2, [sp, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d184      	bne.n	8007c32 <_dtoa_r+0xaaa>
 8007d28:	9b00      	ldr	r3, [sp, #0]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	2331      	movs	r3, #49	; 0x31
 8007d30:	7013      	strb	r3, [r2, #0]
 8007d32:	e6ce      	b.n	8007ad2 <_dtoa_r+0x94a>
 8007d34:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <_dtoa_r+0xbd4>)
 8007d36:	f7ff ba95 	b.w	8007264 <_dtoa_r+0xdc>
 8007d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f47f aa6e 	bne.w	800721e <_dtoa_r+0x96>
 8007d42:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <_dtoa_r+0xbd8>)
 8007d44:	f7ff ba8e 	b.w	8007264 <_dtoa_r+0xdc>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dcae      	bgt.n	8007cac <_dtoa_r+0xb24>
 8007d4e:	9b06      	ldr	r3, [sp, #24]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	f73f aea8 	bgt.w	8007aa6 <_dtoa_r+0x91e>
 8007d56:	e7a9      	b.n	8007cac <_dtoa_r+0xb24>
 8007d58:	0800a15b 	.word	0x0800a15b
 8007d5c:	0800a0b8 	.word	0x0800a0b8
 8007d60:	0800a0dc 	.word	0x0800a0dc

08007d64 <_localeconv_r>:
 8007d64:	4800      	ldr	r0, [pc, #0]	; (8007d68 <_localeconv_r+0x4>)
 8007d66:	4770      	bx	lr
 8007d68:	20000168 	.word	0x20000168

08007d6c <malloc>:
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <malloc+0xc>)
 8007d6e:	4601      	mov	r1, r0
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f000 bc17 	b.w	80085a4 <_malloc_r>
 8007d76:	bf00      	nop
 8007d78:	20000014 	.word	0x20000014

08007d7c <memcpy>:
 8007d7c:	440a      	add	r2, r1
 8007d7e:	4291      	cmp	r1, r2
 8007d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d84:	d100      	bne.n	8007d88 <memcpy+0xc>
 8007d86:	4770      	bx	lr
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d1f9      	bne.n	8007d8a <memcpy+0xe>
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <_Balloc>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	460d      	mov	r5, r1
 8007da0:	b976      	cbnz	r6, 8007dc0 <_Balloc+0x28>
 8007da2:	2010      	movs	r0, #16
 8007da4:	f7ff ffe2 	bl	8007d6c <malloc>
 8007da8:	4602      	mov	r2, r0
 8007daa:	6260      	str	r0, [r4, #36]	; 0x24
 8007dac:	b920      	cbnz	r0, 8007db8 <_Balloc+0x20>
 8007dae:	4b18      	ldr	r3, [pc, #96]	; (8007e10 <_Balloc+0x78>)
 8007db0:	4818      	ldr	r0, [pc, #96]	; (8007e14 <_Balloc+0x7c>)
 8007db2:	2166      	movs	r1, #102	; 0x66
 8007db4:	f000 fdd6 	bl	8008964 <__assert_func>
 8007db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dbc:	6006      	str	r6, [r0, #0]
 8007dbe:	60c6      	str	r6, [r0, #12]
 8007dc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007dc2:	68f3      	ldr	r3, [r6, #12]
 8007dc4:	b183      	cbz	r3, 8007de8 <_Balloc+0x50>
 8007dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dce:	b9b8      	cbnz	r0, 8007e00 <_Balloc+0x68>
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8007dd6:	1d72      	adds	r2, r6, #5
 8007dd8:	0092      	lsls	r2, r2, #2
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fb60 	bl	80084a0 <_calloc_r>
 8007de0:	b160      	cbz	r0, 8007dfc <_Balloc+0x64>
 8007de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007de6:	e00e      	b.n	8007e06 <_Balloc+0x6e>
 8007de8:	2221      	movs	r2, #33	; 0x21
 8007dea:	2104      	movs	r1, #4
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fb57 	bl	80084a0 <_calloc_r>
 8007df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df4:	60f0      	str	r0, [r6, #12]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e4      	bne.n	8007dc6 <_Balloc+0x2e>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	6802      	ldr	r2, [r0, #0]
 8007e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e06:	2300      	movs	r3, #0
 8007e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e0c:	e7f7      	b.n	8007dfe <_Balloc+0x66>
 8007e0e:	bf00      	nop
 8007e10:	0800a0e9 	.word	0x0800a0e9
 8007e14:	0800a16c 	.word	0x0800a16c

08007e18 <_Bfree>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	b976      	cbnz	r6, 8007e40 <_Bfree+0x28>
 8007e22:	2010      	movs	r0, #16
 8007e24:	f7ff ffa2 	bl	8007d6c <malloc>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6268      	str	r0, [r5, #36]	; 0x24
 8007e2c:	b920      	cbnz	r0, 8007e38 <_Bfree+0x20>
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <_Bfree+0x3c>)
 8007e30:	4809      	ldr	r0, [pc, #36]	; (8007e58 <_Bfree+0x40>)
 8007e32:	218a      	movs	r1, #138	; 0x8a
 8007e34:	f000 fd96 	bl	8008964 <__assert_func>
 8007e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e3c:	6006      	str	r6, [r0, #0]
 8007e3e:	60c6      	str	r6, [r0, #12]
 8007e40:	b13c      	cbz	r4, 8007e52 <_Bfree+0x3a>
 8007e42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e44:	6862      	ldr	r2, [r4, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e4c:	6021      	str	r1, [r4, #0]
 8007e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	0800a0e9 	.word	0x0800a0e9
 8007e58:	0800a16c 	.word	0x0800a16c

08007e5c <__multadd>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	690d      	ldr	r5, [r1, #16]
 8007e62:	4607      	mov	r7, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	461e      	mov	r6, r3
 8007e68:	f101 0c14 	add.w	ip, r1, #20
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007e72:	b299      	uxth	r1, r3
 8007e74:	fb02 6101 	mla	r1, r2, r1, r6
 8007e78:	0c1e      	lsrs	r6, r3, #16
 8007e7a:	0c0b      	lsrs	r3, r1, #16
 8007e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007e80:	b289      	uxth	r1, r1
 8007e82:	3001      	adds	r0, #1
 8007e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e88:	4285      	cmp	r5, r0
 8007e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e92:	dcec      	bgt.n	8007e6e <__multadd+0x12>
 8007e94:	b30e      	cbz	r6, 8007eda <__multadd+0x7e>
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	42ab      	cmp	r3, r5
 8007e9a:	dc19      	bgt.n	8007ed0 <__multadd+0x74>
 8007e9c:	6861      	ldr	r1, [r4, #4]
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	f7ff ff79 	bl	8007d98 <_Balloc>
 8007ea6:	4680      	mov	r8, r0
 8007ea8:	b928      	cbnz	r0, 8007eb6 <__multadd+0x5a>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <__multadd+0x84>)
 8007eae:	480d      	ldr	r0, [pc, #52]	; (8007ee4 <__multadd+0x88>)
 8007eb0:	21b5      	movs	r1, #181	; 0xb5
 8007eb2:	f000 fd57 	bl	8008964 <__assert_func>
 8007eb6:	6922      	ldr	r2, [r4, #16]
 8007eb8:	3202      	adds	r2, #2
 8007eba:	f104 010c 	add.w	r1, r4, #12
 8007ebe:	0092      	lsls	r2, r2, #2
 8007ec0:	300c      	adds	r0, #12
 8007ec2:	f7ff ff5b 	bl	8007d7c <memcpy>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ffa5 	bl	8007e18 <_Bfree>
 8007ece:	4644      	mov	r4, r8
 8007ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	615e      	str	r6, [r3, #20]
 8007ed8:	6125      	str	r5, [r4, #16]
 8007eda:	4620      	mov	r0, r4
 8007edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee0:	0800a15b 	.word	0x0800a15b
 8007ee4:	0800a16c 	.word	0x0800a16c

08007ee8 <__hi0bits>:
 8007ee8:	0c03      	lsrs	r3, r0, #16
 8007eea:	041b      	lsls	r3, r3, #16
 8007eec:	b9d3      	cbnz	r3, 8007f24 <__hi0bits+0x3c>
 8007eee:	0400      	lsls	r0, r0, #16
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ef6:	bf04      	itt	eq
 8007ef8:	0200      	lsleq	r0, r0, #8
 8007efa:	3308      	addeq	r3, #8
 8007efc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f00:	bf04      	itt	eq
 8007f02:	0100      	lsleq	r0, r0, #4
 8007f04:	3304      	addeq	r3, #4
 8007f06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f0a:	bf04      	itt	eq
 8007f0c:	0080      	lsleq	r0, r0, #2
 8007f0e:	3302      	addeq	r3, #2
 8007f10:	2800      	cmp	r0, #0
 8007f12:	db05      	blt.n	8007f20 <__hi0bits+0x38>
 8007f14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f18:	f103 0301 	add.w	r3, r3, #1
 8007f1c:	bf08      	it	eq
 8007f1e:	2320      	moveq	r3, #32
 8007f20:	4618      	mov	r0, r3
 8007f22:	4770      	bx	lr
 8007f24:	2300      	movs	r3, #0
 8007f26:	e7e4      	b.n	8007ef2 <__hi0bits+0xa>

08007f28 <__lo0bits>:
 8007f28:	6803      	ldr	r3, [r0, #0]
 8007f2a:	f013 0207 	ands.w	r2, r3, #7
 8007f2e:	4601      	mov	r1, r0
 8007f30:	d00b      	beq.n	8007f4a <__lo0bits+0x22>
 8007f32:	07da      	lsls	r2, r3, #31
 8007f34:	d423      	bmi.n	8007f7e <__lo0bits+0x56>
 8007f36:	0798      	lsls	r0, r3, #30
 8007f38:	bf49      	itett	mi
 8007f3a:	085b      	lsrmi	r3, r3, #1
 8007f3c:	089b      	lsrpl	r3, r3, #2
 8007f3e:	2001      	movmi	r0, #1
 8007f40:	600b      	strmi	r3, [r1, #0]
 8007f42:	bf5c      	itt	pl
 8007f44:	600b      	strpl	r3, [r1, #0]
 8007f46:	2002      	movpl	r0, #2
 8007f48:	4770      	bx	lr
 8007f4a:	b298      	uxth	r0, r3
 8007f4c:	b9a8      	cbnz	r0, 8007f7a <__lo0bits+0x52>
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	2010      	movs	r0, #16
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	b90a      	cbnz	r2, 8007f5a <__lo0bits+0x32>
 8007f56:	3008      	adds	r0, #8
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	071a      	lsls	r2, r3, #28
 8007f5c:	bf04      	itt	eq
 8007f5e:	091b      	lsreq	r3, r3, #4
 8007f60:	3004      	addeq	r0, #4
 8007f62:	079a      	lsls	r2, r3, #30
 8007f64:	bf04      	itt	eq
 8007f66:	089b      	lsreq	r3, r3, #2
 8007f68:	3002      	addeq	r0, #2
 8007f6a:	07da      	lsls	r2, r3, #31
 8007f6c:	d403      	bmi.n	8007f76 <__lo0bits+0x4e>
 8007f6e:	085b      	lsrs	r3, r3, #1
 8007f70:	f100 0001 	add.w	r0, r0, #1
 8007f74:	d005      	beq.n	8007f82 <__lo0bits+0x5a>
 8007f76:	600b      	str	r3, [r1, #0]
 8007f78:	4770      	bx	lr
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	e7e9      	b.n	8007f52 <__lo0bits+0x2a>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	4770      	bx	lr
 8007f82:	2020      	movs	r0, #32
 8007f84:	4770      	bx	lr
	...

08007f88 <__i2b>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	f7ff ff03 	bl	8007d98 <_Balloc>
 8007f92:	4602      	mov	r2, r0
 8007f94:	b928      	cbnz	r0, 8007fa2 <__i2b+0x1a>
 8007f96:	4b05      	ldr	r3, [pc, #20]	; (8007fac <__i2b+0x24>)
 8007f98:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <__i2b+0x28>)
 8007f9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007f9e:	f000 fce1 	bl	8008964 <__assert_func>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	6144      	str	r4, [r0, #20]
 8007fa6:	6103      	str	r3, [r0, #16]
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	bf00      	nop
 8007fac:	0800a15b 	.word	0x0800a15b
 8007fb0:	0800a16c 	.word	0x0800a16c

08007fb4 <__multiply>:
 8007fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb8:	4691      	mov	r9, r2
 8007fba:	690a      	ldr	r2, [r1, #16]
 8007fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	bfb8      	it	lt
 8007fc4:	460b      	movlt	r3, r1
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	bfbc      	itt	lt
 8007fca:	464c      	movlt	r4, r9
 8007fcc:	4699      	movlt	r9, r3
 8007fce:	6927      	ldr	r7, [r4, #16]
 8007fd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fd4:	68a3      	ldr	r3, [r4, #8]
 8007fd6:	6861      	ldr	r1, [r4, #4]
 8007fd8:	eb07 060a 	add.w	r6, r7, sl
 8007fdc:	42b3      	cmp	r3, r6
 8007fde:	b085      	sub	sp, #20
 8007fe0:	bfb8      	it	lt
 8007fe2:	3101      	addlt	r1, #1
 8007fe4:	f7ff fed8 	bl	8007d98 <_Balloc>
 8007fe8:	b930      	cbnz	r0, 8007ff8 <__multiply+0x44>
 8007fea:	4602      	mov	r2, r0
 8007fec:	4b44      	ldr	r3, [pc, #272]	; (8008100 <__multiply+0x14c>)
 8007fee:	4845      	ldr	r0, [pc, #276]	; (8008104 <__multiply+0x150>)
 8007ff0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ff4:	f000 fcb6 	bl	8008964 <__assert_func>
 8007ff8:	f100 0514 	add.w	r5, r0, #20
 8007ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008000:	462b      	mov	r3, r5
 8008002:	2200      	movs	r2, #0
 8008004:	4543      	cmp	r3, r8
 8008006:	d321      	bcc.n	800804c <__multiply+0x98>
 8008008:	f104 0314 	add.w	r3, r4, #20
 800800c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008010:	f109 0314 	add.w	r3, r9, #20
 8008014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008018:	9202      	str	r2, [sp, #8]
 800801a:	1b3a      	subs	r2, r7, r4
 800801c:	3a15      	subs	r2, #21
 800801e:	f022 0203 	bic.w	r2, r2, #3
 8008022:	3204      	adds	r2, #4
 8008024:	f104 0115 	add.w	r1, r4, #21
 8008028:	428f      	cmp	r7, r1
 800802a:	bf38      	it	cc
 800802c:	2204      	movcc	r2, #4
 800802e:	9201      	str	r2, [sp, #4]
 8008030:	9a02      	ldr	r2, [sp, #8]
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	429a      	cmp	r2, r3
 8008036:	d80c      	bhi.n	8008052 <__multiply+0x9e>
 8008038:	2e00      	cmp	r6, #0
 800803a:	dd03      	ble.n	8008044 <__multiply+0x90>
 800803c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008040:	2b00      	cmp	r3, #0
 8008042:	d05a      	beq.n	80080fa <__multiply+0x146>
 8008044:	6106      	str	r6, [r0, #16]
 8008046:	b005      	add	sp, #20
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	f843 2b04 	str.w	r2, [r3], #4
 8008050:	e7d8      	b.n	8008004 <__multiply+0x50>
 8008052:	f8b3 a000 	ldrh.w	sl, [r3]
 8008056:	f1ba 0f00 	cmp.w	sl, #0
 800805a:	d024      	beq.n	80080a6 <__multiply+0xf2>
 800805c:	f104 0e14 	add.w	lr, r4, #20
 8008060:	46a9      	mov	r9, r5
 8008062:	f04f 0c00 	mov.w	ip, #0
 8008066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800806a:	f8d9 1000 	ldr.w	r1, [r9]
 800806e:	fa1f fb82 	uxth.w	fp, r2
 8008072:	b289      	uxth	r1, r1
 8008074:	fb0a 110b 	mla	r1, sl, fp, r1
 8008078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800807c:	f8d9 2000 	ldr.w	r2, [r9]
 8008080:	4461      	add	r1, ip
 8008082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008086:	fb0a c20b 	mla	r2, sl, fp, ip
 800808a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800808e:	b289      	uxth	r1, r1
 8008090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008094:	4577      	cmp	r7, lr
 8008096:	f849 1b04 	str.w	r1, [r9], #4
 800809a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800809e:	d8e2      	bhi.n	8008066 <__multiply+0xb2>
 80080a0:	9a01      	ldr	r2, [sp, #4]
 80080a2:	f845 c002 	str.w	ip, [r5, r2]
 80080a6:	9a03      	ldr	r2, [sp, #12]
 80080a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ac:	3304      	adds	r3, #4
 80080ae:	f1b9 0f00 	cmp.w	r9, #0
 80080b2:	d020      	beq.n	80080f6 <__multiply+0x142>
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	f104 0c14 	add.w	ip, r4, #20
 80080ba:	46ae      	mov	lr, r5
 80080bc:	f04f 0a00 	mov.w	sl, #0
 80080c0:	f8bc b000 	ldrh.w	fp, [ip]
 80080c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080c8:	fb09 220b 	mla	r2, r9, fp, r2
 80080cc:	4492      	add	sl, r2
 80080ce:	b289      	uxth	r1, r1
 80080d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80080d4:	f84e 1b04 	str.w	r1, [lr], #4
 80080d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080dc:	f8be 1000 	ldrh.w	r1, [lr]
 80080e0:	0c12      	lsrs	r2, r2, #16
 80080e2:	fb09 1102 	mla	r1, r9, r2, r1
 80080e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80080ea:	4567      	cmp	r7, ip
 80080ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080f0:	d8e6      	bhi.n	80080c0 <__multiply+0x10c>
 80080f2:	9a01      	ldr	r2, [sp, #4]
 80080f4:	50a9      	str	r1, [r5, r2]
 80080f6:	3504      	adds	r5, #4
 80080f8:	e79a      	b.n	8008030 <__multiply+0x7c>
 80080fa:	3e01      	subs	r6, #1
 80080fc:	e79c      	b.n	8008038 <__multiply+0x84>
 80080fe:	bf00      	nop
 8008100:	0800a15b 	.word	0x0800a15b
 8008104:	0800a16c 	.word	0x0800a16c

08008108 <__pow5mult>:
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800810c:	4615      	mov	r5, r2
 800810e:	f012 0203 	ands.w	r2, r2, #3
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	d007      	beq.n	8008128 <__pow5mult+0x20>
 8008118:	4c25      	ldr	r4, [pc, #148]	; (80081b0 <__pow5mult+0xa8>)
 800811a:	3a01      	subs	r2, #1
 800811c:	2300      	movs	r3, #0
 800811e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008122:	f7ff fe9b 	bl	8007e5c <__multadd>
 8008126:	4607      	mov	r7, r0
 8008128:	10ad      	asrs	r5, r5, #2
 800812a:	d03d      	beq.n	80081a8 <__pow5mult+0xa0>
 800812c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800812e:	b97c      	cbnz	r4, 8008150 <__pow5mult+0x48>
 8008130:	2010      	movs	r0, #16
 8008132:	f7ff fe1b 	bl	8007d6c <malloc>
 8008136:	4602      	mov	r2, r0
 8008138:	6270      	str	r0, [r6, #36]	; 0x24
 800813a:	b928      	cbnz	r0, 8008148 <__pow5mult+0x40>
 800813c:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <__pow5mult+0xac>)
 800813e:	481e      	ldr	r0, [pc, #120]	; (80081b8 <__pow5mult+0xb0>)
 8008140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008144:	f000 fc0e 	bl	8008964 <__assert_func>
 8008148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800814c:	6004      	str	r4, [r0, #0]
 800814e:	60c4      	str	r4, [r0, #12]
 8008150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008158:	b94c      	cbnz	r4, 800816e <__pow5mult+0x66>
 800815a:	f240 2171 	movw	r1, #625	; 0x271
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ff12 	bl	8007f88 <__i2b>
 8008164:	2300      	movs	r3, #0
 8008166:	f8c8 0008 	str.w	r0, [r8, #8]
 800816a:	4604      	mov	r4, r0
 800816c:	6003      	str	r3, [r0, #0]
 800816e:	f04f 0900 	mov.w	r9, #0
 8008172:	07eb      	lsls	r3, r5, #31
 8008174:	d50a      	bpl.n	800818c <__pow5mult+0x84>
 8008176:	4639      	mov	r1, r7
 8008178:	4622      	mov	r2, r4
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff ff1a 	bl	8007fb4 <__multiply>
 8008180:	4639      	mov	r1, r7
 8008182:	4680      	mov	r8, r0
 8008184:	4630      	mov	r0, r6
 8008186:	f7ff fe47 	bl	8007e18 <_Bfree>
 800818a:	4647      	mov	r7, r8
 800818c:	106d      	asrs	r5, r5, #1
 800818e:	d00b      	beq.n	80081a8 <__pow5mult+0xa0>
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	b938      	cbnz	r0, 80081a4 <__pow5mult+0x9c>
 8008194:	4622      	mov	r2, r4
 8008196:	4621      	mov	r1, r4
 8008198:	4630      	mov	r0, r6
 800819a:	f7ff ff0b 	bl	8007fb4 <__multiply>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	f8c0 9000 	str.w	r9, [r0]
 80081a4:	4604      	mov	r4, r0
 80081a6:	e7e4      	b.n	8008172 <__pow5mult+0x6a>
 80081a8:	4638      	mov	r0, r7
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	bf00      	nop
 80081b0:	0800a2b8 	.word	0x0800a2b8
 80081b4:	0800a0e9 	.word	0x0800a0e9
 80081b8:	0800a16c 	.word	0x0800a16c

080081bc <__lshift>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	460c      	mov	r4, r1
 80081c2:	6849      	ldr	r1, [r1, #4]
 80081c4:	6923      	ldr	r3, [r4, #16]
 80081c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ca:	68a3      	ldr	r3, [r4, #8]
 80081cc:	4607      	mov	r7, r0
 80081ce:	4691      	mov	r9, r2
 80081d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081d4:	f108 0601 	add.w	r6, r8, #1
 80081d8:	42b3      	cmp	r3, r6
 80081da:	db0b      	blt.n	80081f4 <__lshift+0x38>
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff fddb 	bl	8007d98 <_Balloc>
 80081e2:	4605      	mov	r5, r0
 80081e4:	b948      	cbnz	r0, 80081fa <__lshift+0x3e>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b2a      	ldr	r3, [pc, #168]	; (8008294 <__lshift+0xd8>)
 80081ea:	482b      	ldr	r0, [pc, #172]	; (8008298 <__lshift+0xdc>)
 80081ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80081f0:	f000 fbb8 	bl	8008964 <__assert_func>
 80081f4:	3101      	adds	r1, #1
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	e7ee      	b.n	80081d8 <__lshift+0x1c>
 80081fa:	2300      	movs	r3, #0
 80081fc:	f100 0114 	add.w	r1, r0, #20
 8008200:	f100 0210 	add.w	r2, r0, #16
 8008204:	4618      	mov	r0, r3
 8008206:	4553      	cmp	r3, sl
 8008208:	db37      	blt.n	800827a <__lshift+0xbe>
 800820a:	6920      	ldr	r0, [r4, #16]
 800820c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008210:	f104 0314 	add.w	r3, r4, #20
 8008214:	f019 091f 	ands.w	r9, r9, #31
 8008218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800821c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008220:	d02f      	beq.n	8008282 <__lshift+0xc6>
 8008222:	f1c9 0e20 	rsb	lr, r9, #32
 8008226:	468a      	mov	sl, r1
 8008228:	f04f 0c00 	mov.w	ip, #0
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	fa02 f209 	lsl.w	r2, r2, r9
 8008232:	ea42 020c 	orr.w	r2, r2, ip
 8008236:	f84a 2b04 	str.w	r2, [sl], #4
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	4298      	cmp	r0, r3
 8008240:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008244:	d8f2      	bhi.n	800822c <__lshift+0x70>
 8008246:	1b03      	subs	r3, r0, r4
 8008248:	3b15      	subs	r3, #21
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	3304      	adds	r3, #4
 8008250:	f104 0215 	add.w	r2, r4, #21
 8008254:	4290      	cmp	r0, r2
 8008256:	bf38      	it	cc
 8008258:	2304      	movcc	r3, #4
 800825a:	f841 c003 	str.w	ip, [r1, r3]
 800825e:	f1bc 0f00 	cmp.w	ip, #0
 8008262:	d001      	beq.n	8008268 <__lshift+0xac>
 8008264:	f108 0602 	add.w	r6, r8, #2
 8008268:	3e01      	subs	r6, #1
 800826a:	4638      	mov	r0, r7
 800826c:	612e      	str	r6, [r5, #16]
 800826e:	4621      	mov	r1, r4
 8008270:	f7ff fdd2 	bl	8007e18 <_Bfree>
 8008274:	4628      	mov	r0, r5
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827a:	f842 0f04 	str.w	r0, [r2, #4]!
 800827e:	3301      	adds	r3, #1
 8008280:	e7c1      	b.n	8008206 <__lshift+0x4a>
 8008282:	3904      	subs	r1, #4
 8008284:	f853 2b04 	ldr.w	r2, [r3], #4
 8008288:	f841 2f04 	str.w	r2, [r1, #4]!
 800828c:	4298      	cmp	r0, r3
 800828e:	d8f9      	bhi.n	8008284 <__lshift+0xc8>
 8008290:	e7ea      	b.n	8008268 <__lshift+0xac>
 8008292:	bf00      	nop
 8008294:	0800a15b 	.word	0x0800a15b
 8008298:	0800a16c 	.word	0x0800a16c

0800829c <__mcmp>:
 800829c:	b530      	push	{r4, r5, lr}
 800829e:	6902      	ldr	r2, [r0, #16]
 80082a0:	690c      	ldr	r4, [r1, #16]
 80082a2:	1b12      	subs	r2, r2, r4
 80082a4:	d10e      	bne.n	80082c4 <__mcmp+0x28>
 80082a6:	f100 0314 	add.w	r3, r0, #20
 80082aa:	3114      	adds	r1, #20
 80082ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082bc:	42a5      	cmp	r5, r4
 80082be:	d003      	beq.n	80082c8 <__mcmp+0x2c>
 80082c0:	d305      	bcc.n	80082ce <__mcmp+0x32>
 80082c2:	2201      	movs	r2, #1
 80082c4:	4610      	mov	r0, r2
 80082c6:	bd30      	pop	{r4, r5, pc}
 80082c8:	4283      	cmp	r3, r0
 80082ca:	d3f3      	bcc.n	80082b4 <__mcmp+0x18>
 80082cc:	e7fa      	b.n	80082c4 <__mcmp+0x28>
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	e7f7      	b.n	80082c4 <__mcmp+0x28>

080082d4 <__mdiff>:
 80082d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	460c      	mov	r4, r1
 80082da:	4606      	mov	r6, r0
 80082dc:	4611      	mov	r1, r2
 80082de:	4620      	mov	r0, r4
 80082e0:	4690      	mov	r8, r2
 80082e2:	f7ff ffdb 	bl	800829c <__mcmp>
 80082e6:	1e05      	subs	r5, r0, #0
 80082e8:	d110      	bne.n	800830c <__mdiff+0x38>
 80082ea:	4629      	mov	r1, r5
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff fd53 	bl	8007d98 <_Balloc>
 80082f2:	b930      	cbnz	r0, 8008302 <__mdiff+0x2e>
 80082f4:	4b3a      	ldr	r3, [pc, #232]	; (80083e0 <__mdiff+0x10c>)
 80082f6:	4602      	mov	r2, r0
 80082f8:	f240 2132 	movw	r1, #562	; 0x232
 80082fc:	4839      	ldr	r0, [pc, #228]	; (80083e4 <__mdiff+0x110>)
 80082fe:	f000 fb31 	bl	8008964 <__assert_func>
 8008302:	2301      	movs	r3, #1
 8008304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	bfa4      	itt	ge
 800830e:	4643      	movge	r3, r8
 8008310:	46a0      	movge	r8, r4
 8008312:	4630      	mov	r0, r6
 8008314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008318:	bfa6      	itte	ge
 800831a:	461c      	movge	r4, r3
 800831c:	2500      	movge	r5, #0
 800831e:	2501      	movlt	r5, #1
 8008320:	f7ff fd3a 	bl	8007d98 <_Balloc>
 8008324:	b920      	cbnz	r0, 8008330 <__mdiff+0x5c>
 8008326:	4b2e      	ldr	r3, [pc, #184]	; (80083e0 <__mdiff+0x10c>)
 8008328:	4602      	mov	r2, r0
 800832a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800832e:	e7e5      	b.n	80082fc <__mdiff+0x28>
 8008330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008334:	6926      	ldr	r6, [r4, #16]
 8008336:	60c5      	str	r5, [r0, #12]
 8008338:	f104 0914 	add.w	r9, r4, #20
 800833c:	f108 0514 	add.w	r5, r8, #20
 8008340:	f100 0e14 	add.w	lr, r0, #20
 8008344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800834c:	f108 0210 	add.w	r2, r8, #16
 8008350:	46f2      	mov	sl, lr
 8008352:	2100      	movs	r1, #0
 8008354:	f859 3b04 	ldr.w	r3, [r9], #4
 8008358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800835c:	fa1f f883 	uxth.w	r8, r3
 8008360:	fa11 f18b 	uxtah	r1, r1, fp
 8008364:	0c1b      	lsrs	r3, r3, #16
 8008366:	eba1 0808 	sub.w	r8, r1, r8
 800836a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800836e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008372:	fa1f f888 	uxth.w	r8, r8
 8008376:	1419      	asrs	r1, r3, #16
 8008378:	454e      	cmp	r6, r9
 800837a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800837e:	f84a 3b04 	str.w	r3, [sl], #4
 8008382:	d8e7      	bhi.n	8008354 <__mdiff+0x80>
 8008384:	1b33      	subs	r3, r6, r4
 8008386:	3b15      	subs	r3, #21
 8008388:	f023 0303 	bic.w	r3, r3, #3
 800838c:	3304      	adds	r3, #4
 800838e:	3415      	adds	r4, #21
 8008390:	42a6      	cmp	r6, r4
 8008392:	bf38      	it	cc
 8008394:	2304      	movcc	r3, #4
 8008396:	441d      	add	r5, r3
 8008398:	4473      	add	r3, lr
 800839a:	469e      	mov	lr, r3
 800839c:	462e      	mov	r6, r5
 800839e:	4566      	cmp	r6, ip
 80083a0:	d30e      	bcc.n	80083c0 <__mdiff+0xec>
 80083a2:	f10c 0203 	add.w	r2, ip, #3
 80083a6:	1b52      	subs	r2, r2, r5
 80083a8:	f022 0203 	bic.w	r2, r2, #3
 80083ac:	3d03      	subs	r5, #3
 80083ae:	45ac      	cmp	ip, r5
 80083b0:	bf38      	it	cc
 80083b2:	2200      	movcc	r2, #0
 80083b4:	441a      	add	r2, r3
 80083b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083ba:	b17b      	cbz	r3, 80083dc <__mdiff+0x108>
 80083bc:	6107      	str	r7, [r0, #16]
 80083be:	e7a3      	b.n	8008308 <__mdiff+0x34>
 80083c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80083c4:	fa11 f288 	uxtah	r2, r1, r8
 80083c8:	1414      	asrs	r4, r2, #16
 80083ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083ce:	b292      	uxth	r2, r2
 80083d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083d4:	f84e 2b04 	str.w	r2, [lr], #4
 80083d8:	1421      	asrs	r1, r4, #16
 80083da:	e7e0      	b.n	800839e <__mdiff+0xca>
 80083dc:	3f01      	subs	r7, #1
 80083de:	e7ea      	b.n	80083b6 <__mdiff+0xe2>
 80083e0:	0800a15b 	.word	0x0800a15b
 80083e4:	0800a16c 	.word	0x0800a16c

080083e8 <__d2b>:
 80083e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083ec:	4689      	mov	r9, r1
 80083ee:	2101      	movs	r1, #1
 80083f0:	ec57 6b10 	vmov	r6, r7, d0
 80083f4:	4690      	mov	r8, r2
 80083f6:	f7ff fccf 	bl	8007d98 <_Balloc>
 80083fa:	4604      	mov	r4, r0
 80083fc:	b930      	cbnz	r0, 800840c <__d2b+0x24>
 80083fe:	4602      	mov	r2, r0
 8008400:	4b25      	ldr	r3, [pc, #148]	; (8008498 <__d2b+0xb0>)
 8008402:	4826      	ldr	r0, [pc, #152]	; (800849c <__d2b+0xb4>)
 8008404:	f240 310a 	movw	r1, #778	; 0x30a
 8008408:	f000 faac 	bl	8008964 <__assert_func>
 800840c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008414:	bb35      	cbnz	r5, 8008464 <__d2b+0x7c>
 8008416:	2e00      	cmp	r6, #0
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	d028      	beq.n	800846e <__d2b+0x86>
 800841c:	4668      	mov	r0, sp
 800841e:	9600      	str	r6, [sp, #0]
 8008420:	f7ff fd82 	bl	8007f28 <__lo0bits>
 8008424:	9900      	ldr	r1, [sp, #0]
 8008426:	b300      	cbz	r0, 800846a <__d2b+0x82>
 8008428:	9a01      	ldr	r2, [sp, #4]
 800842a:	f1c0 0320 	rsb	r3, r0, #32
 800842e:	fa02 f303 	lsl.w	r3, r2, r3
 8008432:	430b      	orrs	r3, r1
 8008434:	40c2      	lsrs	r2, r0
 8008436:	6163      	str	r3, [r4, #20]
 8008438:	9201      	str	r2, [sp, #4]
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	61a3      	str	r3, [r4, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	bf14      	ite	ne
 8008442:	2202      	movne	r2, #2
 8008444:	2201      	moveq	r2, #1
 8008446:	6122      	str	r2, [r4, #16]
 8008448:	b1d5      	cbz	r5, 8008480 <__d2b+0x98>
 800844a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800844e:	4405      	add	r5, r0
 8008450:	f8c9 5000 	str.w	r5, [r9]
 8008454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008458:	f8c8 0000 	str.w	r0, [r8]
 800845c:	4620      	mov	r0, r4
 800845e:	b003      	add	sp, #12
 8008460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008468:	e7d5      	b.n	8008416 <__d2b+0x2e>
 800846a:	6161      	str	r1, [r4, #20]
 800846c:	e7e5      	b.n	800843a <__d2b+0x52>
 800846e:	a801      	add	r0, sp, #4
 8008470:	f7ff fd5a 	bl	8007f28 <__lo0bits>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	2201      	movs	r2, #1
 800847a:	6122      	str	r2, [r4, #16]
 800847c:	3020      	adds	r0, #32
 800847e:	e7e3      	b.n	8008448 <__d2b+0x60>
 8008480:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008484:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008488:	f8c9 0000 	str.w	r0, [r9]
 800848c:	6918      	ldr	r0, [r3, #16]
 800848e:	f7ff fd2b 	bl	8007ee8 <__hi0bits>
 8008492:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008496:	e7df      	b.n	8008458 <__d2b+0x70>
 8008498:	0800a15b 	.word	0x0800a15b
 800849c:	0800a16c 	.word	0x0800a16c

080084a0 <_calloc_r>:
 80084a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084a2:	fba1 2402 	umull	r2, r4, r1, r2
 80084a6:	b94c      	cbnz	r4, 80084bc <_calloc_r+0x1c>
 80084a8:	4611      	mov	r1, r2
 80084aa:	9201      	str	r2, [sp, #4]
 80084ac:	f000 f87a 	bl	80085a4 <_malloc_r>
 80084b0:	9a01      	ldr	r2, [sp, #4]
 80084b2:	4605      	mov	r5, r0
 80084b4:	b930      	cbnz	r0, 80084c4 <_calloc_r+0x24>
 80084b6:	4628      	mov	r0, r5
 80084b8:	b003      	add	sp, #12
 80084ba:	bd30      	pop	{r4, r5, pc}
 80084bc:	220c      	movs	r2, #12
 80084be:	6002      	str	r2, [r0, #0]
 80084c0:	2500      	movs	r5, #0
 80084c2:	e7f8      	b.n	80084b6 <_calloc_r+0x16>
 80084c4:	4621      	mov	r1, r4
 80084c6:	f7fe f93f 	bl	8006748 <memset>
 80084ca:	e7f4      	b.n	80084b6 <_calloc_r+0x16>

080084cc <_free_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d044      	beq.n	800855c <_free_r+0x90>
 80084d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f1a1 0404 	sub.w	r4, r1, #4
 80084de:	bfb8      	it	lt
 80084e0:	18e4      	addlt	r4, r4, r3
 80084e2:	f000 fa9b 	bl	8008a1c <__malloc_lock>
 80084e6:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <_free_r+0x94>)
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	b933      	cbnz	r3, 80084fc <_free_r+0x30>
 80084ee:	6063      	str	r3, [r4, #4]
 80084f0:	6014      	str	r4, [r2, #0]
 80084f2:	b003      	add	sp, #12
 80084f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f8:	f000 ba96 	b.w	8008a28 <__malloc_unlock>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d908      	bls.n	8008512 <_free_r+0x46>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf01      	itttt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	1949      	addeq	r1, r1, r5
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	e7ed      	b.n	80084ee <_free_r+0x22>
 8008512:	461a      	mov	r2, r3
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	b10b      	cbz	r3, 800851c <_free_r+0x50>
 8008518:	42a3      	cmp	r3, r4
 800851a:	d9fa      	bls.n	8008512 <_free_r+0x46>
 800851c:	6811      	ldr	r1, [r2, #0]
 800851e:	1855      	adds	r5, r2, r1
 8008520:	42a5      	cmp	r5, r4
 8008522:	d10b      	bne.n	800853c <_free_r+0x70>
 8008524:	6824      	ldr	r4, [r4, #0]
 8008526:	4421      	add	r1, r4
 8008528:	1854      	adds	r4, r2, r1
 800852a:	42a3      	cmp	r3, r4
 800852c:	6011      	str	r1, [r2, #0]
 800852e:	d1e0      	bne.n	80084f2 <_free_r+0x26>
 8008530:	681c      	ldr	r4, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	6053      	str	r3, [r2, #4]
 8008536:	4421      	add	r1, r4
 8008538:	6011      	str	r1, [r2, #0]
 800853a:	e7da      	b.n	80084f2 <_free_r+0x26>
 800853c:	d902      	bls.n	8008544 <_free_r+0x78>
 800853e:	230c      	movs	r3, #12
 8008540:	6003      	str	r3, [r0, #0]
 8008542:	e7d6      	b.n	80084f2 <_free_r+0x26>
 8008544:	6825      	ldr	r5, [r4, #0]
 8008546:	1961      	adds	r1, r4, r5
 8008548:	428b      	cmp	r3, r1
 800854a:	bf04      	itt	eq
 800854c:	6819      	ldreq	r1, [r3, #0]
 800854e:	685b      	ldreq	r3, [r3, #4]
 8008550:	6063      	str	r3, [r4, #4]
 8008552:	bf04      	itt	eq
 8008554:	1949      	addeq	r1, r1, r5
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	6054      	str	r4, [r2, #4]
 800855a:	e7ca      	b.n	80084f2 <_free_r+0x26>
 800855c:	b003      	add	sp, #12
 800855e:	bd30      	pop	{r4, r5, pc}
 8008560:	20000944 	.word	0x20000944

08008564 <sbrk_aligned>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	4e0e      	ldr	r6, [pc, #56]	; (80085a0 <sbrk_aligned+0x3c>)
 8008568:	460c      	mov	r4, r1
 800856a:	6831      	ldr	r1, [r6, #0]
 800856c:	4605      	mov	r5, r0
 800856e:	b911      	cbnz	r1, 8008576 <sbrk_aligned+0x12>
 8008570:	f000 f9e8 	bl	8008944 <_sbrk_r>
 8008574:	6030      	str	r0, [r6, #0]
 8008576:	4621      	mov	r1, r4
 8008578:	4628      	mov	r0, r5
 800857a:	f000 f9e3 	bl	8008944 <_sbrk_r>
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	d00a      	beq.n	8008598 <sbrk_aligned+0x34>
 8008582:	1cc4      	adds	r4, r0, #3
 8008584:	f024 0403 	bic.w	r4, r4, #3
 8008588:	42a0      	cmp	r0, r4
 800858a:	d007      	beq.n	800859c <sbrk_aligned+0x38>
 800858c:	1a21      	subs	r1, r4, r0
 800858e:	4628      	mov	r0, r5
 8008590:	f000 f9d8 	bl	8008944 <_sbrk_r>
 8008594:	3001      	adds	r0, #1
 8008596:	d101      	bne.n	800859c <sbrk_aligned+0x38>
 8008598:	f04f 34ff 	mov.w	r4, #4294967295
 800859c:	4620      	mov	r0, r4
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	20000948 	.word	0x20000948

080085a4 <_malloc_r>:
 80085a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	1ccd      	adds	r5, r1, #3
 80085aa:	f025 0503 	bic.w	r5, r5, #3
 80085ae:	3508      	adds	r5, #8
 80085b0:	2d0c      	cmp	r5, #12
 80085b2:	bf38      	it	cc
 80085b4:	250c      	movcc	r5, #12
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	4607      	mov	r7, r0
 80085ba:	db01      	blt.n	80085c0 <_malloc_r+0x1c>
 80085bc:	42a9      	cmp	r1, r5
 80085be:	d905      	bls.n	80085cc <_malloc_r+0x28>
 80085c0:	230c      	movs	r3, #12
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	2600      	movs	r6, #0
 80085c6:	4630      	mov	r0, r6
 80085c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085cc:	4e2e      	ldr	r6, [pc, #184]	; (8008688 <_malloc_r+0xe4>)
 80085ce:	f000 fa25 	bl	8008a1c <__malloc_lock>
 80085d2:	6833      	ldr	r3, [r6, #0]
 80085d4:	461c      	mov	r4, r3
 80085d6:	bb34      	cbnz	r4, 8008626 <_malloc_r+0x82>
 80085d8:	4629      	mov	r1, r5
 80085da:	4638      	mov	r0, r7
 80085dc:	f7ff ffc2 	bl	8008564 <sbrk_aligned>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	4604      	mov	r4, r0
 80085e4:	d14d      	bne.n	8008682 <_malloc_r+0xde>
 80085e6:	6834      	ldr	r4, [r6, #0]
 80085e8:	4626      	mov	r6, r4
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	d140      	bne.n	8008670 <_malloc_r+0xcc>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	4631      	mov	r1, r6
 80085f2:	4638      	mov	r0, r7
 80085f4:	eb04 0803 	add.w	r8, r4, r3
 80085f8:	f000 f9a4 	bl	8008944 <_sbrk_r>
 80085fc:	4580      	cmp	r8, r0
 80085fe:	d13a      	bne.n	8008676 <_malloc_r+0xd2>
 8008600:	6821      	ldr	r1, [r4, #0]
 8008602:	3503      	adds	r5, #3
 8008604:	1a6d      	subs	r5, r5, r1
 8008606:	f025 0503 	bic.w	r5, r5, #3
 800860a:	3508      	adds	r5, #8
 800860c:	2d0c      	cmp	r5, #12
 800860e:	bf38      	it	cc
 8008610:	250c      	movcc	r5, #12
 8008612:	4629      	mov	r1, r5
 8008614:	4638      	mov	r0, r7
 8008616:	f7ff ffa5 	bl	8008564 <sbrk_aligned>
 800861a:	3001      	adds	r0, #1
 800861c:	d02b      	beq.n	8008676 <_malloc_r+0xd2>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	442b      	add	r3, r5
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	e00e      	b.n	8008644 <_malloc_r+0xa0>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	1b52      	subs	r2, r2, r5
 800862a:	d41e      	bmi.n	800866a <_malloc_r+0xc6>
 800862c:	2a0b      	cmp	r2, #11
 800862e:	d916      	bls.n	800865e <_malloc_r+0xba>
 8008630:	1961      	adds	r1, r4, r5
 8008632:	42a3      	cmp	r3, r4
 8008634:	6025      	str	r5, [r4, #0]
 8008636:	bf18      	it	ne
 8008638:	6059      	strne	r1, [r3, #4]
 800863a:	6863      	ldr	r3, [r4, #4]
 800863c:	bf08      	it	eq
 800863e:	6031      	streq	r1, [r6, #0]
 8008640:	5162      	str	r2, [r4, r5]
 8008642:	604b      	str	r3, [r1, #4]
 8008644:	4638      	mov	r0, r7
 8008646:	f104 060b 	add.w	r6, r4, #11
 800864a:	f000 f9ed 	bl	8008a28 <__malloc_unlock>
 800864e:	f026 0607 	bic.w	r6, r6, #7
 8008652:	1d23      	adds	r3, r4, #4
 8008654:	1af2      	subs	r2, r6, r3
 8008656:	d0b6      	beq.n	80085c6 <_malloc_r+0x22>
 8008658:	1b9b      	subs	r3, r3, r6
 800865a:	50a3      	str	r3, [r4, r2]
 800865c:	e7b3      	b.n	80085c6 <_malloc_r+0x22>
 800865e:	6862      	ldr	r2, [r4, #4]
 8008660:	42a3      	cmp	r3, r4
 8008662:	bf0c      	ite	eq
 8008664:	6032      	streq	r2, [r6, #0]
 8008666:	605a      	strne	r2, [r3, #4]
 8008668:	e7ec      	b.n	8008644 <_malloc_r+0xa0>
 800866a:	4623      	mov	r3, r4
 800866c:	6864      	ldr	r4, [r4, #4]
 800866e:	e7b2      	b.n	80085d6 <_malloc_r+0x32>
 8008670:	4634      	mov	r4, r6
 8008672:	6876      	ldr	r6, [r6, #4]
 8008674:	e7b9      	b.n	80085ea <_malloc_r+0x46>
 8008676:	230c      	movs	r3, #12
 8008678:	603b      	str	r3, [r7, #0]
 800867a:	4638      	mov	r0, r7
 800867c:	f000 f9d4 	bl	8008a28 <__malloc_unlock>
 8008680:	e7a1      	b.n	80085c6 <_malloc_r+0x22>
 8008682:	6025      	str	r5, [r4, #0]
 8008684:	e7de      	b.n	8008644 <_malloc_r+0xa0>
 8008686:	bf00      	nop
 8008688:	20000944 	.word	0x20000944

0800868c <__ssputs_r>:
 800868c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008690:	688e      	ldr	r6, [r1, #8]
 8008692:	429e      	cmp	r6, r3
 8008694:	4682      	mov	sl, r0
 8008696:	460c      	mov	r4, r1
 8008698:	4690      	mov	r8, r2
 800869a:	461f      	mov	r7, r3
 800869c:	d838      	bhi.n	8008710 <__ssputs_r+0x84>
 800869e:	898a      	ldrh	r2, [r1, #12]
 80086a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086a4:	d032      	beq.n	800870c <__ssputs_r+0x80>
 80086a6:	6825      	ldr	r5, [r4, #0]
 80086a8:	6909      	ldr	r1, [r1, #16]
 80086aa:	eba5 0901 	sub.w	r9, r5, r1
 80086ae:	6965      	ldr	r5, [r4, #20]
 80086b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086b8:	3301      	adds	r3, #1
 80086ba:	444b      	add	r3, r9
 80086bc:	106d      	asrs	r5, r5, #1
 80086be:	429d      	cmp	r5, r3
 80086c0:	bf38      	it	cc
 80086c2:	461d      	movcc	r5, r3
 80086c4:	0553      	lsls	r3, r2, #21
 80086c6:	d531      	bpl.n	800872c <__ssputs_r+0xa0>
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7ff ff6b 	bl	80085a4 <_malloc_r>
 80086ce:	4606      	mov	r6, r0
 80086d0:	b950      	cbnz	r0, 80086e8 <__ssputs_r+0x5c>
 80086d2:	230c      	movs	r3, #12
 80086d4:	f8ca 3000 	str.w	r3, [sl]
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	6921      	ldr	r1, [r4, #16]
 80086ea:	464a      	mov	r2, r9
 80086ec:	f7ff fb46 	bl	8007d7c <memcpy>
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fa:	81a3      	strh	r3, [r4, #12]
 80086fc:	6126      	str	r6, [r4, #16]
 80086fe:	6165      	str	r5, [r4, #20]
 8008700:	444e      	add	r6, r9
 8008702:	eba5 0509 	sub.w	r5, r5, r9
 8008706:	6026      	str	r6, [r4, #0]
 8008708:	60a5      	str	r5, [r4, #8]
 800870a:	463e      	mov	r6, r7
 800870c:	42be      	cmp	r6, r7
 800870e:	d900      	bls.n	8008712 <__ssputs_r+0x86>
 8008710:	463e      	mov	r6, r7
 8008712:	6820      	ldr	r0, [r4, #0]
 8008714:	4632      	mov	r2, r6
 8008716:	4641      	mov	r1, r8
 8008718:	f000 f966 	bl	80089e8 <memmove>
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	1b9b      	subs	r3, r3, r6
 8008720:	60a3      	str	r3, [r4, #8]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4433      	add	r3, r6
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	2000      	movs	r0, #0
 800872a:	e7db      	b.n	80086e4 <__ssputs_r+0x58>
 800872c:	462a      	mov	r2, r5
 800872e:	f000 f981 	bl	8008a34 <_realloc_r>
 8008732:	4606      	mov	r6, r0
 8008734:	2800      	cmp	r0, #0
 8008736:	d1e1      	bne.n	80086fc <__ssputs_r+0x70>
 8008738:	6921      	ldr	r1, [r4, #16]
 800873a:	4650      	mov	r0, sl
 800873c:	f7ff fec6 	bl	80084cc <_free_r>
 8008740:	e7c7      	b.n	80086d2 <__ssputs_r+0x46>
	...

08008744 <_svfiprintf_r>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	4698      	mov	r8, r3
 800874a:	898b      	ldrh	r3, [r1, #12]
 800874c:	061b      	lsls	r3, r3, #24
 800874e:	b09d      	sub	sp, #116	; 0x74
 8008750:	4607      	mov	r7, r0
 8008752:	460d      	mov	r5, r1
 8008754:	4614      	mov	r4, r2
 8008756:	d50e      	bpl.n	8008776 <_svfiprintf_r+0x32>
 8008758:	690b      	ldr	r3, [r1, #16]
 800875a:	b963      	cbnz	r3, 8008776 <_svfiprintf_r+0x32>
 800875c:	2140      	movs	r1, #64	; 0x40
 800875e:	f7ff ff21 	bl	80085a4 <_malloc_r>
 8008762:	6028      	str	r0, [r5, #0]
 8008764:	6128      	str	r0, [r5, #16]
 8008766:	b920      	cbnz	r0, 8008772 <_svfiprintf_r+0x2e>
 8008768:	230c      	movs	r3, #12
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	f04f 30ff 	mov.w	r0, #4294967295
 8008770:	e0d1      	b.n	8008916 <_svfiprintf_r+0x1d2>
 8008772:	2340      	movs	r3, #64	; 0x40
 8008774:	616b      	str	r3, [r5, #20]
 8008776:	2300      	movs	r3, #0
 8008778:	9309      	str	r3, [sp, #36]	; 0x24
 800877a:	2320      	movs	r3, #32
 800877c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008780:	f8cd 800c 	str.w	r8, [sp, #12]
 8008784:	2330      	movs	r3, #48	; 0x30
 8008786:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008930 <_svfiprintf_r+0x1ec>
 800878a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800878e:	f04f 0901 	mov.w	r9, #1
 8008792:	4623      	mov	r3, r4
 8008794:	469a      	mov	sl, r3
 8008796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800879a:	b10a      	cbz	r2, 80087a0 <_svfiprintf_r+0x5c>
 800879c:	2a25      	cmp	r2, #37	; 0x25
 800879e:	d1f9      	bne.n	8008794 <_svfiprintf_r+0x50>
 80087a0:	ebba 0b04 	subs.w	fp, sl, r4
 80087a4:	d00b      	beq.n	80087be <_svfiprintf_r+0x7a>
 80087a6:	465b      	mov	r3, fp
 80087a8:	4622      	mov	r2, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff ff6d 	bl	800868c <__ssputs_r>
 80087b2:	3001      	adds	r0, #1
 80087b4:	f000 80aa 	beq.w	800890c <_svfiprintf_r+0x1c8>
 80087b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ba:	445a      	add	r2, fp
 80087bc:	9209      	str	r2, [sp, #36]	; 0x24
 80087be:	f89a 3000 	ldrb.w	r3, [sl]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 80a2 	beq.w	800890c <_svfiprintf_r+0x1c8>
 80087c8:	2300      	movs	r3, #0
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087d2:	f10a 0a01 	add.w	sl, sl, #1
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	9307      	str	r3, [sp, #28]
 80087da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087de:	931a      	str	r3, [sp, #104]	; 0x68
 80087e0:	4654      	mov	r4, sl
 80087e2:	2205      	movs	r2, #5
 80087e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e8:	4851      	ldr	r0, [pc, #324]	; (8008930 <_svfiprintf_r+0x1ec>)
 80087ea:	f7f7 fcf9 	bl	80001e0 <memchr>
 80087ee:	9a04      	ldr	r2, [sp, #16]
 80087f0:	b9d8      	cbnz	r0, 800882a <_svfiprintf_r+0xe6>
 80087f2:	06d0      	lsls	r0, r2, #27
 80087f4:	bf44      	itt	mi
 80087f6:	2320      	movmi	r3, #32
 80087f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fc:	0711      	lsls	r1, r2, #28
 80087fe:	bf44      	itt	mi
 8008800:	232b      	movmi	r3, #43	; 0x2b
 8008802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008806:	f89a 3000 	ldrb.w	r3, [sl]
 800880a:	2b2a      	cmp	r3, #42	; 0x2a
 800880c:	d015      	beq.n	800883a <_svfiprintf_r+0xf6>
 800880e:	9a07      	ldr	r2, [sp, #28]
 8008810:	4654      	mov	r4, sl
 8008812:	2000      	movs	r0, #0
 8008814:	f04f 0c0a 	mov.w	ip, #10
 8008818:	4621      	mov	r1, r4
 800881a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800881e:	3b30      	subs	r3, #48	; 0x30
 8008820:	2b09      	cmp	r3, #9
 8008822:	d94e      	bls.n	80088c2 <_svfiprintf_r+0x17e>
 8008824:	b1b0      	cbz	r0, 8008854 <_svfiprintf_r+0x110>
 8008826:	9207      	str	r2, [sp, #28]
 8008828:	e014      	b.n	8008854 <_svfiprintf_r+0x110>
 800882a:	eba0 0308 	sub.w	r3, r0, r8
 800882e:	fa09 f303 	lsl.w	r3, r9, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	46a2      	mov	sl, r4
 8008838:	e7d2      	b.n	80087e0 <_svfiprintf_r+0x9c>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	1d19      	adds	r1, r3, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	9103      	str	r1, [sp, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	bfbb      	ittet	lt
 8008846:	425b      	neglt	r3, r3
 8008848:	f042 0202 	orrlt.w	r2, r2, #2
 800884c:	9307      	strge	r3, [sp, #28]
 800884e:	9307      	strlt	r3, [sp, #28]
 8008850:	bfb8      	it	lt
 8008852:	9204      	strlt	r2, [sp, #16]
 8008854:	7823      	ldrb	r3, [r4, #0]
 8008856:	2b2e      	cmp	r3, #46	; 0x2e
 8008858:	d10c      	bne.n	8008874 <_svfiprintf_r+0x130>
 800885a:	7863      	ldrb	r3, [r4, #1]
 800885c:	2b2a      	cmp	r3, #42	; 0x2a
 800885e:	d135      	bne.n	80088cc <_svfiprintf_r+0x188>
 8008860:	9b03      	ldr	r3, [sp, #12]
 8008862:	1d1a      	adds	r2, r3, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	9203      	str	r2, [sp, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfb8      	it	lt
 800886c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008870:	3402      	adds	r4, #2
 8008872:	9305      	str	r3, [sp, #20]
 8008874:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008940 <_svfiprintf_r+0x1fc>
 8008878:	7821      	ldrb	r1, [r4, #0]
 800887a:	2203      	movs	r2, #3
 800887c:	4650      	mov	r0, sl
 800887e:	f7f7 fcaf 	bl	80001e0 <memchr>
 8008882:	b140      	cbz	r0, 8008896 <_svfiprintf_r+0x152>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	eba0 000a 	sub.w	r0, r0, sl
 800888a:	fa03 f000 	lsl.w	r0, r3, r0
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	4303      	orrs	r3, r0
 8008892:	3401      	adds	r4, #1
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889a:	4826      	ldr	r0, [pc, #152]	; (8008934 <_svfiprintf_r+0x1f0>)
 800889c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a0:	2206      	movs	r2, #6
 80088a2:	f7f7 fc9d 	bl	80001e0 <memchr>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d038      	beq.n	800891c <_svfiprintf_r+0x1d8>
 80088aa:	4b23      	ldr	r3, [pc, #140]	; (8008938 <_svfiprintf_r+0x1f4>)
 80088ac:	bb1b      	cbnz	r3, 80088f6 <_svfiprintf_r+0x1b2>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	3307      	adds	r3, #7
 80088b2:	f023 0307 	bic.w	r3, r3, #7
 80088b6:	3308      	adds	r3, #8
 80088b8:	9303      	str	r3, [sp, #12]
 80088ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088bc:	4433      	add	r3, r6
 80088be:	9309      	str	r3, [sp, #36]	; 0x24
 80088c0:	e767      	b.n	8008792 <_svfiprintf_r+0x4e>
 80088c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80088c6:	460c      	mov	r4, r1
 80088c8:	2001      	movs	r0, #1
 80088ca:	e7a5      	b.n	8008818 <_svfiprintf_r+0xd4>
 80088cc:	2300      	movs	r3, #0
 80088ce:	3401      	adds	r4, #1
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	4619      	mov	r1, r3
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4620      	mov	r0, r4
 80088da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088de:	3a30      	subs	r2, #48	; 0x30
 80088e0:	2a09      	cmp	r2, #9
 80088e2:	d903      	bls.n	80088ec <_svfiprintf_r+0x1a8>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0c5      	beq.n	8008874 <_svfiprintf_r+0x130>
 80088e8:	9105      	str	r1, [sp, #20]
 80088ea:	e7c3      	b.n	8008874 <_svfiprintf_r+0x130>
 80088ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f0:	4604      	mov	r4, r0
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7f0      	b.n	80088d8 <_svfiprintf_r+0x194>
 80088f6:	ab03      	add	r3, sp, #12
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4b0f      	ldr	r3, [pc, #60]	; (800893c <_svfiprintf_r+0x1f8>)
 80088fe:	a904      	add	r1, sp, #16
 8008900:	4638      	mov	r0, r7
 8008902:	f7fd ffc9 	bl	8006898 <_printf_float>
 8008906:	1c42      	adds	r2, r0, #1
 8008908:	4606      	mov	r6, r0
 800890a:	d1d6      	bne.n	80088ba <_svfiprintf_r+0x176>
 800890c:	89ab      	ldrh	r3, [r5, #12]
 800890e:	065b      	lsls	r3, r3, #25
 8008910:	f53f af2c 	bmi.w	800876c <_svfiprintf_r+0x28>
 8008914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008916:	b01d      	add	sp, #116	; 0x74
 8008918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891c:	ab03      	add	r3, sp, #12
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	462a      	mov	r2, r5
 8008922:	4b06      	ldr	r3, [pc, #24]	; (800893c <_svfiprintf_r+0x1f8>)
 8008924:	a904      	add	r1, sp, #16
 8008926:	4638      	mov	r0, r7
 8008928:	f7fe fa5a 	bl	8006de0 <_printf_i>
 800892c:	e7eb      	b.n	8008906 <_svfiprintf_r+0x1c2>
 800892e:	bf00      	nop
 8008930:	0800a2c4 	.word	0x0800a2c4
 8008934:	0800a2ce 	.word	0x0800a2ce
 8008938:	08006899 	.word	0x08006899
 800893c:	0800868d 	.word	0x0800868d
 8008940:	0800a2ca 	.word	0x0800a2ca

08008944 <_sbrk_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	; (8008960 <_sbrk_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7fa fab4 	bl	8002ebc <_sbrk>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_sbrk_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_sbrk_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	2000094c 	.word	0x2000094c

08008964 <__assert_func>:
 8008964:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008966:	4614      	mov	r4, r2
 8008968:	461a      	mov	r2, r3
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <__assert_func+0x2c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4605      	mov	r5, r0
 8008970:	68d8      	ldr	r0, [r3, #12]
 8008972:	b14c      	cbz	r4, 8008988 <__assert_func+0x24>
 8008974:	4b07      	ldr	r3, [pc, #28]	; (8008994 <__assert_func+0x30>)
 8008976:	9100      	str	r1, [sp, #0]
 8008978:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800897c:	4906      	ldr	r1, [pc, #24]	; (8008998 <__assert_func+0x34>)
 800897e:	462b      	mov	r3, r5
 8008980:	f000 f80e 	bl	80089a0 <fiprintf>
 8008984:	f000 faac 	bl	8008ee0 <abort>
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <__assert_func+0x38>)
 800898a:	461c      	mov	r4, r3
 800898c:	e7f3      	b.n	8008976 <__assert_func+0x12>
 800898e:	bf00      	nop
 8008990:	20000014 	.word	0x20000014
 8008994:	0800a2d5 	.word	0x0800a2d5
 8008998:	0800a2e2 	.word	0x0800a2e2
 800899c:	0800a310 	.word	0x0800a310

080089a0 <fiprintf>:
 80089a0:	b40e      	push	{r1, r2, r3}
 80089a2:	b503      	push	{r0, r1, lr}
 80089a4:	4601      	mov	r1, r0
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	4805      	ldr	r0, [pc, #20]	; (80089c0 <fiprintf+0x20>)
 80089aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ae:	6800      	ldr	r0, [r0, #0]
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	f000 f897 	bl	8008ae4 <_vfiprintf_r>
 80089b6:	b002      	add	sp, #8
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	20000014 	.word	0x20000014

080089c4 <__ascii_mbtowc>:
 80089c4:	b082      	sub	sp, #8
 80089c6:	b901      	cbnz	r1, 80089ca <__ascii_mbtowc+0x6>
 80089c8:	a901      	add	r1, sp, #4
 80089ca:	b142      	cbz	r2, 80089de <__ascii_mbtowc+0x1a>
 80089cc:	b14b      	cbz	r3, 80089e2 <__ascii_mbtowc+0x1e>
 80089ce:	7813      	ldrb	r3, [r2, #0]
 80089d0:	600b      	str	r3, [r1, #0]
 80089d2:	7812      	ldrb	r2, [r2, #0]
 80089d4:	1e10      	subs	r0, r2, #0
 80089d6:	bf18      	it	ne
 80089d8:	2001      	movne	r0, #1
 80089da:	b002      	add	sp, #8
 80089dc:	4770      	bx	lr
 80089de:	4610      	mov	r0, r2
 80089e0:	e7fb      	b.n	80089da <__ascii_mbtowc+0x16>
 80089e2:	f06f 0001 	mvn.w	r0, #1
 80089e6:	e7f8      	b.n	80089da <__ascii_mbtowc+0x16>

080089e8 <memmove>:
 80089e8:	4288      	cmp	r0, r1
 80089ea:	b510      	push	{r4, lr}
 80089ec:	eb01 0402 	add.w	r4, r1, r2
 80089f0:	d902      	bls.n	80089f8 <memmove+0x10>
 80089f2:	4284      	cmp	r4, r0
 80089f4:	4623      	mov	r3, r4
 80089f6:	d807      	bhi.n	8008a08 <memmove+0x20>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	42a1      	cmp	r1, r4
 80089fc:	d008      	beq.n	8008a10 <memmove+0x28>
 80089fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a06:	e7f8      	b.n	80089fa <memmove+0x12>
 8008a08:	4402      	add	r2, r0
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d100      	bne.n	8008a12 <memmove+0x2a>
 8008a10:	bd10      	pop	{r4, pc}
 8008a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1a:	e7f7      	b.n	8008a0c <memmove+0x24>

08008a1c <__malloc_lock>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__malloc_lock+0x8>)
 8008a1e:	f000 bc1f 	b.w	8009260 <__retarget_lock_acquire_recursive>
 8008a22:	bf00      	nop
 8008a24:	20000950 	.word	0x20000950

08008a28 <__malloc_unlock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__malloc_unlock+0x8>)
 8008a2a:	f000 bc1a 	b.w	8009262 <__retarget_lock_release_recursive>
 8008a2e:	bf00      	nop
 8008a30:	20000950 	.word	0x20000950

08008a34 <_realloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	460e      	mov	r6, r1
 8008a3e:	b921      	cbnz	r1, 8008a4a <_realloc_r+0x16>
 8008a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4611      	mov	r1, r2
 8008a46:	f7ff bdad 	b.w	80085a4 <_malloc_r>
 8008a4a:	b92a      	cbnz	r2, 8008a58 <_realloc_r+0x24>
 8008a4c:	f7ff fd3e 	bl	80084cc <_free_r>
 8008a50:	4625      	mov	r5, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f000 fc6a 	bl	8009330 <_malloc_usable_size_r>
 8008a5c:	4284      	cmp	r4, r0
 8008a5e:	4607      	mov	r7, r0
 8008a60:	d802      	bhi.n	8008a68 <_realloc_r+0x34>
 8008a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a66:	d812      	bhi.n	8008a8e <_realloc_r+0x5a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff fd9a 	bl	80085a4 <_malloc_r>
 8008a70:	4605      	mov	r5, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0ed      	beq.n	8008a52 <_realloc_r+0x1e>
 8008a76:	42bc      	cmp	r4, r7
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	bf28      	it	cs
 8008a7e:	463a      	movcs	r2, r7
 8008a80:	f7ff f97c 	bl	8007d7c <memcpy>
 8008a84:	4631      	mov	r1, r6
 8008a86:	4640      	mov	r0, r8
 8008a88:	f7ff fd20 	bl	80084cc <_free_r>
 8008a8c:	e7e1      	b.n	8008a52 <_realloc_r+0x1e>
 8008a8e:	4635      	mov	r5, r6
 8008a90:	e7df      	b.n	8008a52 <_realloc_r+0x1e>

08008a92 <__sfputc_r>:
 8008a92:	6893      	ldr	r3, [r2, #8]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	b410      	push	{r4}
 8008a9a:	6093      	str	r3, [r2, #8]
 8008a9c:	da08      	bge.n	8008ab0 <__sfputc_r+0x1e>
 8008a9e:	6994      	ldr	r4, [r2, #24]
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	db01      	blt.n	8008aa8 <__sfputc_r+0x16>
 8008aa4:	290a      	cmp	r1, #10
 8008aa6:	d103      	bne.n	8008ab0 <__sfputc_r+0x1e>
 8008aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aac:	f000 b94a 	b.w	8008d44 <__swbuf_r>
 8008ab0:	6813      	ldr	r3, [r2, #0]
 8008ab2:	1c58      	adds	r0, r3, #1
 8008ab4:	6010      	str	r0, [r2, #0]
 8008ab6:	7019      	strb	r1, [r3, #0]
 8008ab8:	4608      	mov	r0, r1
 8008aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <__sfputs_r>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	4614      	mov	r4, r2
 8008ac8:	18d5      	adds	r5, r2, r3
 8008aca:	42ac      	cmp	r4, r5
 8008acc:	d101      	bne.n	8008ad2 <__sfputs_r+0x12>
 8008ace:	2000      	movs	r0, #0
 8008ad0:	e007      	b.n	8008ae2 <__sfputs_r+0x22>
 8008ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff ffda 	bl	8008a92 <__sfputc_r>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d1f3      	bne.n	8008aca <__sfputs_r+0xa>
 8008ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ae4 <_vfiprintf_r>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	460d      	mov	r5, r1
 8008aea:	b09d      	sub	sp, #116	; 0x74
 8008aec:	4614      	mov	r4, r2
 8008aee:	4698      	mov	r8, r3
 8008af0:	4606      	mov	r6, r0
 8008af2:	b118      	cbz	r0, 8008afc <_vfiprintf_r+0x18>
 8008af4:	6983      	ldr	r3, [r0, #24]
 8008af6:	b90b      	cbnz	r3, 8008afc <_vfiprintf_r+0x18>
 8008af8:	f000 fb14 	bl	8009124 <__sinit>
 8008afc:	4b89      	ldr	r3, [pc, #548]	; (8008d24 <_vfiprintf_r+0x240>)
 8008afe:	429d      	cmp	r5, r3
 8008b00:	d11b      	bne.n	8008b3a <_vfiprintf_r+0x56>
 8008b02:	6875      	ldr	r5, [r6, #4]
 8008b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_vfiprintf_r+0x32>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	059a      	lsls	r2, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_vfiprintf_r+0x32>
 8008b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b12:	f000 fba5 	bl	8009260 <__retarget_lock_acquire_recursive>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	071b      	lsls	r3, r3, #28
 8008b1a:	d501      	bpl.n	8008b20 <_vfiprintf_r+0x3c>
 8008b1c:	692b      	ldr	r3, [r5, #16]
 8008b1e:	b9eb      	cbnz	r3, 8008b5c <_vfiprintf_r+0x78>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 f96e 	bl	8008e04 <__swsetup_r>
 8008b28:	b1c0      	cbz	r0, 8008b5c <_vfiprintf_r+0x78>
 8008b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b2c:	07dc      	lsls	r4, r3, #31
 8008b2e:	d50e      	bpl.n	8008b4e <_vfiprintf_r+0x6a>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	b01d      	add	sp, #116	; 0x74
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	4b7b      	ldr	r3, [pc, #492]	; (8008d28 <_vfiprintf_r+0x244>)
 8008b3c:	429d      	cmp	r5, r3
 8008b3e:	d101      	bne.n	8008b44 <_vfiprintf_r+0x60>
 8008b40:	68b5      	ldr	r5, [r6, #8]
 8008b42:	e7df      	b.n	8008b04 <_vfiprintf_r+0x20>
 8008b44:	4b79      	ldr	r3, [pc, #484]	; (8008d2c <_vfiprintf_r+0x248>)
 8008b46:	429d      	cmp	r5, r3
 8008b48:	bf08      	it	eq
 8008b4a:	68f5      	ldreq	r5, [r6, #12]
 8008b4c:	e7da      	b.n	8008b04 <_vfiprintf_r+0x20>
 8008b4e:	89ab      	ldrh	r3, [r5, #12]
 8008b50:	0598      	lsls	r0, r3, #22
 8008b52:	d4ed      	bmi.n	8008b30 <_vfiprintf_r+0x4c>
 8008b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b56:	f000 fb84 	bl	8009262 <__retarget_lock_release_recursive>
 8008b5a:	e7e9      	b.n	8008b30 <_vfiprintf_r+0x4c>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b60:	2320      	movs	r3, #32
 8008b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b6a:	2330      	movs	r3, #48	; 0x30
 8008b6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008d30 <_vfiprintf_r+0x24c>
 8008b70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b74:	f04f 0901 	mov.w	r9, #1
 8008b78:	4623      	mov	r3, r4
 8008b7a:	469a      	mov	sl, r3
 8008b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b80:	b10a      	cbz	r2, 8008b86 <_vfiprintf_r+0xa2>
 8008b82:	2a25      	cmp	r2, #37	; 0x25
 8008b84:	d1f9      	bne.n	8008b7a <_vfiprintf_r+0x96>
 8008b86:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8a:	d00b      	beq.n	8008ba4 <_vfiprintf_r+0xc0>
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ff94 	bl	8008ac0 <__sfputs_r>
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f000 80aa 	beq.w	8008cf2 <_vfiprintf_r+0x20e>
 8008b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba0:	445a      	add	r2, fp
 8008ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 80a2 	beq.w	8008cf2 <_vfiprintf_r+0x20e>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb8:	f10a 0a01 	add.w	sl, sl, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	9307      	str	r3, [sp, #28]
 8008bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008bc6:	4654      	mov	r4, sl
 8008bc8:	2205      	movs	r2, #5
 8008bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bce:	4858      	ldr	r0, [pc, #352]	; (8008d30 <_vfiprintf_r+0x24c>)
 8008bd0:	f7f7 fb06 	bl	80001e0 <memchr>
 8008bd4:	9a04      	ldr	r2, [sp, #16]
 8008bd6:	b9d8      	cbnz	r0, 8008c10 <_vfiprintf_r+0x12c>
 8008bd8:	06d1      	lsls	r1, r2, #27
 8008bda:	bf44      	itt	mi
 8008bdc:	2320      	movmi	r3, #32
 8008bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be2:	0713      	lsls	r3, r2, #28
 8008be4:	bf44      	itt	mi
 8008be6:	232b      	movmi	r3, #43	; 0x2b
 8008be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bec:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf2:	d015      	beq.n	8008c20 <_vfiprintf_r+0x13c>
 8008bf4:	9a07      	ldr	r2, [sp, #28]
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	f04f 0c0a 	mov.w	ip, #10
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c04:	3b30      	subs	r3, #48	; 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d94e      	bls.n	8008ca8 <_vfiprintf_r+0x1c4>
 8008c0a:	b1b0      	cbz	r0, 8008c3a <_vfiprintf_r+0x156>
 8008c0c:	9207      	str	r2, [sp, #28]
 8008c0e:	e014      	b.n	8008c3a <_vfiprintf_r+0x156>
 8008c10:	eba0 0308 	sub.w	r3, r0, r8
 8008c14:	fa09 f303 	lsl.w	r3, r9, r3
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	9304      	str	r3, [sp, #16]
 8008c1c:	46a2      	mov	sl, r4
 8008c1e:	e7d2      	b.n	8008bc6 <_vfiprintf_r+0xe2>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d19      	adds	r1, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9103      	str	r1, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfbb      	ittet	lt
 8008c2c:	425b      	neglt	r3, r3
 8008c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c32:	9307      	strge	r3, [sp, #28]
 8008c34:	9307      	strlt	r3, [sp, #28]
 8008c36:	bfb8      	it	lt
 8008c38:	9204      	strlt	r2, [sp, #16]
 8008c3a:	7823      	ldrb	r3, [r4, #0]
 8008c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c3e:	d10c      	bne.n	8008c5a <_vfiprintf_r+0x176>
 8008c40:	7863      	ldrb	r3, [r4, #1]
 8008c42:	2b2a      	cmp	r3, #42	; 0x2a
 8008c44:	d135      	bne.n	8008cb2 <_vfiprintf_r+0x1ce>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	1d1a      	adds	r2, r3, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	9203      	str	r2, [sp, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfb8      	it	lt
 8008c52:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c56:	3402      	adds	r4, #2
 8008c58:	9305      	str	r3, [sp, #20]
 8008c5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d40 <_vfiprintf_r+0x25c>
 8008c5e:	7821      	ldrb	r1, [r4, #0]
 8008c60:	2203      	movs	r2, #3
 8008c62:	4650      	mov	r0, sl
 8008c64:	f7f7 fabc 	bl	80001e0 <memchr>
 8008c68:	b140      	cbz	r0, 8008c7c <_vfiprintf_r+0x198>
 8008c6a:	2340      	movs	r3, #64	; 0x40
 8008c6c:	eba0 000a 	sub.w	r0, r0, sl
 8008c70:	fa03 f000 	lsl.w	r0, r3, r0
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	4303      	orrs	r3, r0
 8008c78:	3401      	adds	r4, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c80:	482c      	ldr	r0, [pc, #176]	; (8008d34 <_vfiprintf_r+0x250>)
 8008c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c86:	2206      	movs	r2, #6
 8008c88:	f7f7 faaa 	bl	80001e0 <memchr>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d03f      	beq.n	8008d10 <_vfiprintf_r+0x22c>
 8008c90:	4b29      	ldr	r3, [pc, #164]	; (8008d38 <_vfiprintf_r+0x254>)
 8008c92:	bb1b      	cbnz	r3, 8008cdc <_vfiprintf_r+0x1f8>
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	3307      	adds	r3, #7
 8008c98:	f023 0307 	bic.w	r3, r3, #7
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca2:	443b      	add	r3, r7
 8008ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca6:	e767      	b.n	8008b78 <_vfiprintf_r+0x94>
 8008ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cac:	460c      	mov	r4, r1
 8008cae:	2001      	movs	r0, #1
 8008cb0:	e7a5      	b.n	8008bfe <_vfiprintf_r+0x11a>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	3401      	adds	r4, #1
 8008cb6:	9305      	str	r3, [sp, #20]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	f04f 0c0a 	mov.w	ip, #10
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc4:	3a30      	subs	r2, #48	; 0x30
 8008cc6:	2a09      	cmp	r2, #9
 8008cc8:	d903      	bls.n	8008cd2 <_vfiprintf_r+0x1ee>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0c5      	beq.n	8008c5a <_vfiprintf_r+0x176>
 8008cce:	9105      	str	r1, [sp, #20]
 8008cd0:	e7c3      	b.n	8008c5a <_vfiprintf_r+0x176>
 8008cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e7f0      	b.n	8008cbe <_vfiprintf_r+0x1da>
 8008cdc:	ab03      	add	r3, sp, #12
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	462a      	mov	r2, r5
 8008ce2:	4b16      	ldr	r3, [pc, #88]	; (8008d3c <_vfiprintf_r+0x258>)
 8008ce4:	a904      	add	r1, sp, #16
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f7fd fdd6 	bl	8006898 <_printf_float>
 8008cec:	4607      	mov	r7, r0
 8008cee:	1c78      	adds	r0, r7, #1
 8008cf0:	d1d6      	bne.n	8008ca0 <_vfiprintf_r+0x1bc>
 8008cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cf4:	07d9      	lsls	r1, r3, #31
 8008cf6:	d405      	bmi.n	8008d04 <_vfiprintf_r+0x220>
 8008cf8:	89ab      	ldrh	r3, [r5, #12]
 8008cfa:	059a      	lsls	r2, r3, #22
 8008cfc:	d402      	bmi.n	8008d04 <_vfiprintf_r+0x220>
 8008cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d00:	f000 faaf 	bl	8009262 <__retarget_lock_release_recursive>
 8008d04:	89ab      	ldrh	r3, [r5, #12]
 8008d06:	065b      	lsls	r3, r3, #25
 8008d08:	f53f af12 	bmi.w	8008b30 <_vfiprintf_r+0x4c>
 8008d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d0e:	e711      	b.n	8008b34 <_vfiprintf_r+0x50>
 8008d10:	ab03      	add	r3, sp, #12
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	462a      	mov	r2, r5
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <_vfiprintf_r+0x258>)
 8008d18:	a904      	add	r1, sp, #16
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7fe f860 	bl	8006de0 <_printf_i>
 8008d20:	e7e4      	b.n	8008cec <_vfiprintf_r+0x208>
 8008d22:	bf00      	nop
 8008d24:	0800a43c 	.word	0x0800a43c
 8008d28:	0800a45c 	.word	0x0800a45c
 8008d2c:	0800a41c 	.word	0x0800a41c
 8008d30:	0800a2c4 	.word	0x0800a2c4
 8008d34:	0800a2ce 	.word	0x0800a2ce
 8008d38:	08006899 	.word	0x08006899
 8008d3c:	08008ac1 	.word	0x08008ac1
 8008d40:	0800a2ca 	.word	0x0800a2ca

08008d44 <__swbuf_r>:
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d46:	460e      	mov	r6, r1
 8008d48:	4614      	mov	r4, r2
 8008d4a:	4605      	mov	r5, r0
 8008d4c:	b118      	cbz	r0, 8008d56 <__swbuf_r+0x12>
 8008d4e:	6983      	ldr	r3, [r0, #24]
 8008d50:	b90b      	cbnz	r3, 8008d56 <__swbuf_r+0x12>
 8008d52:	f000 f9e7 	bl	8009124 <__sinit>
 8008d56:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <__swbuf_r+0x98>)
 8008d58:	429c      	cmp	r4, r3
 8008d5a:	d12b      	bne.n	8008db4 <__swbuf_r+0x70>
 8008d5c:	686c      	ldr	r4, [r5, #4]
 8008d5e:	69a3      	ldr	r3, [r4, #24]
 8008d60:	60a3      	str	r3, [r4, #8]
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	071a      	lsls	r2, r3, #28
 8008d66:	d52f      	bpl.n	8008dc8 <__swbuf_r+0x84>
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	b36b      	cbz	r3, 8008dc8 <__swbuf_r+0x84>
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	6820      	ldr	r0, [r4, #0]
 8008d70:	1ac0      	subs	r0, r0, r3
 8008d72:	6963      	ldr	r3, [r4, #20]
 8008d74:	b2f6      	uxtb	r6, r6
 8008d76:	4283      	cmp	r3, r0
 8008d78:	4637      	mov	r7, r6
 8008d7a:	dc04      	bgt.n	8008d86 <__swbuf_r+0x42>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f000 f93c 	bl	8008ffc <_fflush_r>
 8008d84:	bb30      	cbnz	r0, 8008dd4 <__swbuf_r+0x90>
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	60a3      	str	r3, [r4, #8]
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	1c5a      	adds	r2, r3, #1
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	701e      	strb	r6, [r3, #0]
 8008d94:	6963      	ldr	r3, [r4, #20]
 8008d96:	3001      	adds	r0, #1
 8008d98:	4283      	cmp	r3, r0
 8008d9a:	d004      	beq.n	8008da6 <__swbuf_r+0x62>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	07db      	lsls	r3, r3, #31
 8008da0:	d506      	bpl.n	8008db0 <__swbuf_r+0x6c>
 8008da2:	2e0a      	cmp	r6, #10
 8008da4:	d104      	bne.n	8008db0 <__swbuf_r+0x6c>
 8008da6:	4621      	mov	r1, r4
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 f927 	bl	8008ffc <_fflush_r>
 8008dae:	b988      	cbnz	r0, 8008dd4 <__swbuf_r+0x90>
 8008db0:	4638      	mov	r0, r7
 8008db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <__swbuf_r+0x9c>)
 8008db6:	429c      	cmp	r4, r3
 8008db8:	d101      	bne.n	8008dbe <__swbuf_r+0x7a>
 8008dba:	68ac      	ldr	r4, [r5, #8]
 8008dbc:	e7cf      	b.n	8008d5e <__swbuf_r+0x1a>
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <__swbuf_r+0xa0>)
 8008dc0:	429c      	cmp	r4, r3
 8008dc2:	bf08      	it	eq
 8008dc4:	68ec      	ldreq	r4, [r5, #12]
 8008dc6:	e7ca      	b.n	8008d5e <__swbuf_r+0x1a>
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 f81a 	bl	8008e04 <__swsetup_r>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d0cb      	beq.n	8008d6c <__swbuf_r+0x28>
 8008dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8008dd8:	e7ea      	b.n	8008db0 <__swbuf_r+0x6c>
 8008dda:	bf00      	nop
 8008ddc:	0800a43c 	.word	0x0800a43c
 8008de0:	0800a45c 	.word	0x0800a45c
 8008de4:	0800a41c 	.word	0x0800a41c

08008de8 <__ascii_wctomb>:
 8008de8:	b149      	cbz	r1, 8008dfe <__ascii_wctomb+0x16>
 8008dea:	2aff      	cmp	r2, #255	; 0xff
 8008dec:	bf85      	ittet	hi
 8008dee:	238a      	movhi	r3, #138	; 0x8a
 8008df0:	6003      	strhi	r3, [r0, #0]
 8008df2:	700a      	strbls	r2, [r1, #0]
 8008df4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008df8:	bf98      	it	ls
 8008dfa:	2001      	movls	r0, #1
 8008dfc:	4770      	bx	lr
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4770      	bx	lr
	...

08008e04 <__swsetup_r>:
 8008e04:	4b32      	ldr	r3, [pc, #200]	; (8008ed0 <__swsetup_r+0xcc>)
 8008e06:	b570      	push	{r4, r5, r6, lr}
 8008e08:	681d      	ldr	r5, [r3, #0]
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	b125      	cbz	r5, 8008e1a <__swsetup_r+0x16>
 8008e10:	69ab      	ldr	r3, [r5, #24]
 8008e12:	b913      	cbnz	r3, 8008e1a <__swsetup_r+0x16>
 8008e14:	4628      	mov	r0, r5
 8008e16:	f000 f985 	bl	8009124 <__sinit>
 8008e1a:	4b2e      	ldr	r3, [pc, #184]	; (8008ed4 <__swsetup_r+0xd0>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d10f      	bne.n	8008e40 <__swsetup_r+0x3c>
 8008e20:	686c      	ldr	r4, [r5, #4]
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e28:	0719      	lsls	r1, r3, #28
 8008e2a:	d42c      	bmi.n	8008e86 <__swsetup_r+0x82>
 8008e2c:	06dd      	lsls	r5, r3, #27
 8008e2e:	d411      	bmi.n	8008e54 <__swsetup_r+0x50>
 8008e30:	2309      	movs	r3, #9
 8008e32:	6033      	str	r3, [r6, #0]
 8008e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3e:	e03e      	b.n	8008ebe <__swsetup_r+0xba>
 8008e40:	4b25      	ldr	r3, [pc, #148]	; (8008ed8 <__swsetup_r+0xd4>)
 8008e42:	429c      	cmp	r4, r3
 8008e44:	d101      	bne.n	8008e4a <__swsetup_r+0x46>
 8008e46:	68ac      	ldr	r4, [r5, #8]
 8008e48:	e7eb      	b.n	8008e22 <__swsetup_r+0x1e>
 8008e4a:	4b24      	ldr	r3, [pc, #144]	; (8008edc <__swsetup_r+0xd8>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	bf08      	it	eq
 8008e50:	68ec      	ldreq	r4, [r5, #12]
 8008e52:	e7e6      	b.n	8008e22 <__swsetup_r+0x1e>
 8008e54:	0758      	lsls	r0, r3, #29
 8008e56:	d512      	bpl.n	8008e7e <__swsetup_r+0x7a>
 8008e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e5a:	b141      	cbz	r1, 8008e6e <__swsetup_r+0x6a>
 8008e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e60:	4299      	cmp	r1, r3
 8008e62:	d002      	beq.n	8008e6a <__swsetup_r+0x66>
 8008e64:	4630      	mov	r0, r6
 8008e66:	f7ff fb31 	bl	80084cc <_free_r>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	2300      	movs	r3, #0
 8008e78:	6063      	str	r3, [r4, #4]
 8008e7a:	6923      	ldr	r3, [r4, #16]
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	f043 0308 	orr.w	r3, r3, #8
 8008e84:	81a3      	strh	r3, [r4, #12]
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	b94b      	cbnz	r3, 8008e9e <__swsetup_r+0x9a>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e94:	d003      	beq.n	8008e9e <__swsetup_r+0x9a>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f000 fa09 	bl	80092b0 <__smakebuf_r>
 8008e9e:	89a0      	ldrh	r0, [r4, #12]
 8008ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea4:	f010 0301 	ands.w	r3, r0, #1
 8008ea8:	d00a      	beq.n	8008ec0 <__swsetup_r+0xbc>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	6963      	ldr	r3, [r4, #20]
 8008eb0:	425b      	negs	r3, r3
 8008eb2:	61a3      	str	r3, [r4, #24]
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	b943      	cbnz	r3, 8008eca <__swsetup_r+0xc6>
 8008eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ebc:	d1ba      	bne.n	8008e34 <__swsetup_r+0x30>
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}
 8008ec0:	0781      	lsls	r1, r0, #30
 8008ec2:	bf58      	it	pl
 8008ec4:	6963      	ldrpl	r3, [r4, #20]
 8008ec6:	60a3      	str	r3, [r4, #8]
 8008ec8:	e7f4      	b.n	8008eb4 <__swsetup_r+0xb0>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e7f7      	b.n	8008ebe <__swsetup_r+0xba>
 8008ece:	bf00      	nop
 8008ed0:	20000014 	.word	0x20000014
 8008ed4:	0800a43c 	.word	0x0800a43c
 8008ed8:	0800a45c 	.word	0x0800a45c
 8008edc:	0800a41c 	.word	0x0800a41c

08008ee0 <abort>:
 8008ee0:	b508      	push	{r3, lr}
 8008ee2:	2006      	movs	r0, #6
 8008ee4:	f000 fa54 	bl	8009390 <raise>
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f7f9 ff6f 	bl	8002dcc <_exit>
	...

08008ef0 <__sflush_r>:
 8008ef0:	898a      	ldrh	r2, [r1, #12]
 8008ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	0710      	lsls	r0, r2, #28
 8008efa:	460c      	mov	r4, r1
 8008efc:	d458      	bmi.n	8008fb0 <__sflush_r+0xc0>
 8008efe:	684b      	ldr	r3, [r1, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dc05      	bgt.n	8008f10 <__sflush_r+0x20>
 8008f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dc02      	bgt.n	8008f10 <__sflush_r+0x20>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d0f9      	beq.n	8008f0a <__sflush_r+0x1a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f1c:	682f      	ldr	r7, [r5, #0]
 8008f1e:	602b      	str	r3, [r5, #0]
 8008f20:	d032      	beq.n	8008f88 <__sflush_r+0x98>
 8008f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	075a      	lsls	r2, r3, #29
 8008f28:	d505      	bpl.n	8008f36 <__sflush_r+0x46>
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	1ac0      	subs	r0, r0, r3
 8008f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f30:	b10b      	cbz	r3, 8008f36 <__sflush_r+0x46>
 8008f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f34:	1ac0      	subs	r0, r0, r3
 8008f36:	2300      	movs	r3, #0
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f3c:	6a21      	ldr	r1, [r4, #32]
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b0      	blx	r6
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	d106      	bne.n	8008f56 <__sflush_r+0x66>
 8008f48:	6829      	ldr	r1, [r5, #0]
 8008f4a:	291d      	cmp	r1, #29
 8008f4c:	d82c      	bhi.n	8008fa8 <__sflush_r+0xb8>
 8008f4e:	4a2a      	ldr	r2, [pc, #168]	; (8008ff8 <__sflush_r+0x108>)
 8008f50:	40ca      	lsrs	r2, r1
 8008f52:	07d6      	lsls	r6, r2, #31
 8008f54:	d528      	bpl.n	8008fa8 <__sflush_r+0xb8>
 8008f56:	2200      	movs	r2, #0
 8008f58:	6062      	str	r2, [r4, #4]
 8008f5a:	04d9      	lsls	r1, r3, #19
 8008f5c:	6922      	ldr	r2, [r4, #16]
 8008f5e:	6022      	str	r2, [r4, #0]
 8008f60:	d504      	bpl.n	8008f6c <__sflush_r+0x7c>
 8008f62:	1c42      	adds	r2, r0, #1
 8008f64:	d101      	bne.n	8008f6a <__sflush_r+0x7a>
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	b903      	cbnz	r3, 8008f6c <__sflush_r+0x7c>
 8008f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f6e:	602f      	str	r7, [r5, #0]
 8008f70:	2900      	cmp	r1, #0
 8008f72:	d0ca      	beq.n	8008f0a <__sflush_r+0x1a>
 8008f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f78:	4299      	cmp	r1, r3
 8008f7a:	d002      	beq.n	8008f82 <__sflush_r+0x92>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f7ff faa5 	bl	80084cc <_free_r>
 8008f82:	2000      	movs	r0, #0
 8008f84:	6360      	str	r0, [r4, #52]	; 0x34
 8008f86:	e7c1      	b.n	8008f0c <__sflush_r+0x1c>
 8008f88:	6a21      	ldr	r1, [r4, #32]
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b0      	blx	r6
 8008f90:	1c41      	adds	r1, r0, #1
 8008f92:	d1c7      	bne.n	8008f24 <__sflush_r+0x34>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0c4      	beq.n	8008f24 <__sflush_r+0x34>
 8008f9a:	2b1d      	cmp	r3, #29
 8008f9c:	d001      	beq.n	8008fa2 <__sflush_r+0xb2>
 8008f9e:	2b16      	cmp	r3, #22
 8008fa0:	d101      	bne.n	8008fa6 <__sflush_r+0xb6>
 8008fa2:	602f      	str	r7, [r5, #0]
 8008fa4:	e7b1      	b.n	8008f0a <__sflush_r+0x1a>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	e7ad      	b.n	8008f0c <__sflush_r+0x1c>
 8008fb0:	690f      	ldr	r7, [r1, #16]
 8008fb2:	2f00      	cmp	r7, #0
 8008fb4:	d0a9      	beq.n	8008f0a <__sflush_r+0x1a>
 8008fb6:	0793      	lsls	r3, r2, #30
 8008fb8:	680e      	ldr	r6, [r1, #0]
 8008fba:	bf08      	it	eq
 8008fbc:	694b      	ldreq	r3, [r1, #20]
 8008fbe:	600f      	str	r7, [r1, #0]
 8008fc0:	bf18      	it	ne
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	eba6 0807 	sub.w	r8, r6, r7
 8008fc8:	608b      	str	r3, [r1, #8]
 8008fca:	f1b8 0f00 	cmp.w	r8, #0
 8008fce:	dd9c      	ble.n	8008f0a <__sflush_r+0x1a>
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fd4:	4643      	mov	r3, r8
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b0      	blx	r6
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	dc06      	bgt.n	8008fee <__sflush_r+0xfe>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e78e      	b.n	8008f0c <__sflush_r+0x1c>
 8008fee:	4407      	add	r7, r0
 8008ff0:	eba8 0800 	sub.w	r8, r8, r0
 8008ff4:	e7e9      	b.n	8008fca <__sflush_r+0xda>
 8008ff6:	bf00      	nop
 8008ff8:	20400001 	.word	0x20400001

08008ffc <_fflush_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	690b      	ldr	r3, [r1, #16]
 8009000:	4605      	mov	r5, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b913      	cbnz	r3, 800900c <_fflush_r+0x10>
 8009006:	2500      	movs	r5, #0
 8009008:	4628      	mov	r0, r5
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	b118      	cbz	r0, 8009016 <_fflush_r+0x1a>
 800900e:	6983      	ldr	r3, [r0, #24]
 8009010:	b90b      	cbnz	r3, 8009016 <_fflush_r+0x1a>
 8009012:	f000 f887 	bl	8009124 <__sinit>
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <_fflush_r+0x6c>)
 8009018:	429c      	cmp	r4, r3
 800901a:	d11b      	bne.n	8009054 <_fflush_r+0x58>
 800901c:	686c      	ldr	r4, [r5, #4]
 800901e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0ef      	beq.n	8009006 <_fflush_r+0xa>
 8009026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009028:	07d0      	lsls	r0, r2, #31
 800902a:	d404      	bmi.n	8009036 <_fflush_r+0x3a>
 800902c:	0599      	lsls	r1, r3, #22
 800902e:	d402      	bmi.n	8009036 <_fflush_r+0x3a>
 8009030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009032:	f000 f915 	bl	8009260 <__retarget_lock_acquire_recursive>
 8009036:	4628      	mov	r0, r5
 8009038:	4621      	mov	r1, r4
 800903a:	f7ff ff59 	bl	8008ef0 <__sflush_r>
 800903e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009040:	07da      	lsls	r2, r3, #31
 8009042:	4605      	mov	r5, r0
 8009044:	d4e0      	bmi.n	8009008 <_fflush_r+0xc>
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	059b      	lsls	r3, r3, #22
 800904a:	d4dd      	bmi.n	8009008 <_fflush_r+0xc>
 800904c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800904e:	f000 f908 	bl	8009262 <__retarget_lock_release_recursive>
 8009052:	e7d9      	b.n	8009008 <_fflush_r+0xc>
 8009054:	4b05      	ldr	r3, [pc, #20]	; (800906c <_fflush_r+0x70>)
 8009056:	429c      	cmp	r4, r3
 8009058:	d101      	bne.n	800905e <_fflush_r+0x62>
 800905a:	68ac      	ldr	r4, [r5, #8]
 800905c:	e7df      	b.n	800901e <_fflush_r+0x22>
 800905e:	4b04      	ldr	r3, [pc, #16]	; (8009070 <_fflush_r+0x74>)
 8009060:	429c      	cmp	r4, r3
 8009062:	bf08      	it	eq
 8009064:	68ec      	ldreq	r4, [r5, #12]
 8009066:	e7da      	b.n	800901e <_fflush_r+0x22>
 8009068:	0800a43c 	.word	0x0800a43c
 800906c:	0800a45c 	.word	0x0800a45c
 8009070:	0800a41c 	.word	0x0800a41c

08009074 <std>:
 8009074:	2300      	movs	r3, #0
 8009076:	b510      	push	{r4, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	e9c0 3300 	strd	r3, r3, [r0]
 800907e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009082:	6083      	str	r3, [r0, #8]
 8009084:	8181      	strh	r1, [r0, #12]
 8009086:	6643      	str	r3, [r0, #100]	; 0x64
 8009088:	81c2      	strh	r2, [r0, #14]
 800908a:	6183      	str	r3, [r0, #24]
 800908c:	4619      	mov	r1, r3
 800908e:	2208      	movs	r2, #8
 8009090:	305c      	adds	r0, #92	; 0x5c
 8009092:	f7fd fb59 	bl	8006748 <memset>
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <std+0x38>)
 8009098:	6263      	str	r3, [r4, #36]	; 0x24
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <std+0x3c>)
 800909c:	62a3      	str	r3, [r4, #40]	; 0x28
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <std+0x40>)
 80090a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <std+0x44>)
 80090a4:	6224      	str	r4, [r4, #32]
 80090a6:	6323      	str	r3, [r4, #48]	; 0x30
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	080093c9 	.word	0x080093c9
 80090b0:	080093eb 	.word	0x080093eb
 80090b4:	08009423 	.word	0x08009423
 80090b8:	08009447 	.word	0x08009447

080090bc <_cleanup_r>:
 80090bc:	4901      	ldr	r1, [pc, #4]	; (80090c4 <_cleanup_r+0x8>)
 80090be:	f000 b8af 	b.w	8009220 <_fwalk_reent>
 80090c2:	bf00      	nop
 80090c4:	08008ffd 	.word	0x08008ffd

080090c8 <__sfmoreglue>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	2268      	movs	r2, #104	; 0x68
 80090cc:	1e4d      	subs	r5, r1, #1
 80090ce:	4355      	muls	r5, r2
 80090d0:	460e      	mov	r6, r1
 80090d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090d6:	f7ff fa65 	bl	80085a4 <_malloc_r>
 80090da:	4604      	mov	r4, r0
 80090dc:	b140      	cbz	r0, 80090f0 <__sfmoreglue+0x28>
 80090de:	2100      	movs	r1, #0
 80090e0:	e9c0 1600 	strd	r1, r6, [r0]
 80090e4:	300c      	adds	r0, #12
 80090e6:	60a0      	str	r0, [r4, #8]
 80090e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090ec:	f7fd fb2c 	bl	8006748 <memset>
 80090f0:	4620      	mov	r0, r4
 80090f2:	bd70      	pop	{r4, r5, r6, pc}

080090f4 <__sfp_lock_acquire>:
 80090f4:	4801      	ldr	r0, [pc, #4]	; (80090fc <__sfp_lock_acquire+0x8>)
 80090f6:	f000 b8b3 	b.w	8009260 <__retarget_lock_acquire_recursive>
 80090fa:	bf00      	nop
 80090fc:	20000951 	.word	0x20000951

08009100 <__sfp_lock_release>:
 8009100:	4801      	ldr	r0, [pc, #4]	; (8009108 <__sfp_lock_release+0x8>)
 8009102:	f000 b8ae 	b.w	8009262 <__retarget_lock_release_recursive>
 8009106:	bf00      	nop
 8009108:	20000951 	.word	0x20000951

0800910c <__sinit_lock_acquire>:
 800910c:	4801      	ldr	r0, [pc, #4]	; (8009114 <__sinit_lock_acquire+0x8>)
 800910e:	f000 b8a7 	b.w	8009260 <__retarget_lock_acquire_recursive>
 8009112:	bf00      	nop
 8009114:	20000952 	.word	0x20000952

08009118 <__sinit_lock_release>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__sinit_lock_release+0x8>)
 800911a:	f000 b8a2 	b.w	8009262 <__retarget_lock_release_recursive>
 800911e:	bf00      	nop
 8009120:	20000952 	.word	0x20000952

08009124 <__sinit>:
 8009124:	b510      	push	{r4, lr}
 8009126:	4604      	mov	r4, r0
 8009128:	f7ff fff0 	bl	800910c <__sinit_lock_acquire>
 800912c:	69a3      	ldr	r3, [r4, #24]
 800912e:	b11b      	cbz	r3, 8009138 <__sinit+0x14>
 8009130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009134:	f7ff bff0 	b.w	8009118 <__sinit_lock_release>
 8009138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800913c:	6523      	str	r3, [r4, #80]	; 0x50
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <__sinit+0x68>)
 8009140:	4a13      	ldr	r2, [pc, #76]	; (8009190 <__sinit+0x6c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	62a2      	str	r2, [r4, #40]	; 0x28
 8009146:	42a3      	cmp	r3, r4
 8009148:	bf04      	itt	eq
 800914a:	2301      	moveq	r3, #1
 800914c:	61a3      	streq	r3, [r4, #24]
 800914e:	4620      	mov	r0, r4
 8009150:	f000 f820 	bl	8009194 <__sfp>
 8009154:	6060      	str	r0, [r4, #4]
 8009156:	4620      	mov	r0, r4
 8009158:	f000 f81c 	bl	8009194 <__sfp>
 800915c:	60a0      	str	r0, [r4, #8]
 800915e:	4620      	mov	r0, r4
 8009160:	f000 f818 	bl	8009194 <__sfp>
 8009164:	2200      	movs	r2, #0
 8009166:	60e0      	str	r0, [r4, #12]
 8009168:	2104      	movs	r1, #4
 800916a:	6860      	ldr	r0, [r4, #4]
 800916c:	f7ff ff82 	bl	8009074 <std>
 8009170:	68a0      	ldr	r0, [r4, #8]
 8009172:	2201      	movs	r2, #1
 8009174:	2109      	movs	r1, #9
 8009176:	f7ff ff7d 	bl	8009074 <std>
 800917a:	68e0      	ldr	r0, [r4, #12]
 800917c:	2202      	movs	r2, #2
 800917e:	2112      	movs	r1, #18
 8009180:	f7ff ff78 	bl	8009074 <std>
 8009184:	2301      	movs	r3, #1
 8009186:	61a3      	str	r3, [r4, #24]
 8009188:	e7d2      	b.n	8009130 <__sinit+0xc>
 800918a:	bf00      	nop
 800918c:	0800a0a4 	.word	0x0800a0a4
 8009190:	080090bd 	.word	0x080090bd

08009194 <__sfp>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	4607      	mov	r7, r0
 8009198:	f7ff ffac 	bl	80090f4 <__sfp_lock_acquire>
 800919c:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <__sfp+0x84>)
 800919e:	681e      	ldr	r6, [r3, #0]
 80091a0:	69b3      	ldr	r3, [r6, #24]
 80091a2:	b913      	cbnz	r3, 80091aa <__sfp+0x16>
 80091a4:	4630      	mov	r0, r6
 80091a6:	f7ff ffbd 	bl	8009124 <__sinit>
 80091aa:	3648      	adds	r6, #72	; 0x48
 80091ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	d503      	bpl.n	80091bc <__sfp+0x28>
 80091b4:	6833      	ldr	r3, [r6, #0]
 80091b6:	b30b      	cbz	r3, 80091fc <__sfp+0x68>
 80091b8:	6836      	ldr	r6, [r6, #0]
 80091ba:	e7f7      	b.n	80091ac <__sfp+0x18>
 80091bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091c0:	b9d5      	cbnz	r5, 80091f8 <__sfp+0x64>
 80091c2:	4b16      	ldr	r3, [pc, #88]	; (800921c <__sfp+0x88>)
 80091c4:	60e3      	str	r3, [r4, #12]
 80091c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091ca:	6665      	str	r5, [r4, #100]	; 0x64
 80091cc:	f000 f847 	bl	800925e <__retarget_lock_init_recursive>
 80091d0:	f7ff ff96 	bl	8009100 <__sfp_lock_release>
 80091d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091dc:	6025      	str	r5, [r4, #0]
 80091de:	61a5      	str	r5, [r4, #24]
 80091e0:	2208      	movs	r2, #8
 80091e2:	4629      	mov	r1, r5
 80091e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091e8:	f7fd faae 	bl	8006748 <memset>
 80091ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091f4:	4620      	mov	r0, r4
 80091f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f8:	3468      	adds	r4, #104	; 0x68
 80091fa:	e7d9      	b.n	80091b0 <__sfp+0x1c>
 80091fc:	2104      	movs	r1, #4
 80091fe:	4638      	mov	r0, r7
 8009200:	f7ff ff62 	bl	80090c8 <__sfmoreglue>
 8009204:	4604      	mov	r4, r0
 8009206:	6030      	str	r0, [r6, #0]
 8009208:	2800      	cmp	r0, #0
 800920a:	d1d5      	bne.n	80091b8 <__sfp+0x24>
 800920c:	f7ff ff78 	bl	8009100 <__sfp_lock_release>
 8009210:	230c      	movs	r3, #12
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	e7ee      	b.n	80091f4 <__sfp+0x60>
 8009216:	bf00      	nop
 8009218:	0800a0a4 	.word	0x0800a0a4
 800921c:	ffff0001 	.word	0xffff0001

08009220 <_fwalk_reent>:
 8009220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009224:	4606      	mov	r6, r0
 8009226:	4688      	mov	r8, r1
 8009228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800922c:	2700      	movs	r7, #0
 800922e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009232:	f1b9 0901 	subs.w	r9, r9, #1
 8009236:	d505      	bpl.n	8009244 <_fwalk_reent+0x24>
 8009238:	6824      	ldr	r4, [r4, #0]
 800923a:	2c00      	cmp	r4, #0
 800923c:	d1f7      	bne.n	800922e <_fwalk_reent+0xe>
 800923e:	4638      	mov	r0, r7
 8009240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009244:	89ab      	ldrh	r3, [r5, #12]
 8009246:	2b01      	cmp	r3, #1
 8009248:	d907      	bls.n	800925a <_fwalk_reent+0x3a>
 800924a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800924e:	3301      	adds	r3, #1
 8009250:	d003      	beq.n	800925a <_fwalk_reent+0x3a>
 8009252:	4629      	mov	r1, r5
 8009254:	4630      	mov	r0, r6
 8009256:	47c0      	blx	r8
 8009258:	4307      	orrs	r7, r0
 800925a:	3568      	adds	r5, #104	; 0x68
 800925c:	e7e9      	b.n	8009232 <_fwalk_reent+0x12>

0800925e <__retarget_lock_init_recursive>:
 800925e:	4770      	bx	lr

08009260 <__retarget_lock_acquire_recursive>:
 8009260:	4770      	bx	lr

08009262 <__retarget_lock_release_recursive>:
 8009262:	4770      	bx	lr

08009264 <__swhatbuf_r>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	460e      	mov	r6, r1
 8009268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800926c:	2900      	cmp	r1, #0
 800926e:	b096      	sub	sp, #88	; 0x58
 8009270:	4614      	mov	r4, r2
 8009272:	461d      	mov	r5, r3
 8009274:	da08      	bge.n	8009288 <__swhatbuf_r+0x24>
 8009276:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	061a      	lsls	r2, r3, #24
 8009280:	d410      	bmi.n	80092a4 <__swhatbuf_r+0x40>
 8009282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009286:	e00e      	b.n	80092a6 <__swhatbuf_r+0x42>
 8009288:	466a      	mov	r2, sp
 800928a:	f000 f903 	bl	8009494 <_fstat_r>
 800928e:	2800      	cmp	r0, #0
 8009290:	dbf1      	blt.n	8009276 <__swhatbuf_r+0x12>
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800929c:	425a      	negs	r2, r3
 800929e:	415a      	adcs	r2, r3
 80092a0:	602a      	str	r2, [r5, #0]
 80092a2:	e7ee      	b.n	8009282 <__swhatbuf_r+0x1e>
 80092a4:	2340      	movs	r3, #64	; 0x40
 80092a6:	2000      	movs	r0, #0
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	b016      	add	sp, #88	; 0x58
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080092b0 <__smakebuf_r>:
 80092b0:	898b      	ldrh	r3, [r1, #12]
 80092b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092b4:	079d      	lsls	r5, r3, #30
 80092b6:	4606      	mov	r6, r0
 80092b8:	460c      	mov	r4, r1
 80092ba:	d507      	bpl.n	80092cc <__smakebuf_r+0x1c>
 80092bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	2301      	movs	r3, #1
 80092c6:	6163      	str	r3, [r4, #20]
 80092c8:	b002      	add	sp, #8
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	ab01      	add	r3, sp, #4
 80092ce:	466a      	mov	r2, sp
 80092d0:	f7ff ffc8 	bl	8009264 <__swhatbuf_r>
 80092d4:	9900      	ldr	r1, [sp, #0]
 80092d6:	4605      	mov	r5, r0
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff f963 	bl	80085a4 <_malloc_r>
 80092de:	b948      	cbnz	r0, 80092f4 <__smakebuf_r+0x44>
 80092e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d4ef      	bmi.n	80092c8 <__smakebuf_r+0x18>
 80092e8:	f023 0303 	bic.w	r3, r3, #3
 80092ec:	f043 0302 	orr.w	r3, r3, #2
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	e7e3      	b.n	80092bc <__smakebuf_r+0xc>
 80092f4:	4b0d      	ldr	r3, [pc, #52]	; (800932c <__smakebuf_r+0x7c>)
 80092f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	81a3      	strh	r3, [r4, #12]
 8009302:	9b00      	ldr	r3, [sp, #0]
 8009304:	6163      	str	r3, [r4, #20]
 8009306:	9b01      	ldr	r3, [sp, #4]
 8009308:	6120      	str	r0, [r4, #16]
 800930a:	b15b      	cbz	r3, 8009324 <__smakebuf_r+0x74>
 800930c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009310:	4630      	mov	r0, r6
 8009312:	f000 f8d1 	bl	80094b8 <_isatty_r>
 8009316:	b128      	cbz	r0, 8009324 <__smakebuf_r+0x74>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f023 0303 	bic.w	r3, r3, #3
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	89a0      	ldrh	r0, [r4, #12]
 8009326:	4305      	orrs	r5, r0
 8009328:	81a5      	strh	r5, [r4, #12]
 800932a:	e7cd      	b.n	80092c8 <__smakebuf_r+0x18>
 800932c:	080090bd 	.word	0x080090bd

08009330 <_malloc_usable_size_r>:
 8009330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009334:	1f18      	subs	r0, r3, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	bfbc      	itt	lt
 800933a:	580b      	ldrlt	r3, [r1, r0]
 800933c:	18c0      	addlt	r0, r0, r3
 800933e:	4770      	bx	lr

08009340 <_raise_r>:
 8009340:	291f      	cmp	r1, #31
 8009342:	b538      	push	{r3, r4, r5, lr}
 8009344:	4604      	mov	r4, r0
 8009346:	460d      	mov	r5, r1
 8009348:	d904      	bls.n	8009354 <_raise_r+0x14>
 800934a:	2316      	movs	r3, #22
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	f04f 30ff 	mov.w	r0, #4294967295
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009356:	b112      	cbz	r2, 800935e <_raise_r+0x1e>
 8009358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800935c:	b94b      	cbnz	r3, 8009372 <_raise_r+0x32>
 800935e:	4620      	mov	r0, r4
 8009360:	f000 f830 	bl	80093c4 <_getpid_r>
 8009364:	462a      	mov	r2, r5
 8009366:	4601      	mov	r1, r0
 8009368:	4620      	mov	r0, r4
 800936a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936e:	f000 b817 	b.w	80093a0 <_kill_r>
 8009372:	2b01      	cmp	r3, #1
 8009374:	d00a      	beq.n	800938c <_raise_r+0x4c>
 8009376:	1c59      	adds	r1, r3, #1
 8009378:	d103      	bne.n	8009382 <_raise_r+0x42>
 800937a:	2316      	movs	r3, #22
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	2001      	movs	r0, #1
 8009380:	e7e7      	b.n	8009352 <_raise_r+0x12>
 8009382:	2400      	movs	r4, #0
 8009384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009388:	4628      	mov	r0, r5
 800938a:	4798      	blx	r3
 800938c:	2000      	movs	r0, #0
 800938e:	e7e0      	b.n	8009352 <_raise_r+0x12>

08009390 <raise>:
 8009390:	4b02      	ldr	r3, [pc, #8]	; (800939c <raise+0xc>)
 8009392:	4601      	mov	r1, r0
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	f7ff bfd3 	b.w	8009340 <_raise_r>
 800939a:	bf00      	nop
 800939c:	20000014 	.word	0x20000014

080093a0 <_kill_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	; (80093c0 <_kill_r+0x20>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	4611      	mov	r1, r2
 80093ac:	602b      	str	r3, [r5, #0]
 80093ae:	f7f9 fcfd 	bl	8002dac <_kill>
 80093b2:	1c43      	adds	r3, r0, #1
 80093b4:	d102      	bne.n	80093bc <_kill_r+0x1c>
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	b103      	cbz	r3, 80093bc <_kill_r+0x1c>
 80093ba:	6023      	str	r3, [r4, #0]
 80093bc:	bd38      	pop	{r3, r4, r5, pc}
 80093be:	bf00      	nop
 80093c0:	2000094c 	.word	0x2000094c

080093c4 <_getpid_r>:
 80093c4:	f7f9 bcea 	b.w	8002d9c <_getpid>

080093c8 <__sread>:
 80093c8:	b510      	push	{r4, lr}
 80093ca:	460c      	mov	r4, r1
 80093cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d0:	f000 f894 	bl	80094fc <_read_r>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	bfab      	itete	ge
 80093d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093da:	89a3      	ldrhlt	r3, [r4, #12]
 80093dc:	181b      	addge	r3, r3, r0
 80093de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093e2:	bfac      	ite	ge
 80093e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80093e6:	81a3      	strhlt	r3, [r4, #12]
 80093e8:	bd10      	pop	{r4, pc}

080093ea <__swrite>:
 80093ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ee:	461f      	mov	r7, r3
 80093f0:	898b      	ldrh	r3, [r1, #12]
 80093f2:	05db      	lsls	r3, r3, #23
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	4616      	mov	r6, r2
 80093fa:	d505      	bpl.n	8009408 <__swrite+0x1e>
 80093fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009400:	2302      	movs	r3, #2
 8009402:	2200      	movs	r2, #0
 8009404:	f000 f868 	bl	80094d8 <_lseek_r>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800940e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	4632      	mov	r2, r6
 8009416:	463b      	mov	r3, r7
 8009418:	4628      	mov	r0, r5
 800941a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	f000 b817 	b.w	8009450 <_write_r>

08009422 <__sseek>:
 8009422:	b510      	push	{r4, lr}
 8009424:	460c      	mov	r4, r1
 8009426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942a:	f000 f855 	bl	80094d8 <_lseek_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	bf15      	itete	ne
 8009434:	6560      	strne	r0, [r4, #84]	; 0x54
 8009436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800943a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800943e:	81a3      	strheq	r3, [r4, #12]
 8009440:	bf18      	it	ne
 8009442:	81a3      	strhne	r3, [r4, #12]
 8009444:	bd10      	pop	{r4, pc}

08009446 <__sclose>:
 8009446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800944a:	f000 b813 	b.w	8009474 <_close_r>
	...

08009450 <_write_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	; (8009470 <_write_r+0x20>)
 8009454:	4604      	mov	r4, r0
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	2200      	movs	r2, #0
 800945c:	602a      	str	r2, [r5, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	f7f9 fcdb 	bl	8002e1a <_write>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_write_r+0x1e>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_write_r+0x1e>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	2000094c 	.word	0x2000094c

08009474 <_close_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d06      	ldr	r5, [pc, #24]	; (8009490 <_close_r+0x1c>)
 8009478:	2300      	movs	r3, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	f7f9 fce7 	bl	8002e52 <_close>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_close_r+0x1a>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_close_r+0x1a>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	2000094c 	.word	0x2000094c

08009494 <_fstat_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d07      	ldr	r5, [pc, #28]	; (80094b4 <_fstat_r+0x20>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f7f9 fce2 	bl	8002e6a <_fstat>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d102      	bne.n	80094b0 <_fstat_r+0x1c>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	b103      	cbz	r3, 80094b0 <_fstat_r+0x1c>
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	bf00      	nop
 80094b4:	2000094c 	.word	0x2000094c

080094b8 <_isatty_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_isatty_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f9 fce1 	bl	8002e8a <_isatty>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_isatty_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_isatty_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	2000094c 	.word	0x2000094c

080094d8 <_lseek_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	; (80094f8 <_lseek_r+0x20>)
 80094dc:	4604      	mov	r4, r0
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	602a      	str	r2, [r5, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f7f9 fcda 	bl	8002ea0 <_lseek>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_lseek_r+0x1e>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_lseek_r+0x1e>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	2000094c 	.word	0x2000094c

080094fc <_read_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	; (800951c <_read_r+0x20>)
 8009500:	4604      	mov	r4, r0
 8009502:	4608      	mov	r0, r1
 8009504:	4611      	mov	r1, r2
 8009506:	2200      	movs	r2, #0
 8009508:	602a      	str	r2, [r5, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	f7f9 fc68 	bl	8002de0 <_read>
 8009510:	1c43      	adds	r3, r0, #1
 8009512:	d102      	bne.n	800951a <_read_r+0x1e>
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	b103      	cbz	r3, 800951a <_read_r+0x1e>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	bd38      	pop	{r3, r4, r5, pc}
 800951c:	2000094c 	.word	0x2000094c

08009520 <_init>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr

0800952c <_fini>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr
